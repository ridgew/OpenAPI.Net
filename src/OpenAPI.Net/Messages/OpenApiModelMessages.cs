// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OpenApiModelMessages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from OpenApiModelMessages.proto</summary>
public static partial class OpenApiModelMessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for OpenApiModelMessages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static OpenApiModelMessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpPcGVuQXBpTW9kZWxNZXNzYWdlcy5wcm90byJSCgxQcm90b09BQXNzZXQS",
          "DwoHYXNzZXRJZBgBIAIoAxIMCgRuYW1lGAIgAigJEhMKC2Rpc3BsYXlOYW1l",
          "GAMgASgJEg4KBmRpZ2l0cxgEIAEoBSLXCAoNUHJvdG9PQVN5bWJvbBIQCghz",
          "eW1ib2xJZBgBIAIoAxIOCgZkaWdpdHMYAiACKAUSEwoLcGlwUG9zaXRpb24Y",
          "AyACKAUSGgoSZW5hYmxlU2hvcnRTZWxsaW5nGAQgASgIEhoKEmd1YXJhbnRl",
          "ZWRTdG9wTG9zcxgFIAEoCBI0ChFzd2FwUm9sbG92ZXIzRGF5cxgGIAEoDjIR",
          "LlByb3RvT0FEYXlPZldlZWs6Bk1PTkRBWRIQCghzd2FwTG9uZxgHIAEoARIR",
          "Cglzd2FwU2hvcnQYCCABKAESEQoJbWF4Vm9sdW1lGAkgASgDEhEKCW1pblZv",
          "bHVtZRgKIAEoAxISCgpzdGVwVm9sdW1lGAsgASgDEhMKC21heEV4cG9zdXJl",
          "GAwgASgEEiIKCHNjaGVkdWxlGA0gAygLMhAuUHJvdG9PQUludGVydmFsEhYK",
          "CmNvbW1pc3Npb24YDiABKANCAhgBEkMKDmNvbW1pc3Npb25UeXBlGA8gASgO",
          "MhYuUHJvdG9PQUNvbW1pc3Npb25UeXBlOhNVU0RfUEVSX01JTExJT05fVVNE",
          "EhIKCnNsRGlzdGFuY2UYECABKA0SEgoKdHBEaXN0YW5jZRgRIAEoDRITCgtn",
          "c2xEaXN0YW5jZRgSIAEoDRIRCglnc2xDaGFyZ2UYEyABKAMSTAoNZGlzdGFu",
          "Y2VTZXRJbhgUIAEoDjIaLlByb3RvT0FTeW1ib2xEaXN0YW5jZVR5cGU6GVNZ",
          "TUJPTF9ESVNUQU5DRV9JTl9QT0lOVFMSGQoNbWluQ29tbWlzc2lvbhgVIAEo",
          "A0ICGAESPgoRbWluQ29tbWlzc2lvblR5cGUYFiABKA4yGS5Qcm90b09BTWlu",
          "Q29tbWlzc2lvblR5cGU6CENVUlJFTkNZEh8KEm1pbkNvbW1pc3Npb25Bc3Nl",
          "dBgXIAEoCToDVVNEEhoKEnJvbGxvdmVyQ29tbWlzc2lvbhgYIAEoAxIYChBz",
          "a2lwUm9sbG92ZXJEYXlzGBkgASgFEhgKEHNjaGVkdWxlVGltZVpvbmUYGiAB",
          "KAkSMQoLdHJhZGluZ01vZGUYGyABKA4yEy5Qcm90b09BVHJhZGluZ01vZGU6",
          "B0VOQUJMRUQSOgoXcm9sbG92ZXJDb21taXNzaW9uM0RheXMYHCABKA4yES5Q",
          "cm90b09BRGF5T2ZXZWVrOgZNT05EQVkSPgoTc3dhcENhbGN1bGF0aW9uVHlw",
          "ZRgdIAEoDjIbLlByb3RvT0FTd2FwQ2FsY3VsYXRpb25UeXBlOgRQSVBTEg8K",
          "B2xvdFNpemUYHiABKAMSJAoccHJlY2lzZVRyYWRpbmdDb21taXNzaW9uUmF0",
          "ZRgfIAEoAxIcChRwcmVjaXNlTWluQ29tbWlzc2lvbhggIAEoAxIgCgdob2xp",
          "ZGF5GCEgAygLMg8uUHJvdG9PQUhvbGlkYXkSHAoUcG5sQ29udmVyc2lvbkZl",
          "ZVJhdGUYIiABKAUipQEKElByb3RvT0FMaWdodFN5bWJvbBIQCghzeW1ib2xJ",
          "ZBgBIAIoAxISCgpzeW1ib2xOYW1lGAIgASgJEg8KB2VuYWJsZWQYAyABKAgS",
          "EwoLYmFzZUFzc2V0SWQYBCABKAMSFAoMcXVvdGVBc3NldElkGAUgASgDEhgK",
          "EHN5bWJvbENhdGVnb3J5SWQYBiABKAMSEwoLZGVzY3JpcHRpb24YByABKAki",
          "bAoVUHJvdG9PQUFyY2hpdmVkU3ltYm9sEhAKCHN5bWJvbElkGAEgAigDEgwK",
          "BG5hbWUYAiACKAkSHgoWdXRjTGFzdFVwZGF0ZVRpbWVzdGFtcBgDIAIoAxIT",
          "CgtkZXNjcmlwdGlvbhgEIAEoCSJHChVQcm90b09BU3ltYm9sQ2F0ZWdvcnkS",
          "CgoCaWQYASACKAMSFAoMYXNzZXRDbGFzc0lkGAIgAigDEgwKBG5hbWUYAyAC",
          "KAkiOQoPUHJvdG9PQUludGVydmFsEhMKC3N0YXJ0U2Vjb25kGAMgAigNEhEK",
          "CWVuZFNlY29uZBgEIAIoDSKkBQoNUHJvdG9PQVRyYWRlchIbChNjdGlkVHJh",
          "ZGVyQWNjb3VudElkGAEgAigDEg8KB2JhbGFuY2UYAiACKAMSFgoOYmFsYW5j",
          "ZVZlcnNpb24YAyABKAMSFAoMbWFuYWdlckJvbnVzGAQgASgDEg8KB2liQm9u",
          "dXMYBSABKAMSHAoUbm9uV2l0aGRyYXdhYmxlQm9udXMYBiABKAMSNwoMYWNj",
          "ZXNzUmlnaHRzGAcgASgOMhQuUHJvdG9PQUFjY2Vzc1JpZ2h0czoLRlVMTF9B",
          "Q0NFU1MSFgoOZGVwb3NpdEFzc2V0SWQYCCACKAMSEAoIc3dhcEZyZWUYCSAB",
          "KAgSFwoPbGV2ZXJhZ2VJbkNlbnRzGAogASgNEkYKGnRvdGFsTWFyZ2luQ2Fs",
          "Y3VsYXRpb25UeXBlGAsgASgOMiIuUHJvdG9PQVRvdGFsTWFyZ2luQ2FsY3Vs",
          "YXRpb25UeXBlEhMKC21heExldmVyYWdlGAwgASgNEhYKCmZyZW5jaFJpc2sY",
          "DSABKAhCAhgBEhMKC3RyYWRlckxvZ2luGA4gASgDEjAKC2FjY291bnRUeXBl",
          "GA8gASgOMhMuUHJvdG9PQUFjY291bnRUeXBlOgZIRURHRUQSEgoKYnJva2Vy",
          "TmFtZRgQIAEoCRIdChVyZWdpc3RyYXRpb25UaW1lc3RhbXAYESABKAMSFQoN",
          "aXNMaW1pdGVkUmlzaxgSIAEoCBJxCiRsaW1pdGVkUmlza01hcmdpbkNhbGN1",
          "bGF0aW9uU3RyYXRlZ3kYEyABKA4yLC5Qcm90b09BTGltaXRlZFJpc2tNYXJn",
          "aW5DYWxjdWxhdGlvblN0cmF0ZWd5OhVBQ0NPUkRJTkdfVE9fTEVWRVJBR0US",
          "EwoLbW9uZXlEaWdpdHMYFCABKA0ixAMKD1Byb3RvT0FQb3NpdGlvbhISCgpw",
          "b3NpdGlvbklkGAEgAigDEiQKCXRyYWRlRGF0YRgCIAIoCzIRLlByb3RvT0FU",
          "cmFkZURhdGESLgoOcG9zaXRpb25TdGF0dXMYAyACKA4yFi5Qcm90b09BUG9z",
          "aXRpb25TdGF0dXMSDAoEc3dhcBgEIAIoAxINCgVwcmljZRgFIAEoARIQCghz",
          "dG9wTG9zcxgGIAEoARISCgp0YWtlUHJvZml0GAcgASgBEh4KFnV0Y0xhc3RV",
          "cGRhdGVUaW1lc3RhbXAYCCABKAMSEgoKY29tbWlzc2lvbhgJIAEoAxISCgpt",
          "YXJnaW5SYXRlGAogASgBEhsKE21pcnJvcmluZ0NvbW1pc3Npb24YCyABKAMS",
          "GgoSZ3VhcmFudGVlZFN0b3BMb3NzGAwgASgIEhIKCnVzZWRNYXJnaW4YDSAB",
          "KAQSQAoVc3RvcExvc3NUcmlnZ2VyTWV0aG9kGA4gASgOMhouUHJvdG9PQU9y",
          "ZGVyVHJpZ2dlck1ldGhvZDoFVFJBREUSEwoLbW9uZXlEaWdpdHMYDyABKA0S",
          "GAoQdHJhaWxpbmdTdG9wTG9zcxgQIAEoCCKtAQoQUHJvdG9PQVRyYWRlRGF0",
          "YRIQCghzeW1ib2xJZBgBIAIoAxIOCgZ2b2x1bWUYAiACKAMSJAoJdHJhZGVT",
          "aWRlGAMgAigOMhEuUHJvdG9PQVRyYWRlU2lkZRIVCg1vcGVuVGltZXN0YW1w",
          "GAQgASgDEg0KBWxhYmVsGAUgASgJEhoKEmd1YXJhbnRlZWRTdG9wTG9zcxgG",
          "IAEoCBIPCgdjb21tZW50GAcgASgJIqUFCgxQcm90b09BT3JkZXISDwoHb3Jk",
          "ZXJJZBgBIAIoAxIkCgl0cmFkZURhdGEYAiACKAsyES5Qcm90b09BVHJhZGVE",
          "YXRhEiQKCW9yZGVyVHlwZRgDIAIoDjIRLlByb3RvT0FPcmRlclR5cGUSKAoL",
          "b3JkZXJTdGF0dXMYBCACKA4yEy5Qcm90b09BT3JkZXJTdGF0dXMSGwoTZXhw",
          "aXJhdGlvblRpbWVzdGFtcBgGIAEoAxIWCg5leGVjdXRpb25QcmljZRgHIAEo",
          "ARIWCg5leGVjdXRlZFZvbHVtZRgIIAEoAxIeChZ1dGNMYXN0VXBkYXRlVGlt",
          "ZXN0YW1wGAkgASgDEhkKEWJhc2VTbGlwcGFnZVByaWNlGAogASgBEhgKEHNs",
          "aXBwYWdlSW5Qb2ludHMYCyABKAMSFAoMY2xvc2luZ09yZGVyGAwgASgIEhIK",
          "CmxpbWl0UHJpY2UYDSABKAESEQoJc3RvcFByaWNlGA4gASgBEhAKCHN0b3BM",
          "b3NzGA8gASgBEhIKCnRha2VQcm9maXQYECABKAESFQoNY2xpZW50T3JkZXJJ",
          "ZBgRIAEoCRI9Cgt0aW1lSW5Gb3JjZRgSIAEoDjITLlByb3RvT0FUaW1lSW5G",
          "b3JjZToTSU1NRURJQVRFX09SX0NBTkNFTBISCgpwb3NpdGlvbklkGBMgASgD",
          "EhgKEHJlbGF0aXZlU3RvcExvc3MYFCABKAMSGgoScmVsYXRpdmVUYWtlUHJv",
          "Zml0GBUgASgDEhEKCWlzU3RvcE91dBgWIAEoCBIYChB0cmFpbGluZ1N0b3BM",
          "b3NzGBcgASgIEjwKEXN0b3BUcmlnZ2VyTWV0aG9kGBggASgOMhouUHJvdG9P",
          "QU9yZGVyVHJpZ2dlck1ldGhvZDoFVFJBREUimQIKG1Byb3RvT0FCb251c0Rl",
          "cG9zaXRXaXRoZHJhdxIuCg1vcGVyYXRpb25UeXBlGAEgAigOMhcuUHJvdG9P",
          "QUNoYW5nZUJvbnVzVHlwZRIWCg5ib251c0hpc3RvcnlJZBgCIAIoAxIUCgxt",
          "YW5hZ2VyQm9udXMYAyACKAMSFAoMbWFuYWdlckRlbHRhGAQgAigDEg8KB2li",
          "Qm9udXMYBSACKAMSDwoHaWJEZWx0YRgGIAIoAxIcChRjaGFuZ2VCb251c1Rp",
          "bWVzdGFtcBgHIAIoAxIUCgxleHRlcm5hbE5vdGUYCCABKAkSGwoTaW50cm9k",
          "dWNpbmdCcm9rZXJJZBgJIAEoAxITCgttb25leURpZ2l0cxgKIAEoDSL3AQoW",
          "UHJvdG9PQURlcG9zaXRXaXRoZHJhdxIwCg1vcGVyYXRpb25UeXBlGAEgAigO",
          "MhkuUHJvdG9PQUNoYW5nZUJhbGFuY2VUeXBlEhgKEGJhbGFuY2VIaXN0b3J5",
          "SWQYAiACKAMSDwoHYmFsYW5jZRgDIAIoAxINCgVkZWx0YRgEIAIoAxIeChZj",
          "aGFuZ2VCYWxhbmNlVGltZXN0YW1wGAUgAigDEhQKDGV4dGVybmFsTm90ZRgG",
          "IAEoCRIWCg5iYWxhbmNlVmVyc2lvbhgHIAEoAxIOCgZlcXVpdHkYCCABKAMS",
          "EwoLbW9uZXlEaWdpdHMYCSABKA0izQMKC1Byb3RvT0FEZWFsEg4KBmRlYWxJ",
          "ZBgBIAIoAxIPCgdvcmRlcklkGAIgAigDEhIKCnBvc2l0aW9uSWQYAyACKAMS",
          "DgoGdm9sdW1lGAQgAigDEhQKDGZpbGxlZFZvbHVtZRgFIAIoAxIQCghzeW1i",
          "b2xJZBgGIAIoAxIXCg9jcmVhdGVUaW1lc3RhbXAYByACKAMSGgoSZXhlY3V0",
          "aW9uVGltZXN0YW1wGAggAigDEh4KFnV0Y0xhc3RVcGRhdGVUaW1lc3RhbXAY",
          "CSABKAMSFgoOZXhlY3V0aW9uUHJpY2UYCiABKAESJAoJdHJhZGVTaWRlGAsg",
          "AigOMhEuUHJvdG9PQVRyYWRlU2lkZRImCgpkZWFsU3RhdHVzGAwgAigOMhIu",
          "UHJvdG9PQURlYWxTdGF0dXMSEgoKbWFyZ2luUmF0ZRgNIAEoARISCgpjb21t",
          "aXNzaW9uGA4gASgDEh8KF2Jhc2VUb1VzZENvbnZlcnNpb25SYXRlGA8gASgB",
          "EjgKE2Nsb3NlUG9zaXRpb25EZXRhaWwYECABKAsyGy5Qcm90b09BQ2xvc2VQ",
          "b3NpdGlvbkRldGFpbBITCgttb25leURpZ2l0cxgRIAEoDSL7AQoaUHJvdG9P",
          "QUNsb3NlUG9zaXRpb25EZXRhaWwSEgoKZW50cnlQcmljZRgBIAIoARITCgtn",
          "cm9zc1Byb2ZpdBgCIAIoAxIMCgRzd2FwGAMgAigDEhIKCmNvbW1pc3Npb24Y",
          "BCACKAMSDwoHYmFsYW5jZRgFIAIoAxIkChxxdW90ZVRvRGVwb3NpdENvbnZl",
          "cnNpb25SYXRlGAYgASgBEhQKDGNsb3NlZFZvbHVtZRgHIAEoAxIWCg5iYWxh",
          "bmNlVmVyc2lvbhgIIAEoAxITCgttb25leURpZ2l0cxgJIAEoDRIYChBwbmxD",
          "b252ZXJzaW9uRmVlGAogASgDIrMBCg9Qcm90b09BVHJlbmRiYXISDgoGdm9s",
          "dW1lGAMgAigDEioKBnBlcmlvZBgEIAEoDjIWLlByb3RvT0FUcmVuZGJhclBl",
          "cmlvZDoCTTESCwoDbG93GAUgASgDEhEKCWRlbHRhT3BlbhgGIAEoBBISCgpk",
          "ZWx0YUNsb3NlGAcgASgEEhEKCWRlbHRhSGlnaBgIIAEoBBIdChV1dGNUaW1l",
          "c3RhbXBJbk1pbnV0ZXMYCSABKA0iTgoVUHJvdG9PQUV4cGVjdGVkTWFyZ2lu",
          "Eg4KBnZvbHVtZRgBIAIoAxIRCglidXlNYXJnaW4YAiACKAMSEgoKc2VsbE1h",
          "cmdpbhgDIAIoAyIyCg9Qcm90b09BVGlja0RhdGESEQoJdGltZXN0YW1wGAEg",
          "AigDEgwKBHRpY2sYAiACKAMiJAoSUHJvdG9PQUN0aWRQcm9maWxlEg4KBnVz",
          "ZXJJZBgBIAIoAyKiAQoYUHJvdG9PQUN0aWRUcmFkZXJBY2NvdW50EhsKE2N0",
          "aWRUcmFkZXJBY2NvdW50SWQYASACKAQSDgoGaXNMaXZlGAIgASgIEhMKC3Ry",
          "YWRlckxvZ2luGAMgASgDEiAKGGxhc3RDbG9zaW5nRGVhbFRpbWVzdGFtcBgE",
          "IAEoAxIiChpsYXN0QmFsYW5jZVVwZGF0ZVRpbWVzdGFtcBgFIAEoAyItChFQ",
          "cm90b09BQXNzZXRDbGFzcxIKCgJpZBgBIAEoAxIMCgRuYW1lGAIgASgJIkcK",
          "EVByb3RvT0FEZXB0aFF1b3RlEgoKAmlkGAEgAigEEgwKBHNpemUYAyACKAQS",
          "CwoDYmlkGAQgASgEEgsKA2FzaxgFIAEoBCKDAQoRUHJvdG9PQU1hcmdpbkNh",
          "bGwSMAoObWFyZ2luQ2FsbFR5cGUYASACKA4yGC5Qcm90b09BTm90aWZpY2F0",
          "aW9uVHlwZRIcChRtYXJnaW5MZXZlbFRocmVzaG9sZBgCIAIoARIeChZ1dGNM",
          "YXN0VXBkYXRlVGltZXN0YW1wGAMgASgDIrIBCg5Qcm90b09BSG9saWRheRIR",
          "Cglob2xpZGF5SWQYASACKAMSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlv",
          "bhgDIAEoCRIYChBzY2hlZHVsZVRpbWVab25lGAQgAigJEhMKC2hvbGlkYXlE",
          "YXRlGAUgAigDEhMKC2lzUmVjdXJyaW5nGAYgAigIEhMKC3N0YXJ0U2Vjb25k",
          "GAcgASgFEhEKCWVuZFNlY29uZBgIIAEoBSrHFQoSUHJvdG9PQVBheWxvYWRU",
          "eXBlEiIKHVBST1RPX09BX0FQUExJQ0FUSU9OX0FVVEhfUkVRELQQEiIKHVBS",
          "T1RPX09BX0FQUExJQ0FUSU9OX0FVVEhfUkVTELUQEh4KGVBST1RPX09BX0FD",
          "Q09VTlRfQVVUSF9SRVEQthASHgoZUFJPVE9fT0FfQUNDT1VOVF9BVVRIX1JF",
          "UxC3EBIZChRQUk9UT19PQV9WRVJTSU9OX1JFURC4EBIZChRQUk9UT19PQV9W",
          "RVJTSU9OX1JFUxC5EBIbChZQUk9UT19PQV9ORVdfT1JERVJfUkVRELoQEicK",
          "IlBST1RPX09BX1RSQUlMSU5HX1NMX0NIQU5HRURfRVZFTlQQuxASHgoZUFJP",
          "VE9fT0FfQ0FOQ0VMX09SREVSX1JFURC8EBIdChhQUk9UT19PQV9BTUVORF9P",
          "UkRFUl9SRVEQvRASJQogUFJPVE9fT0FfQU1FTkRfUE9TSVRJT05fU0xUUF9S",
          "RVEQvhASIAobUFJPVE9fT0FfQ0xPU0VfUE9TSVRJT05fUkVREL8QEhwKF1BS",
          "T1RPX09BX0FTU0VUX0xJU1RfUkVREMAQEhwKF1BST1RPX09BX0FTU0VUX0xJ",
          "U1RfUkVTEMEQEh4KGVBST1RPX09BX1NZTUJPTFNfTElTVF9SRVEQwhASHgoZ",
          "UFJPVE9fT0FfU1lNQk9MU19MSVNUX1JFUxDDEBIeChlQUk9UT19PQV9TWU1C",
          "T0xfQllfSURfUkVREMQQEh4KGVBST1RPX09BX1NZTUJPTF9CWV9JRF9SRVMQ",
          "xRASKAojUFJPVE9fT0FfU1lNQk9MU19GT1JfQ09OVkVSU0lPTl9SRVEQxhAS",
          "KAojUFJPVE9fT0FfU1lNQk9MU19GT1JfQ09OVkVSU0lPTl9SRVMQxxASIgod",
          "UFJPVE9fT0FfU1lNQk9MX0NIQU5HRURfRVZFTlQQyBASGAoTUFJPVE9fT0Ff",
          "VFJBREVSX1JFURDJEBIYChNQUk9UT19PQV9UUkFERVJfUkVTEMoQEiEKHFBS",
          "T1RPX09BX1RSQURFUl9VUERBVEVfRVZFTlQQyxASGwoWUFJPVE9fT0FfUkVD",
          "T05DSUxFX1JFURDMEBIbChZQUk9UT19PQV9SRUNPTkNJTEVfUkVTEM0QEh0K",
          "GFBST1RPX09BX0VYRUNVVElPTl9FVkVOVBDOEBIhChxQUk9UT19PQV9TVUJT",
          "Q1JJQkVfU1BPVFNfUkVREM8QEiEKHFBST1RPX09BX1NVQlNDUklCRV9TUE9U",
          "U19SRVMQ0BASIwoeUFJPVE9fT0FfVU5TVUJTQ1JJQkVfU1BPVFNfUkVRENEQ",
          "EiMKHlBST1RPX09BX1VOU1VCU0NSSUJFX1NQT1RTX1JFUxDSEBIYChNQUk9U",
          "T19PQV9TUE9UX0VWRU5UENMQEh8KGlBST1RPX09BX09SREVSX0VSUk9SX0VW",
          "RU5UENQQEhsKFlBST1RPX09BX0RFQUxfTElTVF9SRVEQ1RASGwoWUFJPVE9f",
          "T0FfREVBTF9MSVNUX1JFUxDWEBIpCiRQUk9UT19PQV9TVUJTQ1JJQkVfTElW",
          "RV9UUkVOREJBUl9SRVEQ1xASKwomUFJPVE9fT0FfVU5TVUJTQ1JJQkVfTElW",
          "RV9UUkVOREJBUl9SRVEQ2BASHwoaUFJPVE9fT0FfR0VUX1RSRU5EQkFSU19S",
          "RVEQ2RASHwoaUFJPVE9fT0FfR0VUX1RSRU5EQkFSU19SRVMQ2hASIQocUFJP",
          "VE9fT0FfRVhQRUNURURfTUFSR0lOX1JFURDbEBIhChxQUk9UT19PQV9FWFBF",
          "Q1RFRF9NQVJHSU5fUkVTENwQEiIKHVBST1RPX09BX01BUkdJTl9DSEFOR0VE",
          "X0VWRU5UEN0QEhcKElBST1RPX09BX0VSUk9SX1JFUxDeEBIoCiNQUk9UT19P",
          "QV9DQVNIX0ZMT1dfSElTVE9SWV9MSVNUX1JFURDfEBIoCiNQUk9UT19PQV9D",
          "QVNIX0ZMT1dfSElTVE9SWV9MSVNUX1JFUxDgEBIeChlQUk9UT19PQV9HRVRf",
          "VElDS0RBVEFfUkVREOEQEh4KGVBST1RPX09BX0dFVF9USUNLREFUQV9SRVMQ",
          "4hASLgopUFJPVE9fT0FfQUNDT1VOVFNfVE9LRU5fSU5WQUxJREFURURfRVZF",
          "TlQQ4xASJQogUFJPVE9fT0FfQ0xJRU5UX0RJU0NPTk5FQ1RfRVZFTlQQ5BAS",
          "LgopUFJPVE9fT0FfR0VUX0FDQ09VTlRTX0JZX0FDQ0VTU19UT0tFTl9SRVEQ",
          "5RASLgopUFJPVE9fT0FfR0VUX0FDQ09VTlRTX0JZX0FDQ0VTU19UT0tFTl9S",
          "RVMQ5hASKwomUFJPVE9fT0FfR0VUX0NUSURfUFJPRklMRV9CWV9UT0tFTl9S",
          "RVEQ5xASKwomUFJPVE9fT0FfR0VUX0NUSURfUFJPRklMRV9CWV9UT0tFTl9S",
          "RVMQ6BASIgodUFJPVE9fT0FfQVNTRVRfQ0xBU1NfTElTVF9SRVEQ6RASIgod",
          "UFJPVE9fT0FfQVNTRVRfQ0xBU1NfTElTVF9SRVMQ6hASGQoUUFJPVE9fT0Ff",
          "REVQVEhfRVZFTlQQ6xASKAojUFJPVE9fT0FfU1VCU0NSSUJFX0RFUFRIX1FV",
          "T1RFU19SRVEQ7BASKAojUFJPVE9fT0FfU1VCU0NSSUJFX0RFUFRIX1FVT1RF",
          "U19SRVMQ7RASKgolUFJPVE9fT0FfVU5TVUJTQ1JJQkVfREVQVEhfUVVPVEVT",
          "X1JFURDuEBIqCiVQUk9UT19PQV9VTlNVQlNDUklCRV9ERVBUSF9RVU9URVNf",
          "UkVTEO8QEiEKHFBST1RPX09BX1NZTUJPTF9DQVRFR09SWV9SRVEQ8BASIQoc",
          "UFJPVE9fT0FfU1lNQk9MX0NBVEVHT1JZX1JFUxDxEBIgChtQUk9UT19PQV9B",
          "Q0NPVU5UX0xPR09VVF9SRVEQ8hASIAobUFJPVE9fT0FfQUNDT1VOVF9MT0dP",
          "VVRfUkVTEPMQEiYKIVBST1RPX09BX0FDQ09VTlRfRElTQ09OTkVDVF9FVkVO",
          "VBD0EBIpCiRQUk9UT19PQV9TVUJTQ1JJQkVfTElWRV9UUkVOREJBUl9SRVMQ",
          "9RASKwomUFJPVE9fT0FfVU5TVUJTQ1JJQkVfTElWRV9UUkVOREJBUl9SRVMQ",
          "9hASIgodUFJPVE9fT0FfTUFSR0lOX0NBTExfTElTVF9SRVEQ9xASIgodUFJP",
          "VE9fT0FfTUFSR0lOX0NBTExfTElTVF9SRVMQ+BASJAofUFJPVE9fT0FfTUFS",
          "R0lOX0NBTExfVVBEQVRFX1JFURD5EBIkCh9QUk9UT19PQV9NQVJHSU5fQ0FM",
          "TF9VUERBVEVfUkVTEPoQEiYKIVBST1RPX09BX01BUkdJTl9DQUxMX1VQREFU",
          "RV9FVkVOVBD7EBInCiJQUk9UT19PQV9NQVJHSU5fQ0FMTF9UUklHR0VSX0VW",
          "RU5UEPwQEh8KGlBST1RPX09BX1JFRlJFU0hfVE9LRU5fUkVREP0QEh8KGlBS",
          "T1RPX09BX1JFRlJFU0hfVE9LRU5fUkVTEP4QEhwKF1BST1RPX09BX09SREVS",
          "X0xJU1RfUkVREP8QEhwKF1BST1RPX09BX09SREVSX0xJU1RfUkVTEIARKngK",
          "EFByb3RvT0FEYXlPZldlZWsSCAoETk9ORRAAEgoKBk1PTkRBWRABEgsKB1RV",
          "RVNEQVkQAhINCglXRURORVNEQVkQAxIMCghUSFVSU0RBWRAEEgoKBkZSSURB",
          "WRAFEgwKCFNBVFVSREFZEAYSCgoGU1VOREFZEAcqcQoVUHJvdG9PQUNvbW1p",
          "c3Npb25UeXBlEhcKE1VTRF9QRVJfTUlMTElPTl9VU0QQARIPCgtVU0RfUEVS",
          "X0xPVBACEhcKE1BFUkNFTlRBR0VfT0ZfVkFMVUUQAxIVChFRVU9URV9DQ1lf",
          "UEVSX0xPVBAEKl0KGVByb3RvT0FTeW1ib2xEaXN0YW5jZVR5cGUSHQoZU1lN",
          "Qk9MX0RJU1RBTkNFX0lOX1BPSU5UUxABEiEKHVNZTUJPTF9ESVNUQU5DRV9J",
          "Tl9QRVJDRU5UQUdFEAIqPAoYUHJvdG9PQU1pbkNvbW1pc3Npb25UeXBlEgwK",
          "CENVUlJFTkNZEAESEgoOUVVPVEVfQ1VSUkVOQ1kQAiqFAQoSUHJvdG9PQVRy",
          "YWRpbmdNb2RlEgsKB0VOQUJMRUQQABInCiNESVNBQkxFRF9XSVRIT1VUX1BF",
          "TkRJTkdTX0VYRUNVVElPThABEiQKIERJU0FCTEVEX1dJVEhfUEVORElOR1Nf",
          "RVhFQ1VUSU9OEAISEwoPQ0xPU0VfT05MWV9NT0RFEAMqNgoaUHJvdG9PQVN3",
          "YXBDYWxjdWxhdGlvblR5cGUSCAoEUElQUxAAEg4KClBFUkNFTlRBR0UQASpU",
          "ChNQcm90b09BQWNjZXNzUmlnaHRzEg8KC0ZVTExfQUNDRVNTEAASDgoKQ0xP",
          "U0VfT05MWRABEg4KCk5PX1RSQURJTkcQAhIMCghOT19MT0dJThADKj4KIVBy",
          "b3RvT0FUb3RhbE1hcmdpbkNhbGN1bGF0aW9uVHlwZRIHCgNNQVgQABIHCgNT",
          "VU0QARIHCgNORVQQAipAChJQcm90b09BQWNjb3VudFR5cGUSCgoGSEVER0VE",
          "EAASCgoGTkVUVEVEEAESEgoOU1BSRUFEX0JFVFRJTkcQAiqFAQoVUHJvdG9P",
          "QVBvc2l0aW9uU3RhdHVzEhgKFFBPU0lUSU9OX1NUQVRVU19PUEVOEAESGgoW",
          "UE9TSVRJT05fU1RBVFVTX0NMT1NFRBACEhsKF1BPU0lUSU9OX1NUQVRVU19D",
          "UkVBVEVEEAMSGQoVUE9TSVRJT05fU1RBVFVTX0VSUk9SEAQqJQoQUHJvdG9P",
          "QVRyYWRlU2lkZRIHCgNCVVkQARIICgRTRUxMEAIqcAoQUHJvdG9PQU9yZGVy",
          "VHlwZRIKCgZNQVJLRVQQARIJCgVMSU1JVBACEggKBFNUT1AQAxIZChVTVE9Q",
          "X0xPU1NfVEFLRV9QUk9GSVQQBBIQCgxNQVJLRVRfUkFOR0UQBRIOCgpTVE9Q",
          "X0xJTUlUEAYqfQoSUHJvdG9PQVRpbWVJbkZvcmNlEhIKDkdPT0RfVElMTF9E",
          "QVRFEAESFAoQR09PRF9USUxMX0NBTkNFTBACEhcKE0lNTUVESUFURV9PUl9D",
          "QU5DRUwQAxIQCgxGSUxMX09SX0tJTEwQBBISCg5NQVJLRVRfT05fT1BFThAF",
          "KpkBChJQcm90b09BT3JkZXJTdGF0dXMSGQoVT1JERVJfU1RBVFVTX0FDQ0VQ",
          "VEVEEAESFwoTT1JERVJfU1RBVFVTX0ZJTExFRBACEhkKFU9SREVSX1NUQVRV",
          "U19SRUpFQ1RFRBADEhgKFE9SREVSX1NUQVRVU19FWFBJUkVEEAQSGgoWT1JE",
          "RVJfU1RBVFVTX0NBTkNFTExFRBAFKlsKGVByb3RvT0FPcmRlclRyaWdnZXJN",
          "ZXRob2QSCQoFVFJBREUQARIMCghPUFBPU0lURRACEhAKDERPVUJMRV9UUkFE",
          "RRADEhMKD0RPVUJMRV9PUFBPU0lURRAEKvsBChRQcm90b09BRXhlY3V0aW9u",
          "VHlwZRISCg5PUkRFUl9BQ0NFUFRFRBACEhAKDE9SREVSX0ZJTExFRBADEhIK",
          "Dk9SREVSX1JFUExBQ0VEEAQSEwoPT1JERVJfQ0FOQ0VMTEVEEAUSEQoNT1JE",
          "RVJfRVhQSVJFRBAGEhIKDk9SREVSX1JFSkVDVEVEEAcSGQoVT1JERVJfQ0FO",
          "Q0VMX1JFSkVDVEVEEAgSCAoEU1dBUBAJEhQKEERFUE9TSVRfV0lUSERSQVcQ",
          "ChIWChJPUkRFUl9QQVJUSUFMX0ZJTEwQCxIaChZCT05VU19ERVBPU0lUX1dJ",
          "VEhEUkFXEAwqPwoWUHJvdG9PQUNoYW5nZUJvbnVzVHlwZRIRCg1CT05VU19E",
          "RVBPU0lUEAASEgoOQk9OVVNfV0lUSERSQVcQASq4CgoYUHJvdG9PQUNoYW5n",
          "ZUJhbGFuY2VUeXBlEhMKD0JBTEFOQ0VfREVQT1NJVBAAEhQKEEJBTEFOQ0Vf",
          "V0lUSERSQVcQARItCilCQUxBTkNFX0RFUE9TSVRfU1RSQVRFR1lfQ09NTUlT",
          "U0lPTl9JTk5FUhADEi4KKkJBTEFOQ0VfV0lUSERSQVdfU1RSQVRFR1lfQ09N",
          "TUlTU0lPTl9JTk5FUhAEEiIKHkJBTEFOQ0VfREVQT1NJVF9JQl9DT01NSVNT",
          "SU9OUxAFEikKJUJBTEFOQ0VfV0lUSERSQVdfSUJfU0hBUkVEX1BFUkNFTlRB",
          "R0UQBhI0CjBCQUxBTkNFX0RFUE9TSVRfSUJfU0hBUkVEX1BFUkNFTlRBR0Vf",
          "RlJPTV9TVUJfSUIQBxI0CjBCQUxBTkNFX0RFUE9TSVRfSUJfU0hBUkVEX1BF",
          "UkNFTlRBR0VfRlJPTV9CUk9LRVIQCBIaChZCQUxBTkNFX0RFUE9TSVRfUkVC",
          "QVRFEAkSGwoXQkFMQU5DRV9XSVRIRFJBV19SRUJBVEUQChItCilCQUxBTkNF",
          "X0RFUE9TSVRfU1RSQVRFR1lfQ09NTUlTU0lPTl9PVVRFUhALEi4KKkJBTEFO",
          "Q0VfV0lUSERSQVdfU1RSQVRFR1lfQ09NTUlTU0lPTl9PVVRFUhAMEicKI0JB",
          "TEFOQ0VfV0lUSERSQVdfQk9OVVNfQ09NUEVOU0FUSU9OEA0SMwovQkFMQU5D",
          "RV9XSVRIRFJBV19JQl9TSEFSRURfUEVSQ0VOVEFHRV9UT19CUk9LRVIQDhId",
          "ChlCQUxBTkNFX0RFUE9TSVRfRElWSURFTkRTEA8SHgoaQkFMQU5DRV9XSVRI",
          "RFJBV19ESVZJREVORFMQEBIfChtCQUxBTkNFX1dJVEhEUkFXX0dTTF9DSEFS",
          "R0UQERIdChlCQUxBTkNFX1dJVEhEUkFXX1JPTExPVkVSEBISKQolQkFMQU5D",
          "RV9ERVBPU0lUX05PTldJVEhEUkFXQUJMRV9CT05VUxATEioKJkJBTEFOQ0Vf",
          "V0lUSERSQVdfTk9OV0lUSERSQVdBQkxFX0JPTlVTEBQSGAoUQkFMQU5DRV9E",
          "RVBPU0lUX1NXQVAQFRIZChVCQUxBTkNFX1dJVEhEUkFXX1NXQVAQFhIiCh5C",
          "QUxBTkNFX0RFUE9TSVRfTUFOQUdFTUVOVF9GRUUQGxIjCh9CQUxBTkNFX1dJ",
          "VEhEUkFXX01BTkFHRU1FTlRfRkVFEBwSIwofQkFMQU5DRV9ERVBPU0lUX1BF",
          "UkZPUk1BTkNFX0ZFRRAdEiMKH0JBTEFOQ0VfV0lUSERSQVdfRk9SX1NVQkFD",
          "Q09VTlQQHhIhCh1CQUxBTkNFX0RFUE9TSVRfVE9fU1VCQUNDT1VOVBAfEiQK",
          "IEJBTEFOQ0VfV0lUSERSQVdfRlJPTV9TVUJBQ0NPVU5UECASIwofQkFMQU5D",
          "RV9ERVBPU0lUX0ZST01fU1VCQUNDT1VOVBAhEh0KGUJBTEFOQ0VfV0lUSERS",
          "QVdfQ09QWV9GRUUQIhIjCh9CQUxBTkNFX1dJVEhEUkFXX0lOQUNUSVZJVFlf",
          "RkVFECMSHAoYQkFMQU5DRV9ERVBPU0lUX1RSQU5TRkVSECQSHQoZQkFMQU5D",
          "RV9XSVRIRFJBV19UUkFOU0ZFUhAlEiMKH0JBTEFOQ0VfREVQT1NJVF9DT05W",
          "RVJURURfQk9OVVMQJhIvCitCQUxBTkNFX0RFUE9TSVRfTkVHQVRJVkVfQkFM",
          "QU5DRV9QUk9URUNUSU9OECcqcwoRUHJvdG9PQURlYWxTdGF0dXMSCgoGRklM",
          "TEVEEAISFAoQUEFSVElBTExZX0ZJTExFRBADEgwKCFJFSkVDVEVEEAQSFwoT",
          "SU5URVJOQUxMWV9SRUpFQ1RFRBAFEgkKBUVSUk9SEAYSCgoGTUlTU0VEEAcq",
          "jAEKFVByb3RvT0FUcmVuZGJhclBlcmlvZBIGCgJNMRABEgYKAk0yEAISBgoC",
          "TTMQAxIGCgJNNBAEEgYKAk01EAUSBwoDTTEwEAYSBwoDTTE1EAcSBwoDTTMw",
          "EAgSBgoCSDEQCRIGCgJINBAKEgcKA0gxMhALEgYKAkQxEAwSBgoCVzEQDRIH",
          "CgNNTjEQDiokChBQcm90b09BUXVvdGVUeXBlEgcKA0JJRBABEgcKA0FTSxAC",
          "Kj8KHFByb3RvT0FDbGllbnRQZXJtaXNzaW9uU2NvcGUSDgoKU0NPUEVfVklF",
          "VxAAEg8KC1NDT1BFX1RSQURFEAEqcwoXUHJvdG9PQU5vdGlmaWNhdGlvblR5",
          "cGUSHAoYTUFSR0lOX0xFVkVMX1RIUkVTSE9MRF8xED0SHAoYTUFSR0lOX0xF",
          "VkVMX1RIUkVTSE9MRF8yED4SHAoYTUFSR0lOX0xFVkVMX1RIUkVTSE9MRF8z",
          "ED8q3ggKEFByb3RvT0FFcnJvckNvZGUSGQoVT0FfQVVUSF9UT0tFTl9FWFBJ",
          "UkVEEAESGgoWQUNDT1VOVF9OT1RfQVVUSE9SSVpFRBACEhUKEUFMUkVBRFlf",
          "TE9HR0VEX0lOEA4SGgoWQ0hfQ0xJRU5UX0FVVEhfRkFJTFVSRRBlEh8KG0NI",
          "X0NMSUVOVF9OT1RfQVVUSEVOVElDQVRFRBBmEiMKH0NIX0NMSUVOVF9BTFJF",
          "QURZX0FVVEhFTlRJQ0FURUQQZxIbChdDSF9BQ0NFU1NfVE9LRU5fSU5WQUxJ",
          "RBBoEhsKF0NIX1NFUlZFUl9OT1RfUkVBQ0hBQkxFEGkSJAogQ0hfQ1RJRF9U",
          "UkFERVJfQUNDT1VOVF9OT1RfRk9VTkQQahIaChZDSF9PQV9DTElFTlRfTk9U",
          "X0ZPVU5EEGsSHgoaUkVRVUVTVF9GUkVRVUVOQ1lfRVhDRUVERUQQbBIfChtT",
          "RVJWRVJfSVNfVU5ERVJfTUFJTlRFTkFOQ0UQbRIWChJDSEFOTkVMX0lTX0JM",
          "T0NLRUQQbhIeChpDT05ORUNUSU9OU19MSU1JVF9FWENFRURFRBBDEhkKFVdP",
          "UlNFX0dTTF9OT1RfQUxMT1dFRBBEEhYKElNZTUJPTF9IQVNfSE9MSURBWRBF",
          "EhsKF05PVF9TVUJTQ1JJQkVEX1RPX1NQT1RTEHASFgoSQUxSRUFEWV9TVUJT",
          "Q1JJQkVEEHESFAoQU1lNQk9MX05PVF9GT1VORBByEhIKDlVOS05PV05fU1lN",
          "Qk9MEHMSGAoUSU5DT1JSRUNUX0JPVU5EQVJJRVMQIxINCglOT19RVU9URVMQ",
          "dRIUChBOT1RfRU5PVUdIX01PTkVZEHYSGAoUTUFYX0VYUE9TVVJFX1JFQUNI",
          "RUQQdxIWChJQT1NJVElPTl9OT1RfRk9VTkQQeBITCg9PUkRFUl9OT1RfRk9V",
          "TkQQeRIVChFQT1NJVElPTl9OT1RfT1BFThB6EhMKD1BPU0lUSU9OX0xPQ0tF",
          "RBB7EhYKElRPT19NQU5ZX1BPU0lUSU9OUxB8EhYKElRSQURJTkdfQkFEX1ZP",
          "TFVNRRB9EhUKEVRSQURJTkdfQkFEX1NUT1BTEH4SFgoSVFJBRElOR19CQURf",
          "UFJJQ0VTEH8SFgoRVFJBRElOR19CQURfU1RBS0UQgAESJgohUFJPVEVDVElP",
          "Tl9JU19UT09fQ0xPU0VfVE9fTUFSS0VUEIEBEiAKG1RSQURJTkdfQkFEX0VY",
          "UElSQVRJT05fREFURRCCARIWChFQRU5ESU5HX0VYRUNVVElPThCDARIVChBU",
          "UkFESU5HX0RJU0FCTEVEEIQBEhgKE1RSQURJTkdfTk9UX0FMTE9XRUQQhQES",
          "GwoWVU5BQkxFX1RPX0NBTkNFTF9PUkRFUhCGARIaChVVTkFCTEVfVE9fQU1F",
          "TkRfT1JERVIQhwESHgoZU0hPUlRfU0VMTElOR19OT1RfQUxMT1dFRBCIASqB",
          "AQorUHJvdG9PQUxpbWl0ZWRSaXNrTWFyZ2luQ2FsY3VsYXRpb25TdHJhdGVn",
          "eRIZChVBQ0NPUkRJTkdfVE9fTEVWRVJBR0UQABIUChBBQ0NPUkRJTkdfVE9f",
          "R1NMEAESIQodQUNDT1JESU5HX1RPX0dTTF9BTkRfTEVWRVJBR0UQAkJNCiVj",
          "b20ueHRyYWRlci5wcm90b2NvbC5vcGVuYXBpLnYyLm1vZGVsQh9Db250YWlu",
          "ZXJPcGVuQXBpVjJNb2RlbE1lc3NhZ2VzUAGgAQE="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ProtoOAPayloadType), typeof(global::ProtoOADayOfWeek), typeof(global::ProtoOACommissionType), typeof(global::ProtoOASymbolDistanceType), typeof(global::ProtoOAMinCommissionType), typeof(global::ProtoOATradingMode), typeof(global::ProtoOASwapCalculationType), typeof(global::ProtoOAAccessRights), typeof(global::ProtoOATotalMarginCalculationType), typeof(global::ProtoOAAccountType), typeof(global::ProtoOAPositionStatus), typeof(global::ProtoOATradeSide), typeof(global::ProtoOAOrderType), typeof(global::ProtoOATimeInForce), typeof(global::ProtoOAOrderStatus), typeof(global::ProtoOAOrderTriggerMethod), typeof(global::ProtoOAExecutionType), typeof(global::ProtoOAChangeBonusType), typeof(global::ProtoOAChangeBalanceType), typeof(global::ProtoOADealStatus), typeof(global::ProtoOATrendbarPeriod), typeof(global::ProtoOAQuoteType), typeof(global::ProtoOAClientPermissionScope), typeof(global::ProtoOANotificationType), typeof(global::ProtoOAErrorCode), typeof(global::ProtoOALimitedRiskMarginCalculationStrategy), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAsset), global::ProtoOAAsset.Parser, new[]{ "AssetId", "Name", "DisplayName", "Digits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbol), global::ProtoOASymbol.Parser, new[]{ "SymbolId", "Digits", "PipPosition", "EnableShortSelling", "GuaranteedStopLoss", "SwapRollover3Days", "SwapLong", "SwapShort", "MaxVolume", "MinVolume", "StepVolume", "MaxExposure", "Schedule", "Commission", "CommissionType", "SlDistance", "TpDistance", "GslDistance", "GslCharge", "DistanceSetIn", "MinCommission", "MinCommissionType", "MinCommissionAsset", "RolloverCommission", "SkipRolloverDays", "ScheduleTimeZone", "TradingMode", "RolloverCommission3Days", "SwapCalculationType", "LotSize", "PreciseTradingCommissionRate", "PreciseMinCommission", "Holiday", "PnlConversionFeeRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOALightSymbol), global::ProtoOALightSymbol.Parser, new[]{ "SymbolId", "SymbolName", "Enabled", "BaseAssetId", "QuoteAssetId", "SymbolCategoryId", "Description" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAArchivedSymbol), global::ProtoOAArchivedSymbol.Parser, new[]{ "SymbolId", "Name", "UtcLastUpdateTimestamp", "Description" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOASymbolCategory), global::ProtoOASymbolCategory.Parser, new[]{ "Id", "AssetClassId", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAInterval), global::ProtoOAInterval.Parser, new[]{ "StartSecond", "EndSecond" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATrader), global::ProtoOATrader.Parser, new[]{ "CtidTraderAccountId", "Balance", "BalanceVersion", "ManagerBonus", "IbBonus", "NonWithdrawableBonus", "AccessRights", "DepositAssetId", "SwapFree", "LeverageInCents", "TotalMarginCalculationType", "MaxLeverage", "FrenchRisk", "TraderLogin", "AccountType", "BrokerName", "RegistrationTimestamp", "IsLimitedRisk", "LimitedRiskMarginCalculationStrategy", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAPosition), global::ProtoOAPosition.Parser, new[]{ "PositionId", "TradeData", "PositionStatus", "Swap", "Price", "StopLoss", "TakeProfit", "UtcLastUpdateTimestamp", "Commission", "MarginRate", "MirroringCommission", "GuaranteedStopLoss", "UsedMargin", "StopLossTriggerMethod", "MoneyDigits", "TrailingStopLoss" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATradeData), global::ProtoOATradeData.Parser, new[]{ "SymbolId", "Volume", "TradeSide", "OpenTimestamp", "Label", "GuaranteedStopLoss", "Comment" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAOrder), global::ProtoOAOrder.Parser, new[]{ "OrderId", "TradeData", "OrderType", "OrderStatus", "ExpirationTimestamp", "ExecutionPrice", "ExecutedVolume", "UtcLastUpdateTimestamp", "BaseSlippagePrice", "SlippageInPoints", "ClosingOrder", "LimitPrice", "StopPrice", "StopLoss", "TakeProfit", "ClientOrderId", "TimeInForce", "PositionId", "RelativeStopLoss", "RelativeTakeProfit", "IsStopOut", "TrailingStopLoss", "StopTriggerMethod" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOABonusDepositWithdraw), global::ProtoOABonusDepositWithdraw.Parser, new[]{ "OperationType", "BonusHistoryId", "ManagerBonus", "ManagerDelta", "IbBonus", "IbDelta", "ChangeBonusTimestamp", "ExternalNote", "IntroducingBrokerId", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADepositWithdraw), global::ProtoOADepositWithdraw.Parser, new[]{ "OperationType", "BalanceHistoryId", "Balance", "Delta", "ChangeBalanceTimestamp", "ExternalNote", "BalanceVersion", "Equity", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADeal), global::ProtoOADeal.Parser, new[]{ "DealId", "OrderId", "PositionId", "Volume", "FilledVolume", "SymbolId", "CreateTimestamp", "ExecutionTimestamp", "UtcLastUpdateTimestamp", "ExecutionPrice", "TradeSide", "DealStatus", "MarginRate", "Commission", "BaseToUsdConversionRate", "ClosePositionDetail", "MoneyDigits" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAClosePositionDetail), global::ProtoOAClosePositionDetail.Parser, new[]{ "EntryPrice", "GrossProfit", "Swap", "Commission", "Balance", "QuoteToDepositConversionRate", "ClosedVolume", "BalanceVersion", "MoneyDigits", "PnlConversionFee" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATrendbar), global::ProtoOATrendbar.Parser, new[]{ "Volume", "Period", "Low", "DeltaOpen", "DeltaClose", "DeltaHigh", "UtcTimestampInMinutes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAExpectedMargin), global::ProtoOAExpectedMargin.Parser, new[]{ "Volume", "BuyMargin", "SellMargin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOATickData), global::ProtoOATickData.Parser, new[]{ "Timestamp", "Tick" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOACtidProfile), global::ProtoOACtidProfile.Parser, new[]{ "UserId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOACtidTraderAccount), global::ProtoOACtidTraderAccount.Parser, new[]{ "CtidTraderAccountId", "IsLive", "TraderLogin", "LastClosingDealTimestamp", "LastBalanceUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAAssetClass), global::ProtoOAAssetClass.Parser, new[]{ "Id", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOADepthQuote), global::ProtoOADepthQuote.Parser, new[]{ "Id", "Size", "Bid", "Ask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAMarginCall), global::ProtoOAMarginCall.Parser, new[]{ "MarginCallType", "MarginLevelThreshold", "UtcLastUpdateTimestamp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProtoOAHoliday), global::ProtoOAHoliday.Parser, new[]{ "HolidayId", "Name", "Description", "ScheduleTimeZone", "HolidayDate", "IsRecurring", "StartSecond", "EndSecond" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ProtoOAPayloadType {
  [pbr::OriginalName("PROTO_OA_APPLICATION_AUTH_REQ")] ProtoOaApplicationAuthReq = 2100,
  [pbr::OriginalName("PROTO_OA_APPLICATION_AUTH_RES")] ProtoOaApplicationAuthRes = 2101,
  [pbr::OriginalName("PROTO_OA_ACCOUNT_AUTH_REQ")] ProtoOaAccountAuthReq = 2102,
  [pbr::OriginalName("PROTO_OA_ACCOUNT_AUTH_RES")] ProtoOaAccountAuthRes = 2103,
  [pbr::OriginalName("PROTO_OA_VERSION_REQ")] ProtoOaVersionReq = 2104,
  [pbr::OriginalName("PROTO_OA_VERSION_RES")] ProtoOaVersionRes = 2105,
  [pbr::OriginalName("PROTO_OA_NEW_ORDER_REQ")] ProtoOaNewOrderReq = 2106,
  [pbr::OriginalName("PROTO_OA_TRAILING_SL_CHANGED_EVENT")] ProtoOaTrailingSlChangedEvent = 2107,
  [pbr::OriginalName("PROTO_OA_CANCEL_ORDER_REQ")] ProtoOaCancelOrderReq = 2108,
  [pbr::OriginalName("PROTO_OA_AMEND_ORDER_REQ")] ProtoOaAmendOrderReq = 2109,
  [pbr::OriginalName("PROTO_OA_AMEND_POSITION_SLTP_REQ")] ProtoOaAmendPositionSltpReq = 2110,
  [pbr::OriginalName("PROTO_OA_CLOSE_POSITION_REQ")] ProtoOaClosePositionReq = 2111,
  [pbr::OriginalName("PROTO_OA_ASSET_LIST_REQ")] ProtoOaAssetListReq = 2112,
  [pbr::OriginalName("PROTO_OA_ASSET_LIST_RES")] ProtoOaAssetListRes = 2113,
  [pbr::OriginalName("PROTO_OA_SYMBOLS_LIST_REQ")] ProtoOaSymbolsListReq = 2114,
  [pbr::OriginalName("PROTO_OA_SYMBOLS_LIST_RES")] ProtoOaSymbolsListRes = 2115,
  [pbr::OriginalName("PROTO_OA_SYMBOL_BY_ID_REQ")] ProtoOaSymbolByIdReq = 2116,
  [pbr::OriginalName("PROTO_OA_SYMBOL_BY_ID_RES")] ProtoOaSymbolByIdRes = 2117,
  [pbr::OriginalName("PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ")] ProtoOaSymbolsForConversionReq = 2118,
  [pbr::OriginalName("PROTO_OA_SYMBOLS_FOR_CONVERSION_RES")] ProtoOaSymbolsForConversionRes = 2119,
  [pbr::OriginalName("PROTO_OA_SYMBOL_CHANGED_EVENT")] ProtoOaSymbolChangedEvent = 2120,
  [pbr::OriginalName("PROTO_OA_TRADER_REQ")] ProtoOaTraderReq = 2121,
  [pbr::OriginalName("PROTO_OA_TRADER_RES")] ProtoOaTraderRes = 2122,
  [pbr::OriginalName("PROTO_OA_TRADER_UPDATE_EVENT")] ProtoOaTraderUpdateEvent = 2123,
  [pbr::OriginalName("PROTO_OA_RECONCILE_REQ")] ProtoOaReconcileReq = 2124,
  [pbr::OriginalName("PROTO_OA_RECONCILE_RES")] ProtoOaReconcileRes = 2125,
  [pbr::OriginalName("PROTO_OA_EXECUTION_EVENT")] ProtoOaExecutionEvent = 2126,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_SPOTS_REQ")] ProtoOaSubscribeSpotsReq = 2127,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_SPOTS_RES")] ProtoOaSubscribeSpotsRes = 2128,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_SPOTS_REQ")] ProtoOaUnsubscribeSpotsReq = 2129,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_SPOTS_RES")] ProtoOaUnsubscribeSpotsRes = 2130,
  [pbr::OriginalName("PROTO_OA_SPOT_EVENT")] ProtoOaSpotEvent = 2131,
  [pbr::OriginalName("PROTO_OA_ORDER_ERROR_EVENT")] ProtoOaOrderErrorEvent = 2132,
  [pbr::OriginalName("PROTO_OA_DEAL_LIST_REQ")] ProtoOaDealListReq = 2133,
  [pbr::OriginalName("PROTO_OA_DEAL_LIST_RES")] ProtoOaDealListRes = 2134,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ")] ProtoOaSubscribeLiveTrendbarReq = 2135,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ")] ProtoOaUnsubscribeLiveTrendbarReq = 2136,
  [pbr::OriginalName("PROTO_OA_GET_TRENDBARS_REQ")] ProtoOaGetTrendbarsReq = 2137,
  [pbr::OriginalName("PROTO_OA_GET_TRENDBARS_RES")] ProtoOaGetTrendbarsRes = 2138,
  [pbr::OriginalName("PROTO_OA_EXPECTED_MARGIN_REQ")] ProtoOaExpectedMarginReq = 2139,
  [pbr::OriginalName("PROTO_OA_EXPECTED_MARGIN_RES")] ProtoOaExpectedMarginRes = 2140,
  [pbr::OriginalName("PROTO_OA_MARGIN_CHANGED_EVENT")] ProtoOaMarginChangedEvent = 2141,
  [pbr::OriginalName("PROTO_OA_ERROR_RES")] ProtoOaErrorRes = 2142,
  [pbr::OriginalName("PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ")] ProtoOaCashFlowHistoryListReq = 2143,
  [pbr::OriginalName("PROTO_OA_CASH_FLOW_HISTORY_LIST_RES")] ProtoOaCashFlowHistoryListRes = 2144,
  [pbr::OriginalName("PROTO_OA_GET_TICKDATA_REQ")] ProtoOaGetTickdataReq = 2145,
  [pbr::OriginalName("PROTO_OA_GET_TICKDATA_RES")] ProtoOaGetTickdataRes = 2146,
  [pbr::OriginalName("PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT")] ProtoOaAccountsTokenInvalidatedEvent = 2147,
  [pbr::OriginalName("PROTO_OA_CLIENT_DISCONNECT_EVENT")] ProtoOaClientDisconnectEvent = 2148,
  [pbr::OriginalName("PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ")] ProtoOaGetAccountsByAccessTokenReq = 2149,
  [pbr::OriginalName("PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES")] ProtoOaGetAccountsByAccessTokenRes = 2150,
  [pbr::OriginalName("PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ")] ProtoOaGetCtidProfileByTokenReq = 2151,
  [pbr::OriginalName("PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES")] ProtoOaGetCtidProfileByTokenRes = 2152,
  [pbr::OriginalName("PROTO_OA_ASSET_CLASS_LIST_REQ")] ProtoOaAssetClassListReq = 2153,
  [pbr::OriginalName("PROTO_OA_ASSET_CLASS_LIST_RES")] ProtoOaAssetClassListRes = 2154,
  [pbr::OriginalName("PROTO_OA_DEPTH_EVENT")] ProtoOaDepthEvent = 2155,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ")] ProtoOaSubscribeDepthQuotesReq = 2156,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES")] ProtoOaSubscribeDepthQuotesRes = 2157,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ")] ProtoOaUnsubscribeDepthQuotesReq = 2158,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES")] ProtoOaUnsubscribeDepthQuotesRes = 2159,
  [pbr::OriginalName("PROTO_OA_SYMBOL_CATEGORY_REQ")] ProtoOaSymbolCategoryReq = 2160,
  [pbr::OriginalName("PROTO_OA_SYMBOL_CATEGORY_RES")] ProtoOaSymbolCategoryRes = 2161,
  [pbr::OriginalName("PROTO_OA_ACCOUNT_LOGOUT_REQ")] ProtoOaAccountLogoutReq = 2162,
  [pbr::OriginalName("PROTO_OA_ACCOUNT_LOGOUT_RES")] ProtoOaAccountLogoutRes = 2163,
  [pbr::OriginalName("PROTO_OA_ACCOUNT_DISCONNECT_EVENT")] ProtoOaAccountDisconnectEvent = 2164,
  [pbr::OriginalName("PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES")] ProtoOaSubscribeLiveTrendbarRes = 2165,
  [pbr::OriginalName("PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES")] ProtoOaUnsubscribeLiveTrendbarRes = 2166,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_LIST_REQ")] ProtoOaMarginCallListReq = 2167,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_LIST_RES")] ProtoOaMarginCallListRes = 2168,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_UPDATE_REQ")] ProtoOaMarginCallUpdateReq = 2169,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_UPDATE_RES")] ProtoOaMarginCallUpdateRes = 2170,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_UPDATE_EVENT")] ProtoOaMarginCallUpdateEvent = 2171,
  [pbr::OriginalName("PROTO_OA_MARGIN_CALL_TRIGGER_EVENT")] ProtoOaMarginCallTriggerEvent = 2172,
  [pbr::OriginalName("PROTO_OA_REFRESH_TOKEN_REQ")] ProtoOaRefreshTokenReq = 2173,
  [pbr::OriginalName("PROTO_OA_REFRESH_TOKEN_RES")] ProtoOaRefreshTokenRes = 2174,
  [pbr::OriginalName("PROTO_OA_ORDER_LIST_REQ")] ProtoOaOrderListReq = 2175,
  [pbr::OriginalName("PROTO_OA_ORDER_LIST_RES")] ProtoOaOrderListRes = 2176,
}

public enum ProtoOADayOfWeek {
  [pbr::OriginalName("NONE")] None = 0,
  [pbr::OriginalName("MONDAY")] Monday = 1,
  [pbr::OriginalName("TUESDAY")] Tuesday = 2,
  [pbr::OriginalName("WEDNESDAY")] Wednesday = 3,
  [pbr::OriginalName("THURSDAY")] Thursday = 4,
  [pbr::OriginalName("FRIDAY")] Friday = 5,
  [pbr::OriginalName("SATURDAY")] Saturday = 6,
  [pbr::OriginalName("SUNDAY")] Sunday = 7,
}

/// <summary>
///* Enum for specifying type of trading commission. 
/// </summary>
public enum ProtoOACommissionType {
  /// <summary>
  /// USD per million USD volume - usually used for FX. Example: 50 USD for 1 mil USD of trading volume.
  /// </summary>
  [pbr::OriginalName("USD_PER_MILLION_USD")] UsdPerMillionUsd = 1,
  /// <summary>
  /// USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract.
  /// </summary>
  [pbr::OriginalName("USD_PER_LOT")] UsdPerLot = 2,
  /// <summary>
  /// Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 100,00.
  /// </summary>
  [pbr::OriginalName("PERCENTAGE_OF_VALUE")] PercentageOfValue = 3,
  /// <summary>
  /// Quote ccy of Symbol per 1 lot - will be used for CFDs and futures for commodities, and indices. Example: 15 EUR for 1 contract of DAX.
  /// </summary>
  [pbr::OriginalName("QUOTE_CCY_PER_LOT")] QuoteCcyPerLot = 4,
}

/// <summary>
///* Enum for specifying stop loss and take profit distances. 
/// </summary>
public enum ProtoOASymbolDistanceType {
  [pbr::OriginalName("SYMBOL_DISTANCE_IN_POINTS")] SymbolDistanceInPoints = 1,
  [pbr::OriginalName("SYMBOL_DISTANCE_IN_PERCENTAGE")] SymbolDistanceInPercentage = 2,
}

/// <summary>
///* Enum for specifying type of minimum trading commission. 
/// </summary>
public enum ProtoOAMinCommissionType {
  [pbr::OriginalName("CURRENCY")] Currency = 1,
  [pbr::OriginalName("QUOTE_CURRENCY")] QuoteCurrency = 2,
}

/// <summary>
///* Enum for specifying symbol trading mode. 
/// </summary>
public enum ProtoOATradingMode {
  [pbr::OriginalName("ENABLED")] Enabled = 0,
  [pbr::OriginalName("DISABLED_WITHOUT_PENDINGS_EXECUTION")] DisabledWithoutPendingsExecution = 1,
  [pbr::OriginalName("DISABLED_WITH_PENDINGS_EXECUTION")] DisabledWithPendingsExecution = 2,
  [pbr::OriginalName("CLOSE_ONLY_MODE")] CloseOnlyMode = 3,
}

/// <summary>
///* Enum for specifying SWAP calculation type for symbol. 
/// </summary>
public enum ProtoOASwapCalculationType {
  /// <summary>
  ///Specifies type of SWAP computation as PIPS (0)
  /// </summary>
  [pbr::OriginalName("PIPS")] Pips = 0,
  /// <summary>
  ///Specifies type of SWAP computation as PERCENTAGE (1, annual, in percent)
  /// </summary>
  [pbr::OriginalName("PERCENTAGE")] Percentage = 1,
}

/// <summary>
///* Enum for specifying access right for a trader. 
/// </summary>
public enum ProtoOAAccessRights {
  /// <summary>
  /// Enable all trading.
  /// </summary>
  [pbr::OriginalName("FULL_ACCESS")] FullAccess = 0,
  /// <summary>
  /// Only closing trading request are enabled.
  /// </summary>
  [pbr::OriginalName("CLOSE_ONLY")] CloseOnly = 1,
  /// <summary>
  /// View only access.
  /// </summary>
  [pbr::OriginalName("NO_TRADING")] NoTrading = 2,
  /// <summary>
  /// No access.
  /// </summary>
  [pbr::OriginalName("NO_LOGIN")] NoLogin = 3,
}

/// <summary>
///* Enum for specifying margin calculation type for an account. 
/// </summary>
public enum ProtoOATotalMarginCalculationType {
  [pbr::OriginalName("MAX")] Max = 0,
  [pbr::OriginalName("SUM")] Sum = 1,
  [pbr::OriginalName("NET")] Net = 2,
}

/// <summary>
///* Enum for specifying type of an account. 
/// </summary>
public enum ProtoOAAccountType {
  /// <summary>
  /// Allows multiple positions on a trading account for a symbol.
  /// </summary>
  [pbr::OriginalName("HEDGED")] Hedged = 0,
  /// <summary>
  /// Only one position per symbol is allowed on a trading account.
  /// </summary>
  [pbr::OriginalName("NETTED")] Netted = 1,
  /// <summary>
  /// Spread betting type account.
  /// </summary>
  [pbr::OriginalName("SPREAD_BETTING")] SpreadBetting = 2,
}

/// <summary>
///* Position status ENUM. 
/// </summary>
public enum ProtoOAPositionStatus {
  [pbr::OriginalName("POSITION_STATUS_OPEN")] PositionStatusOpen = 1,
  [pbr::OriginalName("POSITION_STATUS_CLOSED")] PositionStatusClosed = 2,
  /// <summary>
  /// Empty position is created for pending order.
  /// </summary>
  [pbr::OriginalName("POSITION_STATUS_CREATED")] PositionStatusCreated = 3,
  [pbr::OriginalName("POSITION_STATUS_ERROR")] PositionStatusError = 4,
}

/// <summary>
///* Trader side ENUM. Used for order, position, deal. 
/// </summary>
public enum ProtoOATradeSide {
  [pbr::OriginalName("BUY")] Buy = 1,
  [pbr::OriginalName("SELL")] Sell = 2,
}

/// <summary>
///* Order type ENUM. 
/// </summary>
public enum ProtoOAOrderType {
  [pbr::OriginalName("MARKET")] Market = 1,
  [pbr::OriginalName("LIMIT")] Limit = 2,
  [pbr::OriginalName("STOP")] Stop = 3,
  [pbr::OriginalName("STOP_LOSS_TAKE_PROFIT")] StopLossTakeProfit = 4,
  [pbr::OriginalName("MARKET_RANGE")] MarketRange = 5,
  [pbr::OriginalName("STOP_LIMIT")] StopLimit = 6,
}

/// <summary>
///* Order's time in force ENUM. 
/// </summary>
public enum ProtoOATimeInForce {
  [pbr::OriginalName("GOOD_TILL_DATE")] GoodTillDate = 1,
  [pbr::OriginalName("GOOD_TILL_CANCEL")] GoodTillCancel = 2,
  [pbr::OriginalName("IMMEDIATE_OR_CANCEL")] ImmediateOrCancel = 3,
  [pbr::OriginalName("FILL_OR_KILL")] FillOrKill = 4,
  [pbr::OriginalName("MARKET_ON_OPEN")] MarketOnOpen = 5,
}

/// <summary>
///* Order status ENUM. 
/// </summary>
public enum ProtoOAOrderStatus {
  /// <summary>
  /// Order request validated and accepted for execution.
  /// </summary>
  [pbr::OriginalName("ORDER_STATUS_ACCEPTED")] OrderStatusAccepted = 1,
  /// <summary>
  /// Order is fully filled.
  /// </summary>
  [pbr::OriginalName("ORDER_STATUS_FILLED")] OrderStatusFilled = 2,
  /// <summary>
  /// Order is rejected due to validation.
  /// </summary>
  [pbr::OriginalName("ORDER_STATUS_REJECTED")] OrderStatusRejected = 3,
  /// <summary>
  /// Order expired. Might be valid for orders with partially filled volume that were expired on LP.
  /// </summary>
  [pbr::OriginalName("ORDER_STATUS_EXPIRED")] OrderStatusExpired = 4,
  /// <summary>
  /// Order is cancelled. Might be valid for orders with partially filled volume that were cancelled by LP.
  /// </summary>
  [pbr::OriginalName("ORDER_STATUS_CANCELLED")] OrderStatusCancelled = 5,
}

/// <summary>
///* Stop Order and Stop Lost triggering method ENUM. 
/// </summary>
public enum ProtoOAOrderTriggerMethod {
  /// <summary>
  /// Stop Order: buy is triggered by ask, sell by bid; Stop Loss Order: for buy position is triggered by bid and for sell position by ask.
  /// </summary>
  [pbr::OriginalName("TRADE")] Trade = 1,
  /// <summary>
  /// Stop Order: buy is triggered by bid, sell by ask; Stop Loss Order: for buy position is triggered by ask and for sell position by bid.
  /// </summary>
  [pbr::OriginalName("OPPOSITE")] Opposite = 2,
  /// <summary>
  /// The same as TRADE, but trigger is checked after the second consecutive tick.
  /// </summary>
  [pbr::OriginalName("DOUBLE_TRADE")] DoubleTrade = 3,
  /// <summary>
  /// The same as OPPOSITE, but trigger is checked after the second consecutive tick.
  /// </summary>
  [pbr::OriginalName("DOUBLE_OPPOSITE")] DoubleOpposite = 4,
}

/// <summary>
///* Execution event type ENUM. 
/// </summary>
public enum ProtoOAExecutionType {
  /// <summary>
  /// Order passed validation.
  /// </summary>
  [pbr::OriginalName("ORDER_ACCEPTED")] OrderAccepted = 2,
  /// <summary>
  /// Order filled.
  /// </summary>
  [pbr::OriginalName("ORDER_FILLED")] OrderFilled = 3,
  /// <summary>
  /// Pending order is changed with a new one.
  /// </summary>
  [pbr::OriginalName("ORDER_REPLACED")] OrderReplaced = 4,
  /// <summary>
  /// Order cancelled.
  /// </summary>
  [pbr::OriginalName("ORDER_CANCELLED")] OrderCancelled = 5,
  /// <summary>
  /// Order with GTD time in force is expired.
  /// </summary>
  [pbr::OriginalName("ORDER_EXPIRED")] OrderExpired = 6,
  /// <summary>
  /// Order is rejected due to validations.
  /// </summary>
  [pbr::OriginalName("ORDER_REJECTED")] OrderRejected = 7,
  /// <summary>
  /// Cancel order request is rejected.
  /// </summary>
  [pbr::OriginalName("ORDER_CANCEL_REJECTED")] OrderCancelRejected = 8,
  /// <summary>
  /// Type related to SWAP execution events.
  /// </summary>
  [pbr::OriginalName("SWAP")] Swap = 9,
  /// <summary>
  /// Type related to event of deposit or withdrawal cash flow operation.
  /// </summary>
  [pbr::OriginalName("DEPOSIT_WITHDRAW")] DepositWithdraw = 10,
  /// <summary>
  /// Order is partially filled.
  /// </summary>
  [pbr::OriginalName("ORDER_PARTIAL_FILL")] OrderPartialFill = 11,
  /// <summary>
  /// Type related to event of bonus deposit or bonus withdrawal.
  /// </summary>
  [pbr::OriginalName("BONUS_DEPOSIT_WITHDRAW")] BonusDepositWithdraw = 12,
}

/// <summary>
///* Bonus operation type ENUM. 
/// </summary>
public enum ProtoOAChangeBonusType {
  [pbr::OriginalName("BONUS_DEPOSIT")] BonusDeposit = 0,
  [pbr::OriginalName("BONUS_WITHDRAW")] BonusWithdraw = 1,
}

/// <summary>
///* Balance operation entity. Covers all cash movement operations related to account, trading, IB operations, mirroring, etc. 
/// </summary>
public enum ProtoOAChangeBalanceType {
  /// <summary>
  /// Cash deposit.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT")] BalanceDeposit = 0,
  /// <summary>
  /// Cash withdrawal.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW")] BalanceWithdraw = 1,
  /// <summary>
  /// Received mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER")] BalanceDepositStrategyCommissionInner = 3,
  /// <summary>
  /// Paid mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER")] BalanceWithdrawStrategyCommissionInner = 4,
  /// <summary>
  /// For IB account. Commissions paid by trader.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_COMMISSIONS")] BalanceDepositIbCommissions = 5,
  /// <summary>
  /// For IB account. Withdrawal of commissions shared with broker.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE")] BalanceWithdrawIbSharedPercentage = 6,
  /// <summary>
  /// For IB account. Commissions paid by sub-ibs.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB")] BalanceDepositIbSharedPercentageFromSubIb = 7,
  /// <summary>
  /// For IB account. Commissions paid by broker.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER")] BalanceDepositIbSharedPercentageFromBroker = 8,
  /// <summary>
  /// Deposit rebate for trading volume for period.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_REBATE")] BalanceDepositRebate = 9,
  /// <summary>
  /// Withdrawal of rebate.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_REBATE")] BalanceWithdrawRebate = 10,
  /// <summary>
  /// Mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER")] BalanceDepositStrategyCommissionOuter = 11,
  /// <summary>
  /// Mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER")] BalanceWithdrawStrategyCommissionOuter = 12,
  /// <summary>
  /// For IB account. Share commission with the Broker.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_BONUS_COMPENSATION")] BalanceWithdrawBonusCompensation = 13,
  /// <summary>
  /// IB commissions.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER")] BalanceWithdrawIbSharedPercentageToBroker = 14,
  /// <summary>
  /// Deposit dividends payments.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_DIVIDENDS")] BalanceDepositDividends = 15,
  /// <summary>
  /// Negative dividend charge for short position.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_DIVIDENDS")] BalanceWithdrawDividends = 16,
  /// <summary>
  /// Charge for guaranteedStopLoss.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_GSL_CHARGE")] BalanceWithdrawGslCharge = 17,
  /// <summary>
  /// Charge of rollover fee for Shariah compliant accounts.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_ROLLOVER")] BalanceWithdrawRollover = 18,
  /// <summary>
  /// Broker's operation to deposit bonus.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS")] BalanceDepositNonwithdrawableBonus = 19,
  /// <summary>
  /// Broker's operation to withdrawal bonus.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS")] BalanceWithdrawNonwithdrawableBonus = 20,
  /// <summary>
  /// Deposits of negative SWAP.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_SWAP")] BalanceDepositSwap = 21,
  /// <summary>
  /// SWAP charges.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_SWAP")] BalanceWithdrawSwap = 22,
  /// <summary>
  /// Mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_MANAGEMENT_FEE")] BalanceDepositManagementFee = 27,
  /// <summary>
  /// Mirroring commission. Deprecated since 7.1 in favor of BALANCE_WITHDRAW_COPY_FEE (34).
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_MANAGEMENT_FEE")] BalanceWithdrawManagementFee = 28,
  /// <summary>
  /// Mirroring commission.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_PERFORMANCE_FEE")] BalanceDepositPerformanceFee = 29,
  /// <summary>
  /// Withdraw for subaccount creation (cTrader Copy).
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_FOR_SUBACCOUNT")] BalanceWithdrawForSubaccount = 30,
  /// <summary>
  /// Deposit to subaccount on creation (cTrader Copy).
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_TO_SUBACCOUNT")] BalanceDepositToSubaccount = 31,
  /// <summary>
  /// Manual user's withdraw from subaccount (cTrader Copy), to parent account.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_FROM_SUBACCOUNT")] BalanceWithdrawFromSubaccount = 32,
  /// <summary>
  /// Manual user's deposit to subaccount (cTrader Copy), from parent account.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_FROM_SUBACCOUNT")] BalanceDepositFromSubaccount = 33,
  /// <summary>
  /// Withdrawal fees to Strategy Provider.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_COPY_FEE")] BalanceWithdrawCopyFee = 34,
  /// <summary>
  /// Withdraw of inactivity fee from the balance.
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_INACTIVITY_FEE")] BalanceWithdrawInactivityFee = 35,
  /// <summary>
  /// Deposit within the same server (from another account).
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_TRANSFER")] BalanceDepositTransfer = 36,
  /// <summary>
  /// Withdraw within the same server (to another account).
  /// </summary>
  [pbr::OriginalName("BALANCE_WITHDRAW_TRANSFER")] BalanceWithdrawTransfer = 37,
  /// <summary>
  /// Bonus being converted from virtual bonus to real deposit.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_CONVERTED_BONUS")] BalanceDepositConvertedBonus = 38,
  /// <summary>
  /// Applies if negative balance protection is configured by broker, should make balance = 0.
  /// </summary>
  [pbr::OriginalName("BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION")] BalanceDepositNegativeBalanceProtection = 39,
}

/// <summary>
///* Deal status ENUM. 
/// </summary>
public enum ProtoOADealStatus {
  /// <summary>
  /// Deal filled.
  /// </summary>
  [pbr::OriginalName("FILLED")] Filled = 2,
  /// <summary>
  /// Deal is partially filled.
  /// </summary>
  [pbr::OriginalName("PARTIALLY_FILLED")] PartiallyFilled = 3,
  /// <summary>
  /// Deal is correct but was rejected by liquidity provider (e.g. no liquidity).
  /// </summary>
  [pbr::OriginalName("REJECTED")] Rejected = 4,
  /// <summary>
  /// Deal rejected by server (e.g. no price quotes).
  /// </summary>
  [pbr::OriginalName("INTERNALLY_REJECTED")] InternallyRejected = 5,
  /// <summary>
  /// Deal is rejected by LP due to error (e.g. symbol is unknown).
  /// </summary>
  [pbr::OriginalName("ERROR")] Error = 6,
  /// <summary>
  /// Liquidity provider did not sent response on the deal during specified execution time period.
  /// </summary>
  [pbr::OriginalName("MISSED")] Missed = 7,
}

/// <summary>
///* Trendbar period ENUM. 
/// </summary>
public enum ProtoOATrendbarPeriod {
  [pbr::OriginalName("M1")] M1 = 1,
  [pbr::OriginalName("M2")] M2 = 2,
  [pbr::OriginalName("M3")] M3 = 3,
  [pbr::OriginalName("M4")] M4 = 4,
  [pbr::OriginalName("M5")] M5 = 5,
  [pbr::OriginalName("M10")] M10 = 6,
  [pbr::OriginalName("M15")] M15 = 7,
  [pbr::OriginalName("M30")] M30 = 8,
  [pbr::OriginalName("H1")] H1 = 9,
  [pbr::OriginalName("H4")] H4 = 10,
  [pbr::OriginalName("H12")] H12 = 11,
  [pbr::OriginalName("D1")] D1 = 12,
  [pbr::OriginalName("W1")] W1 = 13,
  [pbr::OriginalName("MN1")] Mn1 = 14,
}

/// <summary>
///* Price quote type. 
/// </summary>
public enum ProtoOAQuoteType {
  [pbr::OriginalName("BID")] Bid = 1,
  [pbr::OriginalName("ASK")] Ask = 2,
}

/// <summary>
///* Open API application permission in regards to token ENUM. 
/// </summary>
public enum ProtoOAClientPermissionScope {
  /// <summary>
  /// Allows to use only view commends. Trade is prohibited.
  /// </summary>
  [pbr::OriginalName("SCOPE_VIEW")] ScopeView = 0,
  /// <summary>
  /// Allows to use all commands.
  /// </summary>
  [pbr::OriginalName("SCOPE_TRADE")] ScopeTrade = 1,
}

/// <summary>
///* Type of notification, currently only 3 instances of marginCall are supported. 
/// </summary>
public enum ProtoOANotificationType {
  /// <summary>
  /// one of three margin calls, they are all similar.
  /// </summary>
  [pbr::OriginalName("MARGIN_LEVEL_THRESHOLD_1")] MarginLevelThreshold1 = 61,
  /// <summary>
  /// one of three margin calls, they are all similar.
  /// </summary>
  [pbr::OriginalName("MARGIN_LEVEL_THRESHOLD_2")] MarginLevelThreshold2 = 62,
  /// <summary>
  /// one of three margin calls, they are all similar.
  /// </summary>
  [pbr::OriginalName("MARGIN_LEVEL_THRESHOLD_3")] MarginLevelThreshold3 = 63,
}

/// <summary>
///* Error code ENUM. 
/// </summary>
public enum ProtoOAErrorCode {
  /// <summary>
  ///Authorization
  /// </summary>
  [pbr::OriginalName("OA_AUTH_TOKEN_EXPIRED")] OaAuthTokenExpired = 1,
  /// <summary>
  /// When account is not authorized.
  /// </summary>
  [pbr::OriginalName("ACCOUNT_NOT_AUTHORIZED")] AccountNotAuthorized = 2,
  /// <summary>
  /// When client tries to authorize after it was already authorized
  /// </summary>
  [pbr::OriginalName("ALREADY_LOGGED_IN")] AlreadyLoggedIn = 14,
  /// <summary>
  /// Open API client is not activated or wrong client credentials.
  /// </summary>
  [pbr::OriginalName("CH_CLIENT_AUTH_FAILURE")] ChClientAuthFailure = 101,
  /// <summary>
  /// When a command is sent for not authorized Open API client.
  /// </summary>
  [pbr::OriginalName("CH_CLIENT_NOT_AUTHENTICATED")] ChClientNotAuthenticated = 102,
  /// <summary>
  /// Client is trying to authenticate twice.
  /// </summary>
  [pbr::OriginalName("CH_CLIENT_ALREADY_AUTHENTICATED")] ChClientAlreadyAuthenticated = 103,
  /// <summary>
  /// Access token is invalid.
  /// </summary>
  [pbr::OriginalName("CH_ACCESS_TOKEN_INVALID")] ChAccessTokenInvalid = 104,
  /// <summary>
  /// Trading service is not available.
  /// </summary>
  [pbr::OriginalName("CH_SERVER_NOT_REACHABLE")] ChServerNotReachable = 105,
  /// <summary>
  /// Trading account is not found.
  /// </summary>
  [pbr::OriginalName("CH_CTID_TRADER_ACCOUNT_NOT_FOUND")] ChCtidTraderAccountNotFound = 106,
  /// <summary>
  /// Could not find this client id.
  /// </summary>
  [pbr::OriginalName("CH_OA_CLIENT_NOT_FOUND")] ChOaClientNotFound = 107,
  /// <summary>
  ///General
  /// </summary>
  [pbr::OriginalName("REQUEST_FREQUENCY_EXCEEDED")] RequestFrequencyExceeded = 108,
  /// <summary>
  /// Server is under maintenance.
  /// </summary>
  [pbr::OriginalName("SERVER_IS_UNDER_MAINTENANCE")] ServerIsUnderMaintenance = 109,
  /// <summary>
  /// Operations are not allowed for this account.
  /// </summary>
  [pbr::OriginalName("CHANNEL_IS_BLOCKED")] ChannelIsBlocked = 110,
  /// <summary>
  /// Limit of connections is reached for this Open API client.
  /// </summary>
  [pbr::OriginalName("CONNECTIONS_LIMIT_EXCEEDED")] ConnectionsLimitExceeded = 67,
  /// <summary>
  /// Not allowed to increase risk for Positions with Guaranteed Stop Loss.
  /// </summary>
  [pbr::OriginalName("WORSE_GSL_NOT_ALLOWED")] WorseGslNotAllowed = 68,
  /// <summary>
  /// Trading disabled because symbol has holiday.
  /// </summary>
  [pbr::OriginalName("SYMBOL_HAS_HOLIDAY")] SymbolHasHoliday = 69,
  /// <summary>
  ///Pricing
  /// </summary>
  [pbr::OriginalName("NOT_SUBSCRIBED_TO_SPOTS")] NotSubscribedToSpots = 112,
  /// <summary>
  /// When subscription is requested for an active.
  /// </summary>
  [pbr::OriginalName("ALREADY_SUBSCRIBED")] AlreadySubscribed = 113,
  /// <summary>
  /// Symbol not found.
  /// </summary>
  [pbr::OriginalName("SYMBOL_NOT_FOUND")] SymbolNotFound = 114,
  /// <summary>
  /// Note: to be merged with SYMBOL_NOT_FOUND.
  /// </summary>
  [pbr::OriginalName("UNKNOWN_SYMBOL")] UnknownSymbol = 115,
  /// <summary>
  /// When requested period (from,to) is too large or invalid values are set to from/to.
  /// </summary>
  [pbr::OriginalName("INCORRECT_BOUNDARIES")] IncorrectBoundaries = 35,
  /// <summary>
  ///Trading
  /// </summary>
  [pbr::OriginalName("NO_QUOTES")] NoQuotes = 117,
  /// <summary>
  /// Not enough funds to allocate margin.
  /// </summary>
  [pbr::OriginalName("NOT_ENOUGH_MONEY")] NotEnoughMoney = 118,
  /// <summary>
  /// Max exposure limit is reached for a {trader, symbol, side}.
  /// </summary>
  [pbr::OriginalName("MAX_EXPOSURE_REACHED")] MaxExposureReached = 119,
  /// <summary>
  /// Position not found.
  /// </summary>
  [pbr::OriginalName("POSITION_NOT_FOUND")] PositionNotFound = 120,
  /// <summary>
  /// Order not found.
  /// </summary>
  [pbr::OriginalName("ORDER_NOT_FOUND")] OrderNotFound = 121,
  /// <summary>
  /// When trying to close a position that it is not open.
  /// </summary>
  [pbr::OriginalName("POSITION_NOT_OPEN")] PositionNotOpen = 122,
  /// <summary>
  /// Position in the state that does not allow to perform an operation.
  /// </summary>
  [pbr::OriginalName("POSITION_LOCKED")] PositionLocked = 123,
  /// <summary>
  /// Trading account reached its limit for max number of open positions and orders.
  /// </summary>
  [pbr::OriginalName("TOO_MANY_POSITIONS")] TooManyPositions = 124,
  /// <summary>
  /// Invalid volume.
  /// </summary>
  [pbr::OriginalName("TRADING_BAD_VOLUME")] TradingBadVolume = 125,
  /// <summary>
  /// Invalid stop price.
  /// </summary>
  [pbr::OriginalName("TRADING_BAD_STOPS")] TradingBadStops = 126,
  /// <summary>
  /// Invalid price (e.g. negative).
  /// </summary>
  [pbr::OriginalName("TRADING_BAD_PRICES")] TradingBadPrices = 127,
  /// <summary>
  /// Invalid stake volume (e.g. negative).
  /// </summary>
  [pbr::OriginalName("TRADING_BAD_STAKE")] TradingBadStake = 128,
  /// <summary>
  /// Invalid protection prices.
  /// </summary>
  [pbr::OriginalName("PROTECTION_IS_TOO_CLOSE_TO_MARKET")] ProtectionIsTooCloseToMarket = 129,
  /// <summary>
  /// Invalid expiration.
  /// </summary>
  [pbr::OriginalName("TRADING_BAD_EXPIRATION_DATE")] TradingBadExpirationDate = 130,
  /// <summary>
  /// Unable to apply changes as position has an order under execution.
  /// </summary>
  [pbr::OriginalName("PENDING_EXECUTION")] PendingExecution = 131,
  /// <summary>
  /// Trading is blocked for the symbol.
  /// </summary>
  [pbr::OriginalName("TRADING_DISABLED")] TradingDisabled = 132,
  /// <summary>
  /// Trading account is in read only mode.
  /// </summary>
  [pbr::OriginalName("TRADING_NOT_ALLOWED")] TradingNotAllowed = 133,
  /// <summary>
  /// Unable to cancel order.
  /// </summary>
  [pbr::OriginalName("UNABLE_TO_CANCEL_ORDER")] UnableToCancelOrder = 134,
  /// <summary>
  /// Unable to amend order.
  /// </summary>
  [pbr::OriginalName("UNABLE_TO_AMEND_ORDER")] UnableToAmendOrder = 135,
  /// <summary>
  /// Short selling is not allowed.
  /// </summary>
  [pbr::OriginalName("SHORT_SELLING_NOT_ALLOWED")] ShortSellingNotAllowed = 136,
}

public enum ProtoOALimitedRiskMarginCalculationStrategy {
  [pbr::OriginalName("ACCORDING_TO_LEVERAGE")] AccordingToLeverage = 0,
  [pbr::OriginalName("ACCORDING_TO_GSL")] AccordingToGsl = 1,
  [pbr::OriginalName("ACCORDING_TO_GSL_AND_LEVERAGE")] AccordingToGslAndLeverage = 2,
}

#endregion

#region Messages
/// <summary>
///* Asset entity. 
/// </summary>
public sealed partial class ProtoOAAsset : pb::IMessage<ProtoOAAsset>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAAsset> _parser = new pb::MessageParser<ProtoOAAsset>(() => new ProtoOAAsset());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAAsset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAsset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAsset(ProtoOAAsset other) : this() {
    _hasBits0 = other._hasBits0;
    assetId_ = other.assetId_;
    name_ = other.name_;
    displayName_ = other.displayName_;
    digits_ = other.digits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAsset Clone() {
    return new ProtoOAAsset(this);
  }

  /// <summary>Field number for the "assetId" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private readonly static long AssetIdDefaultValue = 0L;

  private long assetId_;
  /// <summary>
  /// The unique asset ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AssetId {
    get { if ((_hasBits0 & 1) != 0) { return assetId_; } else { return AssetIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      assetId_ = value;
    }
  }
  /// <summary>Gets whether the "assetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAssetId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "assetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAssetId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// The asset name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "displayName" field.</summary>
  public const int DisplayNameFieldNumber = 3;
  private readonly static string DisplayNameDefaultValue = "";

  private string displayName_;
  /// <summary>
  /// User friendly name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DisplayName {
    get { return displayName_ ?? DisplayNameDefaultValue; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "displayName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDisplayName {
    get { return displayName_ != null; }
  }
  /// <summary>Clears the value of the "displayName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDisplayName() {
    displayName_ = null;
  }

  /// <summary>Field number for the "digits" field.</summary>
  public const int DigitsFieldNumber = 4;
  private readonly static int DigitsDefaultValue = 0;

  private int digits_;
  /// <summary>
  /// Precision of the asset.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Digits {
    get { if ((_hasBits0 & 2) != 0) { return digits_; } else { return DigitsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      digits_ = value;
    }
  }
  /// <summary>Gets whether the "digits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDigits {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "digits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDigits() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAsset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAAsset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (Name != other.Name) return false;
    if (DisplayName != other.DisplayName) return false;
    if (Digits != other.Digits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAssetId) hash ^= AssetId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDisplayName) hash ^= DisplayName.GetHashCode();
    if (HasDigits) hash ^= Digits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasAssetId) {
      output.WriteRawTag(8);
      output.WriteInt64(AssetId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDisplayName) {
      output.WriteRawTag(26);
      output.WriteString(DisplayName);
    }
    if (HasDigits) {
      output.WriteRawTag(32);
      output.WriteInt32(Digits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasAssetId) {
      output.WriteRawTag(8);
      output.WriteInt64(AssetId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDisplayName) {
      output.WriteRawTag(26);
      output.WriteString(DisplayName);
    }
    if (HasDigits) {
      output.WriteRawTag(32);
      output.WriteInt32(Digits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssetId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDisplayName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (HasDigits) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAAsset other) {
    if (other == null) {
      return;
    }
    if (other.HasAssetId) {
      AssetId = other.AssetId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDisplayName) {
      DisplayName = other.DisplayName;
    }
    if (other.HasDigits) {
      Digits = other.Digits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          AssetId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          DisplayName = input.ReadString();
          break;
        }
        case 32: {
          Digits = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          AssetId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          DisplayName = input.ReadString();
          break;
        }
        case 32: {
          Digits = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trading symbol entity. 
/// </summary>
public sealed partial class ProtoOASymbol : pb::IMessage<ProtoOASymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOASymbol> _parser = new pb::MessageParser<ProtoOASymbol>(() => new ProtoOASymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOASymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbol(ProtoOASymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    digits_ = other.digits_;
    pipPosition_ = other.pipPosition_;
    enableShortSelling_ = other.enableShortSelling_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    swapRollover3Days_ = other.swapRollover3Days_;
    swapLong_ = other.swapLong_;
    swapShort_ = other.swapShort_;
    maxVolume_ = other.maxVolume_;
    minVolume_ = other.minVolume_;
    stepVolume_ = other.stepVolume_;
    maxExposure_ = other.maxExposure_;
    schedule_ = other.schedule_.Clone();
    commission_ = other.commission_;
    commissionType_ = other.commissionType_;
    slDistance_ = other.slDistance_;
    tpDistance_ = other.tpDistance_;
    gslDistance_ = other.gslDistance_;
    gslCharge_ = other.gslCharge_;
    distanceSetIn_ = other.distanceSetIn_;
    minCommission_ = other.minCommission_;
    minCommissionType_ = other.minCommissionType_;
    minCommissionAsset_ = other.minCommissionAsset_;
    rolloverCommission_ = other.rolloverCommission_;
    skipRolloverDays_ = other.skipRolloverDays_;
    scheduleTimeZone_ = other.scheduleTimeZone_;
    tradingMode_ = other.tradingMode_;
    rolloverCommission3Days_ = other.rolloverCommission3Days_;
    swapCalculationType_ = other.swapCalculationType_;
    lotSize_ = other.lotSize_;
    preciseTradingCommissionRate_ = other.preciseTradingCommissionRate_;
    preciseMinCommission_ = other.preciseMinCommission_;
    holiday_ = other.holiday_.Clone();
    pnlConversionFeeRate_ = other.pnlConversionFeeRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbol Clone() {
    return new ProtoOASymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "digits" field.</summary>
  public const int DigitsFieldNumber = 2;
  private readonly static int DigitsDefaultValue = 0;

  private int digits_;
  /// <summary>
  /// Number of price digits to be displayed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Digits {
    get { if ((_hasBits0 & 2) != 0) { return digits_; } else { return DigitsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      digits_ = value;
    }
  }
  /// <summary>Gets whether the "digits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDigits {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "digits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDigits() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "pipPosition" field.</summary>
  public const int PipPositionFieldNumber = 3;
  private readonly static int PipPositionDefaultValue = 0;

  private int pipPosition_;
  /// <summary>
  /// Pip position on digits.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PipPosition {
    get { if ((_hasBits0 & 4) != 0) { return pipPosition_; } else { return PipPositionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      pipPosition_ = value;
    }
  }
  /// <summary>Gets whether the "pipPosition" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPipPosition {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "pipPosition" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPipPosition() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "enableShortSelling" field.</summary>
  public const int EnableShortSellingFieldNumber = 4;
  private readonly static bool EnableShortSellingDefaultValue = false;

  private bool enableShortSelling_;
  /// <summary>
  /// If TRUE then the short selling with the symbol is enabled.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool EnableShortSelling {
    get { if ((_hasBits0 & 8) != 0) { return enableShortSelling_; } else { return EnableShortSellingDefaultValue; } }
    set {
      _hasBits0 |= 8;
      enableShortSelling_ = value;
    }
  }
  /// <summary>Gets whether the "enableShortSelling" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnableShortSelling {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "enableShortSelling" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnableShortSelling() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 5;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then setting of guaranteedStopLoss is available for limited risk accounts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 16) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 16;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "swapRollover3Days" field.</summary>
  public const int SwapRollover3DaysFieldNumber = 6;
  private readonly static global::ProtoOADayOfWeek SwapRollover3DaysDefaultValue = global::ProtoOADayOfWeek.Monday;

  private global::ProtoOADayOfWeek swapRollover3Days_;
  /// <summary>
  /// Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOADayOfWeek SwapRollover3Days {
    get { if ((_hasBits0 & 32) != 0) { return swapRollover3Days_; } else { return SwapRollover3DaysDefaultValue; } }
    set {
      _hasBits0 |= 32;
      swapRollover3Days_ = value;
    }
  }
  /// <summary>Gets whether the "swapRollover3Days" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapRollover3Days {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "swapRollover3Days" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapRollover3Days() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "swapLong" field.</summary>
  public const int SwapLongFieldNumber = 7;
  private readonly static double SwapLongDefaultValue = 0D;

  private double swapLong_;
  /// <summary>
  /// SWAP charge for long positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SwapLong {
    get { if ((_hasBits0 & 64) != 0) { return swapLong_; } else { return SwapLongDefaultValue; } }
    set {
      _hasBits0 |= 64;
      swapLong_ = value;
    }
  }
  /// <summary>Gets whether the "swapLong" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapLong {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "swapLong" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapLong() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "swapShort" field.</summary>
  public const int SwapShortFieldNumber = 8;
  private readonly static double SwapShortDefaultValue = 0D;

  private double swapShort_;
  /// <summary>
  /// SWAP charge for short positions.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double SwapShort {
    get { if ((_hasBits0 & 128) != 0) { return swapShort_; } else { return SwapShortDefaultValue; } }
    set {
      _hasBits0 |= 128;
      swapShort_ = value;
    }
  }
  /// <summary>Gets whether the "swapShort" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapShort {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "swapShort" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapShort() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "maxVolume" field.</summary>
  public const int MaxVolumeFieldNumber = 9;
  private readonly static long MaxVolumeDefaultValue = 0L;

  private long maxVolume_;
  /// <summary>
  /// Maximum allowed volume in cents for an order with a symbol.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MaxVolume {
    get { if ((_hasBits0 & 256) != 0) { return maxVolume_; } else { return MaxVolumeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      maxVolume_ = value;
    }
  }
  /// <summary>Gets whether the "maxVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxVolume {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "maxVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxVolume() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "minVolume" field.</summary>
  public const int MinVolumeFieldNumber = 10;
  private readonly static long MinVolumeDefaultValue = 0L;

  private long minVolume_;
  /// <summary>
  /// Minimum allowed volume in cents for an order with a symbol.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinVolume {
    get { if ((_hasBits0 & 512) != 0) { return minVolume_; } else { return MinVolumeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      minVolume_ = value;
    }
  }
  /// <summary>Gets whether the "minVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinVolume {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "minVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinVolume() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "stepVolume" field.</summary>
  public const int StepVolumeFieldNumber = 11;
  private readonly static long StepVolumeDefaultValue = 0L;

  private long stepVolume_;
  /// <summary>
  /// Step of the volume in cents for an order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StepVolume {
    get { if ((_hasBits0 & 1024) != 0) { return stepVolume_; } else { return StepVolumeDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      stepVolume_ = value;
    }
  }
  /// <summary>Gets whether the "stepVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStepVolume {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "stepVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStepVolume() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "maxExposure" field.</summary>
  public const int MaxExposureFieldNumber = 12;
  private readonly static ulong MaxExposureDefaultValue = 0UL;

  private ulong maxExposure_;
  /// <summary>
  /// Value of max exposure per symbol, per account. Blocks execution if breached.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong MaxExposure {
    get { if ((_hasBits0 & 2048) != 0) { return maxExposure_; } else { return MaxExposureDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      maxExposure_ = value;
    }
  }
  /// <summary>Gets whether the "maxExposure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxExposure {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "maxExposure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxExposure() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 13;
  private static readonly pb::FieldCodec<global::ProtoOAInterval> _repeated_schedule_codec
      = pb::FieldCodec.ForMessage(106, global::ProtoOAInterval.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAInterval> schedule_ = new pbc::RepeatedField<global::ProtoOAInterval>();
  /// <summary>
  /// Symbol trading interval, specified in seconds starting from SUNDAY 00:00 in specified time zone.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoOAInterval> Schedule {
    get { return schedule_; }
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 14;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Commission base amount. Total commission depends on commissionType. Use preciseTradingCommissionRate.
  /// </summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 4096) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "commissionType" field.</summary>
  public const int CommissionTypeFieldNumber = 15;
  private readonly static global::ProtoOACommissionType CommissionTypeDefaultValue = global::ProtoOACommissionType.UsdPerMillionUsd;

  private global::ProtoOACommissionType commissionType_;
  /// <summary>
  /// Commission type. See ProtoOACommissionType for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOACommissionType CommissionType {
    get { if ((_hasBits0 & 8192) != 0) { return commissionType_; } else { return CommissionTypeDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      commissionType_ = value;
    }
  }
  /// <summary>Gets whether the "commissionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommissionType {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "commissionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommissionType() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "slDistance" field.</summary>
  public const int SlDistanceFieldNumber = 16;
  private readonly static uint SlDistanceDefaultValue = 0;

  private uint slDistance_;
  /// <summary>
  /// Minimum allowed distance between stop loss and current market price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint SlDistance {
    get { if ((_hasBits0 & 16384) != 0) { return slDistance_; } else { return SlDistanceDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      slDistance_ = value;
    }
  }
  /// <summary>Gets whether the "slDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSlDistance {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "slDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSlDistance() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "tpDistance" field.</summary>
  public const int TpDistanceFieldNumber = 17;
  private readonly static uint TpDistanceDefaultValue = 0;

  private uint tpDistance_;
  /// <summary>
  /// Minimum allowed distance between take profit and current market price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint TpDistance {
    get { if ((_hasBits0 & 32768) != 0) { return tpDistance_; } else { return TpDistanceDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      tpDistance_ = value;
    }
  }
  /// <summary>Gets whether the "tpDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTpDistance {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "tpDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTpDistance() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "gslDistance" field.</summary>
  public const int GslDistanceFieldNumber = 18;
  private readonly static uint GslDistanceDefaultValue = 0;

  private uint gslDistance_;
  /// <summary>
  /// Minimum allowed distance between guaranteed stop loss and current market price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint GslDistance {
    get { if ((_hasBits0 & 65536) != 0) { return gslDistance_; } else { return GslDistanceDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      gslDistance_ = value;
    }
  }
  /// <summary>Gets whether the "gslDistance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslDistance {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "gslDistance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslDistance() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "gslCharge" field.</summary>
  public const int GslChargeFieldNumber = 19;
  private readonly static long GslChargeDefaultValue = 0L;

  private long gslCharge_;
  /// <summary>
  /// Guaranteed stop loss fee.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GslCharge {
    get { if ((_hasBits0 & 131072) != 0) { return gslCharge_; } else { return GslChargeDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      gslCharge_ = value;
    }
  }
  /// <summary>Gets whether the "gslCharge" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGslCharge {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "gslCharge" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGslCharge() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "distanceSetIn" field.</summary>
  public const int DistanceSetInFieldNumber = 20;
  private readonly static global::ProtoOASymbolDistanceType DistanceSetInDefaultValue = global::ProtoOASymbolDistanceType.SymbolDistanceInPoints;

  private global::ProtoOASymbolDistanceType distanceSetIn_;
  /// <summary>
  /// Unit of distance measure for slDistance, tpDistance, gslDistance.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOASymbolDistanceType DistanceSetIn {
    get { if ((_hasBits0 & 262144) != 0) { return distanceSetIn_; } else { return DistanceSetInDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      distanceSetIn_ = value;
    }
  }
  /// <summary>Gets whether the "distanceSetIn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDistanceSetIn {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "distanceSetIn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDistanceSetIn() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "minCommission" field.</summary>
  public const int MinCommissionFieldNumber = 21;
  private readonly static long MinCommissionDefaultValue = 0L;

  private long minCommission_;
  /// <summary>
  /// Minimum commission amount per trade. Use preciseMinCommission.
  /// </summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinCommission {
    get { if ((_hasBits0 & 524288) != 0) { return minCommission_; } else { return MinCommissionDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      minCommission_ = value;
    }
  }
  /// <summary>Gets whether the "minCommission" field is set</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinCommission {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "minCommission" field</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinCommission() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "minCommissionType" field.</summary>
  public const int MinCommissionTypeFieldNumber = 22;
  private readonly static global::ProtoOAMinCommissionType MinCommissionTypeDefaultValue = global::ProtoOAMinCommissionType.Currency;

  private global::ProtoOAMinCommissionType minCommissionType_;
  /// <summary>
  /// Minimum commission Type. See ProtoOAMinCommissionType for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAMinCommissionType MinCommissionType {
    get { if ((_hasBits0 & 1048576) != 0) { return minCommissionType_; } else { return MinCommissionTypeDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      minCommissionType_ = value;
    }
  }
  /// <summary>Gets whether the "minCommissionType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinCommissionType {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "minCommissionType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinCommissionType() {
    _hasBits0 &= ~1048576;
  }

  /// <summary>Field number for the "minCommissionAsset" field.</summary>
  public const int MinCommissionAssetFieldNumber = 23;
  private readonly static string MinCommissionAssetDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("VVNE"), 0, 3);

  private string minCommissionAsset_;
  /// <summary>
  /// Currency for minimum commission. (USD or quote currency).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MinCommissionAsset {
    get { return minCommissionAsset_ ?? MinCommissionAssetDefaultValue; }
    set {
      minCommissionAsset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "minCommissionAsset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMinCommissionAsset {
    get { return minCommissionAsset_ != null; }
  }
  /// <summary>Clears the value of the "minCommissionAsset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMinCommissionAsset() {
    minCommissionAsset_ = null;
  }

  /// <summary>Field number for the "rolloverCommission" field.</summary>
  public const int RolloverCommissionFieldNumber = 24;
  private readonly static long RolloverCommissionDefaultValue = 0L;

  private long rolloverCommission_;
  /// <summary>
  /// Amount of commission per trade for Shariah Compliant accounts in deposit currency (swapFree = TRUE).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RolloverCommission {
    get { if ((_hasBits0 & 2097152) != 0) { return rolloverCommission_; } else { return RolloverCommissionDefaultValue; } }
    set {
      _hasBits0 |= 2097152;
      rolloverCommission_ = value;
    }
  }
  /// <summary>Gets whether the "rolloverCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRolloverCommission {
    get { return (_hasBits0 & 2097152) != 0; }
  }
  /// <summary>Clears the value of the "rolloverCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRolloverCommission() {
    _hasBits0 &= ~2097152;
  }

  /// <summary>Field number for the "skipRolloverDays" field.</summary>
  public const int SkipRolloverDaysFieldNumber = 25;
  private readonly static int SkipRolloverDaysDefaultValue = 0;

  private int skipRolloverDays_;
  /// <summary>
  /// Initial period before the first rolloverCommission will be charged on the account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SkipRolloverDays {
    get { if ((_hasBits0 & 4194304) != 0) { return skipRolloverDays_; } else { return SkipRolloverDaysDefaultValue; } }
    set {
      _hasBits0 |= 4194304;
      skipRolloverDays_ = value;
    }
  }
  /// <summary>Gets whether the "skipRolloverDays" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSkipRolloverDays {
    get { return (_hasBits0 & 4194304) != 0; }
  }
  /// <summary>Clears the value of the "skipRolloverDays" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSkipRolloverDays() {
    _hasBits0 &= ~4194304;
  }

  /// <summary>Field number for the "scheduleTimeZone" field.</summary>
  public const int ScheduleTimeZoneFieldNumber = 26;
  private readonly static string ScheduleTimeZoneDefaultValue = "";

  private string scheduleTimeZone_;
  /// <summary>
  /// Time zone for the symbol trading intervals.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ScheduleTimeZone {
    get { return scheduleTimeZone_ ?? ScheduleTimeZoneDefaultValue; }
    set {
      scheduleTimeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "scheduleTimeZone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleTimeZone {
    get { return scheduleTimeZone_ != null; }
  }
  /// <summary>Clears the value of the "scheduleTimeZone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleTimeZone() {
    scheduleTimeZone_ = null;
  }

  /// <summary>Field number for the "tradingMode" field.</summary>
  public const int TradingModeFieldNumber = 27;
  private readonly static global::ProtoOATradingMode TradingModeDefaultValue = global::ProtoOATradingMode.Enabled;

  private global::ProtoOATradingMode tradingMode_;
  /// <summary>
  /// Rules for trading with the symbol. See ProtoOATradingMode for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATradingMode TradingMode {
    get { if ((_hasBits0 & 8388608) != 0) { return tradingMode_; } else { return TradingModeDefaultValue; } }
    set {
      _hasBits0 |= 8388608;
      tradingMode_ = value;
    }
  }
  /// <summary>Gets whether the "tradingMode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradingMode {
    get { return (_hasBits0 & 8388608) != 0; }
  }
  /// <summary>Clears the value of the "tradingMode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradingMode() {
    _hasBits0 &= ~8388608;
  }

  /// <summary>Field number for the "rolloverCommission3Days" field.</summary>
  public const int RolloverCommission3DaysFieldNumber = 28;
  private readonly static global::ProtoOADayOfWeek RolloverCommission3DaysDefaultValue = global::ProtoOADayOfWeek.Monday;

  private global::ProtoOADayOfWeek rolloverCommission3Days_;
  /// <summary>
  /// Day of the week (in UTC) when Administrative Fee charge amount will be tripled. Applied only if RolloverChargePeriod = 0 or 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOADayOfWeek RolloverCommission3Days {
    get { if ((_hasBits0 & 16777216) != 0) { return rolloverCommission3Days_; } else { return RolloverCommission3DaysDefaultValue; } }
    set {
      _hasBits0 |= 16777216;
      rolloverCommission3Days_ = value;
    }
  }
  /// <summary>Gets whether the "rolloverCommission3Days" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRolloverCommission3Days {
    get { return (_hasBits0 & 16777216) != 0; }
  }
  /// <summary>Clears the value of the "rolloverCommission3Days" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRolloverCommission3Days() {
    _hasBits0 &= ~16777216;
  }

  /// <summary>Field number for the "swapCalculationType" field.</summary>
  public const int SwapCalculationTypeFieldNumber = 29;
  private readonly static global::ProtoOASwapCalculationType SwapCalculationTypeDefaultValue = global::ProtoOASwapCalculationType.Pips;

  private global::ProtoOASwapCalculationType swapCalculationType_;
  /// <summary>
  /// Specifies type of SWAP computation as PIPS (0) or PERCENTAGE (1, annual, in percent)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOASwapCalculationType SwapCalculationType {
    get { if ((_hasBits0 & 33554432) != 0) { return swapCalculationType_; } else { return SwapCalculationTypeDefaultValue; } }
    set {
      _hasBits0 |= 33554432;
      swapCalculationType_ = value;
    }
  }
  /// <summary>Gets whether the "swapCalculationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapCalculationType {
    get { return (_hasBits0 & 33554432) != 0; }
  }
  /// <summary>Clears the value of the "swapCalculationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapCalculationType() {
    _hasBits0 &= ~33554432;
  }

  /// <summary>Field number for the "lotSize" field.</summary>
  public const int LotSizeFieldNumber = 30;
  private readonly static long LotSizeDefaultValue = 0L;

  private long lotSize_;
  /// <summary>
  /// Lot size of the Symbol (in cents).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LotSize {
    get { if ((_hasBits0 & 67108864) != 0) { return lotSize_; } else { return LotSizeDefaultValue; } }
    set {
      _hasBits0 |= 67108864;
      lotSize_ = value;
    }
  }
  /// <summary>Gets whether the "lotSize" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLotSize {
    get { return (_hasBits0 & 67108864) != 0; }
  }
  /// <summary>Clears the value of the "lotSize" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLotSize() {
    _hasBits0 &= ~67108864;
  }

  /// <summary>Field number for the "preciseTradingCommissionRate" field.</summary>
  public const int PreciseTradingCommissionRateFieldNumber = 31;
  private readonly static long PreciseTradingCommissionRateDefaultValue = 0L;

  private long preciseTradingCommissionRate_;
  /// <summary>
  /// Commission base amount. Total commission depends on commissionType: for non-percentage types it is multiplied by 10^8.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PreciseTradingCommissionRate {
    get { if ((_hasBits0 & 134217728) != 0) { return preciseTradingCommissionRate_; } else { return PreciseTradingCommissionRateDefaultValue; } }
    set {
      _hasBits0 |= 134217728;
      preciseTradingCommissionRate_ = value;
    }
  }
  /// <summary>Gets whether the "preciseTradingCommissionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPreciseTradingCommissionRate {
    get { return (_hasBits0 & 134217728) != 0; }
  }
  /// <summary>Clears the value of the "preciseTradingCommissionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPreciseTradingCommissionRate() {
    _hasBits0 &= ~134217728;
  }

  /// <summary>Field number for the "preciseMinCommission" field.</summary>
  public const int PreciseMinCommissionFieldNumber = 32;
  private readonly static long PreciseMinCommissionDefaultValue = 0L;

  private long preciseMinCommission_;
  /// <summary>
  /// Minimum commission amount per trade multiplied by 10^8.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PreciseMinCommission {
    get { if ((_hasBits0 & 268435456) != 0) { return preciseMinCommission_; } else { return PreciseMinCommissionDefaultValue; } }
    set {
      _hasBits0 |= 268435456;
      preciseMinCommission_ = value;
    }
  }
  /// <summary>Gets whether the "preciseMinCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPreciseMinCommission {
    get { return (_hasBits0 & 268435456) != 0; }
  }
  /// <summary>Clears the value of the "preciseMinCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPreciseMinCommission() {
    _hasBits0 &= ~268435456;
  }

  /// <summary>Field number for the "holiday" field.</summary>
  public const int HolidayFieldNumber = 33;
  private static readonly pb::FieldCodec<global::ProtoOAHoliday> _repeated_holiday_codec
      = pb::FieldCodec.ForMessage(266, global::ProtoOAHoliday.Parser);
  private readonly pbc::RepeatedField<global::ProtoOAHoliday> holiday_ = new pbc::RepeatedField<global::ProtoOAHoliday>();
  /// <summary>
  /// List of holidays for this symbol specified by broker.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProtoOAHoliday> Holiday {
    get { return holiday_; }
  }

  /// <summary>Field number for the "pnlConversionFeeRate" field.</summary>
  public const int PnlConversionFeeRateFieldNumber = 34;
  private readonly static int PnlConversionFeeRateDefaultValue = 0;

  private int pnlConversionFeeRate_;
  /// <summary>
  /// Percentage (1 = 0.01%) of the realized Gross Profit, which will be paid by the Trader for any trade if the Quote Asset of the traded Symbol is not matched with the Deposit Asset.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PnlConversionFeeRate {
    get { if ((_hasBits0 & 536870912) != 0) { return pnlConversionFeeRate_; } else { return PnlConversionFeeRateDefaultValue; } }
    set {
      _hasBits0 |= 536870912;
      pnlConversionFeeRate_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFeeRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFeeRate {
    get { return (_hasBits0 & 536870912) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFeeRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFeeRate() {
    _hasBits0 &= ~536870912;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOASymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Digits != other.Digits) return false;
    if (PipPosition != other.PipPosition) return false;
    if (EnableShortSelling != other.EnableShortSelling) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (SwapRollover3Days != other.SwapRollover3Days) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapLong, other.SwapLong)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapShort, other.SwapShort)) return false;
    if (MaxVolume != other.MaxVolume) return false;
    if (MinVolume != other.MinVolume) return false;
    if (StepVolume != other.StepVolume) return false;
    if (MaxExposure != other.MaxExposure) return false;
    if(!schedule_.Equals(other.schedule_)) return false;
    if (Commission != other.Commission) return false;
    if (CommissionType != other.CommissionType) return false;
    if (SlDistance != other.SlDistance) return false;
    if (TpDistance != other.TpDistance) return false;
    if (GslDistance != other.GslDistance) return false;
    if (GslCharge != other.GslCharge) return false;
    if (DistanceSetIn != other.DistanceSetIn) return false;
    if (MinCommission != other.MinCommission) return false;
    if (MinCommissionType != other.MinCommissionType) return false;
    if (MinCommissionAsset != other.MinCommissionAsset) return false;
    if (RolloverCommission != other.RolloverCommission) return false;
    if (SkipRolloverDays != other.SkipRolloverDays) return false;
    if (ScheduleTimeZone != other.ScheduleTimeZone) return false;
    if (TradingMode != other.TradingMode) return false;
    if (RolloverCommission3Days != other.RolloverCommission3Days) return false;
    if (SwapCalculationType != other.SwapCalculationType) return false;
    if (LotSize != other.LotSize) return false;
    if (PreciseTradingCommissionRate != other.PreciseTradingCommissionRate) return false;
    if (PreciseMinCommission != other.PreciseMinCommission) return false;
    if(!holiday_.Equals(other.holiday_)) return false;
    if (PnlConversionFeeRate != other.PnlConversionFeeRate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasDigits) hash ^= Digits.GetHashCode();
    if (HasPipPosition) hash ^= PipPosition.GetHashCode();
    if (HasEnableShortSelling) hash ^= EnableShortSelling.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasSwapRollover3Days) hash ^= SwapRollover3Days.GetHashCode();
    if (HasSwapLong) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapLong);
    if (HasSwapShort) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapShort);
    if (HasMaxVolume) hash ^= MaxVolume.GetHashCode();
    if (HasMinVolume) hash ^= MinVolume.GetHashCode();
    if (HasStepVolume) hash ^= StepVolume.GetHashCode();
    if (HasMaxExposure) hash ^= MaxExposure.GetHashCode();
    hash ^= schedule_.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasCommissionType) hash ^= CommissionType.GetHashCode();
    if (HasSlDistance) hash ^= SlDistance.GetHashCode();
    if (HasTpDistance) hash ^= TpDistance.GetHashCode();
    if (HasGslDistance) hash ^= GslDistance.GetHashCode();
    if (HasGslCharge) hash ^= GslCharge.GetHashCode();
    if (HasDistanceSetIn) hash ^= DistanceSetIn.GetHashCode();
    if (HasMinCommission) hash ^= MinCommission.GetHashCode();
    if (HasMinCommissionType) hash ^= MinCommissionType.GetHashCode();
    if (HasMinCommissionAsset) hash ^= MinCommissionAsset.GetHashCode();
    if (HasRolloverCommission) hash ^= RolloverCommission.GetHashCode();
    if (HasSkipRolloverDays) hash ^= SkipRolloverDays.GetHashCode();
    if (HasScheduleTimeZone) hash ^= ScheduleTimeZone.GetHashCode();
    if (HasTradingMode) hash ^= TradingMode.GetHashCode();
    if (HasRolloverCommission3Days) hash ^= RolloverCommission3Days.GetHashCode();
    if (HasSwapCalculationType) hash ^= SwapCalculationType.GetHashCode();
    if (HasLotSize) hash ^= LotSize.GetHashCode();
    if (HasPreciseTradingCommissionRate) hash ^= PreciseTradingCommissionRate.GetHashCode();
    if (HasPreciseMinCommission) hash ^= PreciseMinCommission.GetHashCode();
    hash ^= holiday_.GetHashCode();
    if (HasPnlConversionFeeRate) hash ^= PnlConversionFeeRate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasDigits) {
      output.WriteRawTag(16);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(24);
      output.WriteInt32(PipPosition);
    }
    if (HasEnableShortSelling) {
      output.WriteRawTag(32);
      output.WriteBool(EnableShortSelling);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(40);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasSwapRollover3Days) {
      output.WriteRawTag(48);
      output.WriteEnum((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      output.WriteRawTag(57);
      output.WriteDouble(SwapLong);
    }
    if (HasSwapShort) {
      output.WriteRawTag(65);
      output.WriteDouble(SwapShort);
    }
    if (HasMaxVolume) {
      output.WriteRawTag(72);
      output.WriteInt64(MaxVolume);
    }
    if (HasMinVolume) {
      output.WriteRawTag(80);
      output.WriteInt64(MinVolume);
    }
    if (HasStepVolume) {
      output.WriteRawTag(88);
      output.WriteInt64(StepVolume);
    }
    if (HasMaxExposure) {
      output.WriteRawTag(96);
      output.WriteUInt64(MaxExposure);
    }
    schedule_.WriteTo(output, _repeated_schedule_codec);
    if (HasCommission) {
      output.WriteRawTag(112);
      output.WriteInt64(Commission);
    }
    if (HasCommissionType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) CommissionType);
    }
    if (HasSlDistance) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(SlDistance);
    }
    if (HasTpDistance) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(TpDistance);
    }
    if (HasGslDistance) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(GslDistance);
    }
    if (HasGslCharge) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(GslCharge);
    }
    if (HasDistanceSetIn) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) DistanceSetIn);
    }
    if (HasMinCommission) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(MinCommission);
    }
    if (HasMinCommissionType) {
      output.WriteRawTag(176, 1);
      output.WriteEnum((int) MinCommissionType);
    }
    if (HasMinCommissionAsset) {
      output.WriteRawTag(186, 1);
      output.WriteString(MinCommissionAsset);
    }
    if (HasRolloverCommission) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(SkipRolloverDays);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(210, 1);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasTradingMode) {
      output.WriteRawTag(216, 1);
      output.WriteEnum((int) TradingMode);
    }
    if (HasRolloverCommission3Days) {
      output.WriteRawTag(224, 1);
      output.WriteEnum((int) RolloverCommission3Days);
    }
    if (HasSwapCalculationType) {
      output.WriteRawTag(232, 1);
      output.WriteEnum((int) SwapCalculationType);
    }
    if (HasLotSize) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(LotSize);
    }
    if (HasPreciseTradingCommissionRate) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(PreciseMinCommission);
    }
    holiday_.WriteTo(output, _repeated_holiday_codec);
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(144, 2);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasDigits) {
      output.WriteRawTag(16);
      output.WriteInt32(Digits);
    }
    if (HasPipPosition) {
      output.WriteRawTag(24);
      output.WriteInt32(PipPosition);
    }
    if (HasEnableShortSelling) {
      output.WriteRawTag(32);
      output.WriteBool(EnableShortSelling);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(40);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasSwapRollover3Days) {
      output.WriteRawTag(48);
      output.WriteEnum((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      output.WriteRawTag(57);
      output.WriteDouble(SwapLong);
    }
    if (HasSwapShort) {
      output.WriteRawTag(65);
      output.WriteDouble(SwapShort);
    }
    if (HasMaxVolume) {
      output.WriteRawTag(72);
      output.WriteInt64(MaxVolume);
    }
    if (HasMinVolume) {
      output.WriteRawTag(80);
      output.WriteInt64(MinVolume);
    }
    if (HasStepVolume) {
      output.WriteRawTag(88);
      output.WriteInt64(StepVolume);
    }
    if (HasMaxExposure) {
      output.WriteRawTag(96);
      output.WriteUInt64(MaxExposure);
    }
    schedule_.WriteTo(ref output, _repeated_schedule_codec);
    if (HasCommission) {
      output.WriteRawTag(112);
      output.WriteInt64(Commission);
    }
    if (HasCommissionType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) CommissionType);
    }
    if (HasSlDistance) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(SlDistance);
    }
    if (HasTpDistance) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(TpDistance);
    }
    if (HasGslDistance) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(GslDistance);
    }
    if (HasGslCharge) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(GslCharge);
    }
    if (HasDistanceSetIn) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) DistanceSetIn);
    }
    if (HasMinCommission) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(MinCommission);
    }
    if (HasMinCommissionType) {
      output.WriteRawTag(176, 1);
      output.WriteEnum((int) MinCommissionType);
    }
    if (HasMinCommissionAsset) {
      output.WriteRawTag(186, 1);
      output.WriteString(MinCommissionAsset);
    }
    if (HasRolloverCommission) {
      output.WriteRawTag(192, 1);
      output.WriteInt64(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(SkipRolloverDays);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(210, 1);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasTradingMode) {
      output.WriteRawTag(216, 1);
      output.WriteEnum((int) TradingMode);
    }
    if (HasRolloverCommission3Days) {
      output.WriteRawTag(224, 1);
      output.WriteEnum((int) RolloverCommission3Days);
    }
    if (HasSwapCalculationType) {
      output.WriteRawTag(232, 1);
      output.WriteEnum((int) SwapCalculationType);
    }
    if (HasLotSize) {
      output.WriteRawTag(240, 1);
      output.WriteInt64(LotSize);
    }
    if (HasPreciseTradingCommissionRate) {
      output.WriteRawTag(248, 1);
      output.WriteInt64(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      output.WriteRawTag(128, 2);
      output.WriteInt64(PreciseMinCommission);
    }
    holiday_.WriteTo(ref output, _repeated_holiday_codec);
    if (HasPnlConversionFeeRate) {
      output.WriteRawTag(144, 2);
      output.WriteInt32(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasDigits) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Digits);
    }
    if (HasPipPosition) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PipPosition);
    }
    if (HasEnableShortSelling) {
      size += 1 + 1;
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasSwapRollover3Days) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SwapRollover3Days);
    }
    if (HasSwapLong) {
      size += 1 + 8;
    }
    if (HasSwapShort) {
      size += 1 + 8;
    }
    if (HasMaxVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxVolume);
    }
    if (HasMinVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinVolume);
    }
    if (HasStepVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepVolume);
    }
    if (HasMaxExposure) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxExposure);
    }
    size += schedule_.CalculateSize(_repeated_schedule_codec);
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasCommissionType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommissionType);
    }
    if (HasSlDistance) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SlDistance);
    }
    if (HasTpDistance) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TpDistance);
    }
    if (HasGslDistance) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GslDistance);
    }
    if (HasGslCharge) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(GslCharge);
    }
    if (HasDistanceSetIn) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DistanceSetIn);
    }
    if (HasMinCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinCommission);
    }
    if (HasMinCommissionType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MinCommissionType);
    }
    if (HasMinCommissionAsset) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(MinCommissionAsset);
    }
    if (HasRolloverCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RolloverCommission);
    }
    if (HasSkipRolloverDays) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkipRolloverDays);
    }
    if (HasScheduleTimeZone) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ScheduleTimeZone);
    }
    if (HasTradingMode) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradingMode);
    }
    if (HasRolloverCommission3Days) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RolloverCommission3Days);
    }
    if (HasSwapCalculationType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SwapCalculationType);
    }
    if (HasLotSize) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LotSize);
    }
    if (HasPreciseTradingCommissionRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PreciseTradingCommissionRate);
    }
    if (HasPreciseMinCommission) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PreciseMinCommission);
    }
    size += holiday_.CalculateSize(_repeated_holiday_codec);
    if (HasPnlConversionFeeRate) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PnlConversionFeeRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOASymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasDigits) {
      Digits = other.Digits;
    }
    if (other.HasPipPosition) {
      PipPosition = other.PipPosition;
    }
    if (other.HasEnableShortSelling) {
      EnableShortSelling = other.EnableShortSelling;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasSwapRollover3Days) {
      SwapRollover3Days = other.SwapRollover3Days;
    }
    if (other.HasSwapLong) {
      SwapLong = other.SwapLong;
    }
    if (other.HasSwapShort) {
      SwapShort = other.SwapShort;
    }
    if (other.HasMaxVolume) {
      MaxVolume = other.MaxVolume;
    }
    if (other.HasMinVolume) {
      MinVolume = other.MinVolume;
    }
    if (other.HasStepVolume) {
      StepVolume = other.StepVolume;
    }
    if (other.HasMaxExposure) {
      MaxExposure = other.MaxExposure;
    }
    schedule_.Add(other.schedule_);
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasCommissionType) {
      CommissionType = other.CommissionType;
    }
    if (other.HasSlDistance) {
      SlDistance = other.SlDistance;
    }
    if (other.HasTpDistance) {
      TpDistance = other.TpDistance;
    }
    if (other.HasGslDistance) {
      GslDistance = other.GslDistance;
    }
    if (other.HasGslCharge) {
      GslCharge = other.GslCharge;
    }
    if (other.HasDistanceSetIn) {
      DistanceSetIn = other.DistanceSetIn;
    }
    if (other.HasMinCommission) {
      MinCommission = other.MinCommission;
    }
    if (other.HasMinCommissionType) {
      MinCommissionType = other.MinCommissionType;
    }
    if (other.HasMinCommissionAsset) {
      MinCommissionAsset = other.MinCommissionAsset;
    }
    if (other.HasRolloverCommission) {
      RolloverCommission = other.RolloverCommission;
    }
    if (other.HasSkipRolloverDays) {
      SkipRolloverDays = other.SkipRolloverDays;
    }
    if (other.HasScheduleTimeZone) {
      ScheduleTimeZone = other.ScheduleTimeZone;
    }
    if (other.HasTradingMode) {
      TradingMode = other.TradingMode;
    }
    if (other.HasRolloverCommission3Days) {
      RolloverCommission3Days = other.RolloverCommission3Days;
    }
    if (other.HasSwapCalculationType) {
      SwapCalculationType = other.SwapCalculationType;
    }
    if (other.HasLotSize) {
      LotSize = other.LotSize;
    }
    if (other.HasPreciseTradingCommissionRate) {
      PreciseTradingCommissionRate = other.PreciseTradingCommissionRate;
    }
    if (other.HasPreciseMinCommission) {
      PreciseMinCommission = other.PreciseMinCommission;
    }
    holiday_.Add(other.holiday_);
    if (other.HasPnlConversionFeeRate) {
      PnlConversionFeeRate = other.PnlConversionFeeRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Digits = input.ReadInt32();
          break;
        }
        case 24: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 32: {
          EnableShortSelling = input.ReadBool();
          break;
        }
        case 40: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 48: {
          SwapRollover3Days = (global::ProtoOADayOfWeek) input.ReadEnum();
          break;
        }
        case 57: {
          SwapLong = input.ReadDouble();
          break;
        }
        case 65: {
          SwapShort = input.ReadDouble();
          break;
        }
        case 72: {
          MaxVolume = input.ReadInt64();
          break;
        }
        case 80: {
          MinVolume = input.ReadInt64();
          break;
        }
        case 88: {
          StepVolume = input.ReadInt64();
          break;
        }
        case 96: {
          MaxExposure = input.ReadUInt64();
          break;
        }
        case 106: {
          schedule_.AddEntriesFrom(input, _repeated_schedule_codec);
          break;
        }
        case 112: {
          Commission = input.ReadInt64();
          break;
        }
        case 120: {
          CommissionType = (global::ProtoOACommissionType) input.ReadEnum();
          break;
        }
        case 128: {
          SlDistance = input.ReadUInt32();
          break;
        }
        case 136: {
          TpDistance = input.ReadUInt32();
          break;
        }
        case 144: {
          GslDistance = input.ReadUInt32();
          break;
        }
        case 152: {
          GslCharge = input.ReadInt64();
          break;
        }
        case 160: {
          DistanceSetIn = (global::ProtoOASymbolDistanceType) input.ReadEnum();
          break;
        }
        case 168: {
          MinCommission = input.ReadInt64();
          break;
        }
        case 176: {
          MinCommissionType = (global::ProtoOAMinCommissionType) input.ReadEnum();
          break;
        }
        case 186: {
          MinCommissionAsset = input.ReadString();
          break;
        }
        case 192: {
          RolloverCommission = input.ReadInt64();
          break;
        }
        case 200: {
          SkipRolloverDays = input.ReadInt32();
          break;
        }
        case 210: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 216: {
          TradingMode = (global::ProtoOATradingMode) input.ReadEnum();
          break;
        }
        case 224: {
          RolloverCommission3Days = (global::ProtoOADayOfWeek) input.ReadEnum();
          break;
        }
        case 232: {
          SwapCalculationType = (global::ProtoOASwapCalculationType) input.ReadEnum();
          break;
        }
        case 240: {
          LotSize = input.ReadInt64();
          break;
        }
        case 248: {
          PreciseTradingCommissionRate = input.ReadInt64();
          break;
        }
        case 256: {
          PreciseMinCommission = input.ReadInt64();
          break;
        }
        case 266: {
          holiday_.AddEntriesFrom(input, _repeated_holiday_codec);
          break;
        }
        case 272: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Digits = input.ReadInt32();
          break;
        }
        case 24: {
          PipPosition = input.ReadInt32();
          break;
        }
        case 32: {
          EnableShortSelling = input.ReadBool();
          break;
        }
        case 40: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 48: {
          SwapRollover3Days = (global::ProtoOADayOfWeek) input.ReadEnum();
          break;
        }
        case 57: {
          SwapLong = input.ReadDouble();
          break;
        }
        case 65: {
          SwapShort = input.ReadDouble();
          break;
        }
        case 72: {
          MaxVolume = input.ReadInt64();
          break;
        }
        case 80: {
          MinVolume = input.ReadInt64();
          break;
        }
        case 88: {
          StepVolume = input.ReadInt64();
          break;
        }
        case 96: {
          MaxExposure = input.ReadUInt64();
          break;
        }
        case 106: {
          schedule_.AddEntriesFrom(ref input, _repeated_schedule_codec);
          break;
        }
        case 112: {
          Commission = input.ReadInt64();
          break;
        }
        case 120: {
          CommissionType = (global::ProtoOACommissionType) input.ReadEnum();
          break;
        }
        case 128: {
          SlDistance = input.ReadUInt32();
          break;
        }
        case 136: {
          TpDistance = input.ReadUInt32();
          break;
        }
        case 144: {
          GslDistance = input.ReadUInt32();
          break;
        }
        case 152: {
          GslCharge = input.ReadInt64();
          break;
        }
        case 160: {
          DistanceSetIn = (global::ProtoOASymbolDistanceType) input.ReadEnum();
          break;
        }
        case 168: {
          MinCommission = input.ReadInt64();
          break;
        }
        case 176: {
          MinCommissionType = (global::ProtoOAMinCommissionType) input.ReadEnum();
          break;
        }
        case 186: {
          MinCommissionAsset = input.ReadString();
          break;
        }
        case 192: {
          RolloverCommission = input.ReadInt64();
          break;
        }
        case 200: {
          SkipRolloverDays = input.ReadInt32();
          break;
        }
        case 210: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 216: {
          TradingMode = (global::ProtoOATradingMode) input.ReadEnum();
          break;
        }
        case 224: {
          RolloverCommission3Days = (global::ProtoOADayOfWeek) input.ReadEnum();
          break;
        }
        case 232: {
          SwapCalculationType = (global::ProtoOASwapCalculationType) input.ReadEnum();
          break;
        }
        case 240: {
          LotSize = input.ReadInt64();
          break;
        }
        case 248: {
          PreciseTradingCommissionRate = input.ReadInt64();
          break;
        }
        case 256: {
          PreciseMinCommission = input.ReadInt64();
          break;
        }
        case 266: {
          holiday_.AddEntriesFrom(ref input, _repeated_holiday_codec);
          break;
        }
        case 272: {
          PnlConversionFeeRate = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Lightweight symbol entity. 
/// </summary>
public sealed partial class ProtoOALightSymbol : pb::IMessage<ProtoOALightSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOALightSymbol> _parser = new pb::MessageParser<ProtoOALightSymbol>(() => new ProtoOALightSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOALightSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOALightSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOALightSymbol(ProtoOALightSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    symbolName_ = other.symbolName_;
    enabled_ = other.enabled_;
    baseAssetId_ = other.baseAssetId_;
    quoteAssetId_ = other.quoteAssetId_;
    symbolCategoryId_ = other.symbolCategoryId_;
    description_ = other.description_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOALightSymbol Clone() {
    return new ProtoOALightSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "symbolName" field.</summary>
  public const int SymbolNameFieldNumber = 2;
  private readonly static string SymbolNameDefaultValue = "";

  private string symbolName_;
  /// <summary>
  /// Name of the symbol (e.g. EUR/USD).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SymbolName {
    get { return symbolName_ ?? SymbolNameDefaultValue; }
    set {
      symbolName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "symbolName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolName {
    get { return symbolName_ != null; }
  }
  /// <summary>Clears the value of the "symbolName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolName() {
    symbolName_ = null;
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 3;
  private readonly static bool EnabledDefaultValue = false;

  private bool enabled_;
  /// <summary>
  /// If TRUE then symbol is visible for traders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { if ((_hasBits0 & 2) != 0) { return enabled_; } else { return EnabledDefaultValue; } }
    set {
      _hasBits0 |= 2;
      enabled_ = value;
    }
  }
  /// <summary>Gets whether the "enabled" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEnabled {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "enabled" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEnabled() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "baseAssetId" field.</summary>
  public const int BaseAssetIdFieldNumber = 4;
  private readonly static long BaseAssetIdDefaultValue = 0L;

  private long baseAssetId_;
  /// <summary>
  /// Base asset.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BaseAssetId {
    get { if ((_hasBits0 & 4) != 0) { return baseAssetId_; } else { return BaseAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      baseAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "baseAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseAssetId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "baseAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseAssetId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "quoteAssetId" field.</summary>
  public const int QuoteAssetIdFieldNumber = 5;
  private readonly static long QuoteAssetIdDefaultValue = 0L;

  private long quoteAssetId_;
  /// <summary>
  /// Quote asset.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long QuoteAssetId {
    get { if ((_hasBits0 & 8) != 0) { return quoteAssetId_; } else { return QuoteAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      quoteAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "quoteAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteAssetId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "quoteAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteAssetId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "symbolCategoryId" field.</summary>
  public const int SymbolCategoryIdFieldNumber = 6;
  private readonly static long SymbolCategoryIdDefaultValue = 0L;

  private long symbolCategoryId_;
  /// <summary>
  /// Id of the symbol category used for symbols grouping.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolCategoryId {
    get { if ((_hasBits0 & 16) != 0) { return symbolCategoryId_; } else { return SymbolCategoryIdDefaultValue; } }
    set {
      _hasBits0 |= 16;
      symbolCategoryId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolCategoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolCategoryId {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "symbolCategoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolCategoryId() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 7;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOALightSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOALightSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (SymbolName != other.SymbolName) return false;
    if (Enabled != other.Enabled) return false;
    if (BaseAssetId != other.BaseAssetId) return false;
    if (QuoteAssetId != other.QuoteAssetId) return false;
    if (SymbolCategoryId != other.SymbolCategoryId) return false;
    if (Description != other.Description) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasSymbolName) hash ^= SymbolName.GetHashCode();
    if (HasEnabled) hash ^= Enabled.GetHashCode();
    if (HasBaseAssetId) hash ^= BaseAssetId.GetHashCode();
    if (HasQuoteAssetId) hash ^= QuoteAssetId.GetHashCode();
    if (HasSymbolCategoryId) hash ^= SymbolCategoryId.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasSymbolName) {
      output.WriteRawTag(18);
      output.WriteString(SymbolName);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(32);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(40);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasDescription) {
      output.WriteRawTag(58);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasSymbolName) {
      output.WriteRawTag(18);
      output.WriteString(SymbolName);
    }
    if (HasEnabled) {
      output.WriteRawTag(24);
      output.WriteBool(Enabled);
    }
    if (HasBaseAssetId) {
      output.WriteRawTag(32);
      output.WriteInt64(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      output.WriteRawTag(40);
      output.WriteInt64(QuoteAssetId);
    }
    if (HasSymbolCategoryId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolCategoryId);
    }
    if (HasDescription) {
      output.WriteRawTag(58);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasSymbolName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SymbolName);
    }
    if (HasEnabled) {
      size += 1 + 1;
    }
    if (HasBaseAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseAssetId);
    }
    if (HasQuoteAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(QuoteAssetId);
    }
    if (HasSymbolCategoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolCategoryId);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOALightSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasSymbolName) {
      SymbolName = other.SymbolName;
    }
    if (other.HasEnabled) {
      Enabled = other.Enabled;
    }
    if (other.HasBaseAssetId) {
      BaseAssetId = other.BaseAssetId;
    }
    if (other.HasQuoteAssetId) {
      QuoteAssetId = other.QuoteAssetId;
    }
    if (other.HasSymbolCategoryId) {
      SymbolCategoryId = other.SymbolCategoryId;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          SymbolName = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 40: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 58: {
          Description = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          SymbolName = input.ReadString();
          break;
        }
        case 24: {
          Enabled = input.ReadBool();
          break;
        }
        case 32: {
          BaseAssetId = input.ReadInt64();
          break;
        }
        case 40: {
          QuoteAssetId = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolCategoryId = input.ReadInt64();
          break;
        }
        case 58: {
          Description = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ProtoOAArchivedSymbol : pb::IMessage<ProtoOAArchivedSymbol>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAArchivedSymbol> _parser = new pb::MessageParser<ProtoOAArchivedSymbol>(() => new ProtoOAArchivedSymbol());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAArchivedSymbol> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAArchivedSymbol() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAArchivedSymbol(ProtoOAArchivedSymbol other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    name_ = other.name_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    description_ = other.description_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAArchivedSymbol Clone() {
    return new ProtoOAArchivedSymbol(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 3;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 2) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 2;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 4;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAArchivedSymbol);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAArchivedSymbol other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Name != other.Name) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (Description != other.Description) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      output.WriteRawTag(34);
      output.WriteString(Description);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAArchivedSymbol other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 34: {
          Description = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Symbol category entity. 
/// </summary>
public sealed partial class ProtoOASymbolCategory : pb::IMessage<ProtoOASymbolCategory>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOASymbolCategory> _parser = new pb::MessageParser<ProtoOASymbolCategory>(() => new ProtoOASymbolCategory());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOASymbolCategory> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbolCategory() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbolCategory(ProtoOASymbolCategory other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    assetClassId_ = other.assetClassId_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOASymbolCategory Clone() {
    return new ProtoOASymbolCategory(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  /// The unique identifier of the symbol category.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "assetClassId" field.</summary>
  public const int AssetClassIdFieldNumber = 2;
  private readonly static long AssetClassIdDefaultValue = 0L;

  private long assetClassId_;
  /// <summary>
  /// Link to the asset class. One asset class can have many symbol categories.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AssetClassId {
    get { if ((_hasBits0 & 2) != 0) { return assetClassId_; } else { return AssetClassIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      assetClassId_ = value;
    }
  }
  /// <summary>Gets whether the "assetClassId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAssetClassId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "assetClassId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAssetClassId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Category name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOASymbolCategory);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOASymbolCategory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (AssetClassId != other.AssetClassId) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasAssetClassId) hash ^= AssetClassId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasAssetClassId) {
      output.WriteRawTag(16);
      output.WriteInt64(AssetClassId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasAssetClassId) {
      output.WriteRawTag(16);
      output.WriteInt64(AssetClassId);
    }
    if (HasName) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasAssetClassId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(AssetClassId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOASymbolCategory other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasAssetClassId) {
      AssetClassId = other.AssetClassId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          AssetClassId = input.ReadInt64();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          AssetClassId = input.ReadInt64();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Symbol trading session entity. 
/// </summary>
public sealed partial class ProtoOAInterval : pb::IMessage<ProtoOAInterval>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAInterval> _parser = new pb::MessageParser<ProtoOAInterval>(() => new ProtoOAInterval());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAInterval> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAInterval() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAInterval(ProtoOAInterval other) : this() {
    _hasBits0 = other._hasBits0;
    startSecond_ = other.startSecond_;
    endSecond_ = other.endSecond_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAInterval Clone() {
    return new ProtoOAInterval(this);
  }

  /// <summary>Field number for the "startSecond" field.</summary>
  public const int StartSecondFieldNumber = 3;
  private readonly static uint StartSecondDefaultValue = 0;

  private uint startSecond_;
  /// <summary>
  /// Interval start, specified in seconds starting from SUNDAY 00:00 in specified time zone (inclusive to the interval).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint StartSecond {
    get { if ((_hasBits0 & 1) != 0) { return startSecond_; } else { return StartSecondDefaultValue; } }
    set {
      _hasBits0 |= 1;
      startSecond_ = value;
    }
  }
  /// <summary>Gets whether the "startSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartSecond {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "startSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartSecond() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "endSecond" field.</summary>
  public const int EndSecondFieldNumber = 4;
  private readonly static uint EndSecondDefaultValue = 0;

  private uint endSecond_;
  /// <summary>
  /// Interval end, specified in seconds starting from SUNDAY 00:00 in specified time zone (exclusive from the interval).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint EndSecond {
    get { if ((_hasBits0 & 2) != 0) { return endSecond_; } else { return EndSecondDefaultValue; } }
    set {
      _hasBits0 |= 2;
      endSecond_ = value;
    }
  }
  /// <summary>Gets whether the "endSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEndSecond {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "endSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEndSecond() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAInterval);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAInterval other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartSecond != other.StartSecond) return false;
    if (EndSecond != other.EndSecond) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasStartSecond) hash ^= StartSecond.GetHashCode();
    if (HasEndSecond) hash ^= EndSecond.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasStartSecond) {
      output.WriteRawTag(24);
      output.WriteUInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(32);
      output.WriteUInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasStartSecond) {
      output.WriteRawTag(24);
      output.WriteUInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(32);
      output.WriteUInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasStartSecond) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartSecond);
    }
    if (HasEndSecond) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndSecond);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAInterval other) {
    if (other == null) {
      return;
    }
    if (other.HasStartSecond) {
      StartSecond = other.StartSecond;
    }
    if (other.HasEndSecond) {
      EndSecond = other.EndSecond;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 24: {
          StartSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          EndSecond = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 24: {
          StartSecond = input.ReadUInt32();
          break;
        }
        case 32: {
          EndSecond = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trading account entity. 
/// </summary>
public sealed partial class ProtoOATrader : pb::IMessage<ProtoOATrader>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOATrader> _parser = new pb::MessageParser<ProtoOATrader>(() => new ProtoOATrader());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOATrader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrader(ProtoOATrader other) : this() {
    _hasBits0 = other._hasBits0;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    balance_ = other.balance_;
    balanceVersion_ = other.balanceVersion_;
    managerBonus_ = other.managerBonus_;
    ibBonus_ = other.ibBonus_;
    nonWithdrawableBonus_ = other.nonWithdrawableBonus_;
    accessRights_ = other.accessRights_;
    depositAssetId_ = other.depositAssetId_;
    swapFree_ = other.swapFree_;
    leverageInCents_ = other.leverageInCents_;
    totalMarginCalculationType_ = other.totalMarginCalculationType_;
    maxLeverage_ = other.maxLeverage_;
    frenchRisk_ = other.frenchRisk_;
    traderLogin_ = other.traderLogin_;
    accountType_ = other.accountType_;
    brokerName_ = other.brokerName_;
    registrationTimestamp_ = other.registrationTimestamp_;
    isLimitedRisk_ = other.isLimitedRisk_;
    limitedRiskMarginCalculationStrategy_ = other.limitedRiskMarginCalculationStrategy_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrader Clone() {
    return new ProtoOATrader(this);
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 1;
  private readonly static long CtidTraderAccountIdDefaultValue = 0L;

  private long ctidTraderAccountId_;
  /// <summary>
  /// The unique Trader's Account ID used to match the responses to the Trader's Account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CtidTraderAccountId {
    get { if ((_hasBits0 & 1) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 2;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Current account balance.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 2) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 2;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 3;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version used to identify the final balance. Increments each time when the trader's account balance is changed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 4) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "managerBonus" field.</summary>
  public const int ManagerBonusFieldNumber = 4;
  private readonly static long ManagerBonusDefaultValue = 0L;

  private long managerBonus_;
  /// <summary>
  /// Amount of broker's bonus allocated to the account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerBonus {
    get { if ((_hasBits0 & 8) != 0) { return managerBonus_; } else { return ManagerBonusDefaultValue; } }
    set {
      _hasBits0 |= 8;
      managerBonus_ = value;
    }
  }
  /// <summary>Gets whether the "managerBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerBonus {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "managerBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerBonus() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ibBonus" field.</summary>
  public const int IbBonusFieldNumber = 5;
  private readonly static long IbBonusDefaultValue = 0L;

  private long ibBonus_;
  /// <summary>
  /// Amount of introducing broker bonus allocated to the account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbBonus {
    get { if ((_hasBits0 & 16) != 0) { return ibBonus_; } else { return IbBonusDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ibBonus_ = value;
    }
  }
  /// <summary>Gets whether the "ibBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbBonus {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ibBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbBonus() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "nonWithdrawableBonus" field.</summary>
  public const int NonWithdrawableBonusFieldNumber = 6;
  private readonly static long NonWithdrawableBonusDefaultValue = 0L;

  private long nonWithdrawableBonus_;
  /// <summary>
  /// Broker's bonus that cannot be withdrew from the account as cash.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long NonWithdrawableBonus {
    get { if ((_hasBits0 & 32) != 0) { return nonWithdrawableBonus_; } else { return NonWithdrawableBonusDefaultValue; } }
    set {
      _hasBits0 |= 32;
      nonWithdrawableBonus_ = value;
    }
  }
  /// <summary>Gets whether the "nonWithdrawableBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNonWithdrawableBonus {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "nonWithdrawableBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNonWithdrawableBonus() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "accessRights" field.</summary>
  public const int AccessRightsFieldNumber = 7;
  private readonly static global::ProtoOAAccessRights AccessRightsDefaultValue = global::ProtoOAAccessRights.FullAccess;

  private global::ProtoOAAccessRights accessRights_;
  /// <summary>
  /// Access rights that an owner has to the account in cTrader platform. See ProtoOAAccessRights for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAAccessRights AccessRights {
    get { if ((_hasBits0 & 64) != 0) { return accessRights_; } else { return AccessRightsDefaultValue; } }
    set {
      _hasBits0 |= 64;
      accessRights_ = value;
    }
  }
  /// <summary>Gets whether the "accessRights" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccessRights {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "accessRights" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAccessRights() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "depositAssetId" field.</summary>
  public const int DepositAssetIdFieldNumber = 8;
  private readonly static long DepositAssetIdDefaultValue = 0L;

  private long depositAssetId_;
  /// <summary>
  /// Deposit currency of the account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DepositAssetId {
    get { if ((_hasBits0 & 128) != 0) { return depositAssetId_; } else { return DepositAssetIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      depositAssetId_ = value;
    }
  }
  /// <summary>Gets whether the "depositAssetId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDepositAssetId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "depositAssetId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDepositAssetId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "swapFree" field.</summary>
  public const int SwapFreeFieldNumber = 9;
  private readonly static bool SwapFreeDefaultValue = false;

  private bool swapFree_;
  /// <summary>
  /// If TRUE then account is Shariah compliant.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SwapFree {
    get { if ((_hasBits0 & 256) != 0) { return swapFree_; } else { return SwapFreeDefaultValue; } }
    set {
      _hasBits0 |= 256;
      swapFree_ = value;
    }
  }
  /// <summary>Gets whether the "swapFree" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwapFree {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "swapFree" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwapFree() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "leverageInCents" field.</summary>
  public const int LeverageInCentsFieldNumber = 10;
  private readonly static uint LeverageInCentsDefaultValue = 0;

  private uint leverageInCents_;
  /// <summary>
  /// Account leverage (e.g. If leverage = 1:50 then value = 5000).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint LeverageInCents {
    get { if ((_hasBits0 & 512) != 0) { return leverageInCents_; } else { return LeverageInCentsDefaultValue; } }
    set {
      _hasBits0 |= 512;
      leverageInCents_ = value;
    }
  }
  /// <summary>Gets whether the "leverageInCents" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLeverageInCents {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "leverageInCents" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLeverageInCents() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "totalMarginCalculationType" field.</summary>
  public const int TotalMarginCalculationTypeFieldNumber = 11;
  private readonly static global::ProtoOATotalMarginCalculationType TotalMarginCalculationTypeDefaultValue = global::ProtoOATotalMarginCalculationType.Max;

  private global::ProtoOATotalMarginCalculationType totalMarginCalculationType_;
  /// <summary>
  /// Margin computation type for the account (MAX, SUM, NET).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATotalMarginCalculationType TotalMarginCalculationType {
    get { if ((_hasBits0 & 1024) != 0) { return totalMarginCalculationType_; } else { return TotalMarginCalculationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      totalMarginCalculationType_ = value;
    }
  }
  /// <summary>Gets whether the "totalMarginCalculationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTotalMarginCalculationType {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "totalMarginCalculationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTotalMarginCalculationType() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "maxLeverage" field.</summary>
  public const int MaxLeverageFieldNumber = 12;
  private readonly static uint MaxLeverageDefaultValue = 0;

  private uint maxLeverage_;
  /// <summary>
  /// Maximum allowed leverage for the account. Used as validation when a Trader can change leverage value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MaxLeverage {
    get { if ((_hasBits0 & 2048) != 0) { return maxLeverage_; } else { return MaxLeverageDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      maxLeverage_ = value;
    }
  }
  /// <summary>Gets whether the "maxLeverage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMaxLeverage {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "maxLeverage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMaxLeverage() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "frenchRisk" field.</summary>
  public const int FrenchRiskFieldNumber = 13;
  private readonly static bool FrenchRiskDefaultValue = false;

  private bool frenchRisk_;
  /// <summary>
  /// If TRUE then account is AMF compliant. Use isLimitedRisk and limitedRiskMarginCalculationStrategy.
  /// </summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool FrenchRisk {
    get { if ((_hasBits0 & 4096) != 0) { return frenchRisk_; } else { return FrenchRiskDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      frenchRisk_ = value;
    }
  }
  /// <summary>Gets whether the "frenchRisk" field is set</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFrenchRisk {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "frenchRisk" field</summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFrenchRisk() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "traderLogin" field.</summary>
  public const int TraderLoginFieldNumber = 14;
  private readonly static long TraderLoginDefaultValue = 0L;

  private long traderLogin_;
  /// <summary>
  /// ID of the account that is unique per server (Broker).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderLogin {
    get { if ((_hasBits0 & 8192) != 0) { return traderLogin_; } else { return TraderLoginDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      traderLogin_ = value;
    }
  }
  /// <summary>Gets whether the "traderLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderLogin {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "traderLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderLogin() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "accountType" field.</summary>
  public const int AccountTypeFieldNumber = 15;
  private readonly static global::ProtoOAAccountType AccountTypeDefaultValue = global::ProtoOAAccountType.Hedged;

  private global::ProtoOAAccountType accountType_;
  /// <summary>
  /// Account type: HEDGED, NETTED, etc.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAAccountType AccountType {
    get { if ((_hasBits0 & 16384) != 0) { return accountType_; } else { return AccountTypeDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      accountType_ = value;
    }
  }
  /// <summary>Gets whether the "accountType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAccountType {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "accountType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAccountType() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "brokerName" field.</summary>
  public const int BrokerNameFieldNumber = 16;
  private readonly static string BrokerNameDefaultValue = "";

  private string brokerName_;
  /// <summary>
  /// Some whitelabel assigned to trader by broker at the moment of account creation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BrokerName {
    get { return brokerName_ ?? BrokerNameDefaultValue; }
    set {
      brokerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "brokerName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBrokerName {
    get { return brokerName_ != null; }
  }
  /// <summary>Clears the value of the "brokerName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBrokerName() {
    brokerName_ = null;
  }

  /// <summary>Field number for the "registrationTimestamp" field.</summary>
  public const int RegistrationTimestampFieldNumber = 17;
  private readonly static long RegistrationTimestampDefaultValue = 0L;

  private long registrationTimestamp_;
  /// <summary>
  /// Unix timestamp of the account registration. Should be used as minimal date in historical data requests.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RegistrationTimestamp {
    get { if ((_hasBits0 & 32768) != 0) { return registrationTimestamp_; } else { return RegistrationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      registrationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "registrationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRegistrationTimestamp {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "registrationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRegistrationTimestamp() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "isLimitedRisk" field.</summary>
  public const int IsLimitedRiskFieldNumber = 18;
  private readonly static bool IsLimitedRiskDefaultValue = false;

  private bool isLimitedRisk_;
  /// <summary>
  /// If TRUE then account is compliant to use specific margin calculation strategy.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLimitedRisk {
    get { if ((_hasBits0 & 65536) != 0) { return isLimitedRisk_; } else { return IsLimitedRiskDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      isLimitedRisk_ = value;
    }
  }
  /// <summary>Gets whether the "isLimitedRisk" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsLimitedRisk {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "isLimitedRisk" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsLimitedRisk() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "limitedRiskMarginCalculationStrategy" field.</summary>
  public const int LimitedRiskMarginCalculationStrategyFieldNumber = 19;
  private readonly static global::ProtoOALimitedRiskMarginCalculationStrategy LimitedRiskMarginCalculationStrategyDefaultValue = global::ProtoOALimitedRiskMarginCalculationStrategy.AccordingToLeverage;

  private global::ProtoOALimitedRiskMarginCalculationStrategy limitedRiskMarginCalculationStrategy_;
  /// <summary>
  /// Special strategy used in margin calculations for this account (if account isLimitedRisk).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOALimitedRiskMarginCalculationStrategy LimitedRiskMarginCalculationStrategy {
    get { if ((_hasBits0 & 131072) != 0) { return limitedRiskMarginCalculationStrategy_; } else { return LimitedRiskMarginCalculationStrategyDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      limitedRiskMarginCalculationStrategy_ = value;
    }
  }
  /// <summary>Gets whether the "limitedRiskMarginCalculationStrategy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitedRiskMarginCalculationStrategy {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "limitedRiskMarginCalculationStrategy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitedRiskMarginCalculationStrategy() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 20;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects balance, managerBonus, ibBonus, nonWithdrawableBonus.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 262144) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~262144;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATrader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOATrader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (Balance != other.Balance) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (ManagerBonus != other.ManagerBonus) return false;
    if (IbBonus != other.IbBonus) return false;
    if (NonWithdrawableBonus != other.NonWithdrawableBonus) return false;
    if (AccessRights != other.AccessRights) return false;
    if (DepositAssetId != other.DepositAssetId) return false;
    if (SwapFree != other.SwapFree) return false;
    if (LeverageInCents != other.LeverageInCents) return false;
    if (TotalMarginCalculationType != other.TotalMarginCalculationType) return false;
    if (MaxLeverage != other.MaxLeverage) return false;
    if (FrenchRisk != other.FrenchRisk) return false;
    if (TraderLogin != other.TraderLogin) return false;
    if (AccountType != other.AccountType) return false;
    if (BrokerName != other.BrokerName) return false;
    if (RegistrationTimestamp != other.RegistrationTimestamp) return false;
    if (IsLimitedRisk != other.IsLimitedRisk) return false;
    if (LimitedRiskMarginCalculationStrategy != other.LimitedRiskMarginCalculationStrategy) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasManagerBonus) hash ^= ManagerBonus.GetHashCode();
    if (HasIbBonus) hash ^= IbBonus.GetHashCode();
    if (HasNonWithdrawableBonus) hash ^= NonWithdrawableBonus.GetHashCode();
    if (HasAccessRights) hash ^= AccessRights.GetHashCode();
    if (HasDepositAssetId) hash ^= DepositAssetId.GetHashCode();
    if (HasSwapFree) hash ^= SwapFree.GetHashCode();
    if (HasLeverageInCents) hash ^= LeverageInCents.GetHashCode();
    if (HasTotalMarginCalculationType) hash ^= TotalMarginCalculationType.GetHashCode();
    if (HasMaxLeverage) hash ^= MaxLeverage.GetHashCode();
    if (HasFrenchRisk) hash ^= FrenchRisk.GetHashCode();
    if (HasTraderLogin) hash ^= TraderLogin.GetHashCode();
    if (HasAccountType) hash ^= AccountType.GetHashCode();
    if (HasBrokerName) hash ^= BrokerName.GetHashCode();
    if (HasRegistrationTimestamp) hash ^= RegistrationTimestamp.GetHashCode();
    if (HasIsLimitedRisk) hash ^= IsLimitedRisk.GetHashCode();
    if (HasLimitedRiskMarginCalculationStrategy) hash ^= LimitedRiskMarginCalculationStrategy.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(8);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasBalance) {
      output.WriteRawTag(16);
      output.WriteInt64(Balance);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(24);
      output.WriteInt64(BalanceVersion);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerBonus);
    }
    if (HasIbBonus) {
      output.WriteRawTag(40);
      output.WriteInt64(IbBonus);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(48);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasAccessRights) {
      output.WriteRawTag(56);
      output.WriteEnum((int) AccessRights);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(64);
      output.WriteInt64(DepositAssetId);
    }
    if (HasSwapFree) {
      output.WriteRawTag(72);
      output.WriteBool(SwapFree);
    }
    if (HasLeverageInCents) {
      output.WriteRawTag(80);
      output.WriteUInt32(LeverageInCents);
    }
    if (HasTotalMarginCalculationType) {
      output.WriteRawTag(88);
      output.WriteEnum((int) TotalMarginCalculationType);
    }
    if (HasMaxLeverage) {
      output.WriteRawTag(96);
      output.WriteUInt32(MaxLeverage);
    }
    if (HasFrenchRisk) {
      output.WriteRawTag(104);
      output.WriteBool(FrenchRisk);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(112);
      output.WriteInt64(TraderLogin);
    }
    if (HasAccountType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) AccountType);
    }
    if (HasBrokerName) {
      output.WriteRawTag(130, 1);
      output.WriteString(BrokerName);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasIsLimitedRisk) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsLimitedRisk);
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      output.WriteRawTag(152, 1);
      output.WriteEnum((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(8);
      output.WriteInt64(CtidTraderAccountId);
    }
    if (HasBalance) {
      output.WriteRawTag(16);
      output.WriteInt64(Balance);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(24);
      output.WriteInt64(BalanceVersion);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerBonus);
    }
    if (HasIbBonus) {
      output.WriteRawTag(40);
      output.WriteInt64(IbBonus);
    }
    if (HasNonWithdrawableBonus) {
      output.WriteRawTag(48);
      output.WriteInt64(NonWithdrawableBonus);
    }
    if (HasAccessRights) {
      output.WriteRawTag(56);
      output.WriteEnum((int) AccessRights);
    }
    if (HasDepositAssetId) {
      output.WriteRawTag(64);
      output.WriteInt64(DepositAssetId);
    }
    if (HasSwapFree) {
      output.WriteRawTag(72);
      output.WriteBool(SwapFree);
    }
    if (HasLeverageInCents) {
      output.WriteRawTag(80);
      output.WriteUInt32(LeverageInCents);
    }
    if (HasTotalMarginCalculationType) {
      output.WriteRawTag(88);
      output.WriteEnum((int) TotalMarginCalculationType);
    }
    if (HasMaxLeverage) {
      output.WriteRawTag(96);
      output.WriteUInt32(MaxLeverage);
    }
    if (HasFrenchRisk) {
      output.WriteRawTag(104);
      output.WriteBool(FrenchRisk);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(112);
      output.WriteInt64(TraderLogin);
    }
    if (HasAccountType) {
      output.WriteRawTag(120);
      output.WriteEnum((int) AccountType);
    }
    if (HasBrokerName) {
      output.WriteRawTag(130, 1);
      output.WriteString(BrokerName);
    }
    if (HasRegistrationTimestamp) {
      output.WriteRawTag(136, 1);
      output.WriteInt64(RegistrationTimestamp);
    }
    if (HasIsLimitedRisk) {
      output.WriteRawTag(144, 1);
      output.WriteBool(IsLimitedRisk);
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      output.WriteRawTag(152, 1);
      output.WriteEnum((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CtidTraderAccountId);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasBalanceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasManagerBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerBonus);
    }
    if (HasIbBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IbBonus);
    }
    if (HasNonWithdrawableBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NonWithdrawableBonus);
    }
    if (HasAccessRights) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccessRights);
    }
    if (HasDepositAssetId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DepositAssetId);
    }
    if (HasSwapFree) {
      size += 1 + 1;
    }
    if (HasLeverageInCents) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeverageInCents);
    }
    if (HasTotalMarginCalculationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TotalMarginCalculationType);
    }
    if (HasMaxLeverage) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLeverage);
    }
    if (HasFrenchRisk) {
      size += 1 + 1;
    }
    if (HasTraderLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderLogin);
    }
    if (HasAccountType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccountType);
    }
    if (HasBrokerName) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BrokerName);
    }
    if (HasRegistrationTimestamp) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RegistrationTimestamp);
    }
    if (HasIsLimitedRisk) {
      size += 2 + 1;
    }
    if (HasLimitedRiskMarginCalculationStrategy) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitedRiskMarginCalculationStrategy);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOATrader other) {
    if (other == null) {
      return;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasManagerBonus) {
      ManagerBonus = other.ManagerBonus;
    }
    if (other.HasIbBonus) {
      IbBonus = other.IbBonus;
    }
    if (other.HasNonWithdrawableBonus) {
      NonWithdrawableBonus = other.NonWithdrawableBonus;
    }
    if (other.HasAccessRights) {
      AccessRights = other.AccessRights;
    }
    if (other.HasDepositAssetId) {
      DepositAssetId = other.DepositAssetId;
    }
    if (other.HasSwapFree) {
      SwapFree = other.SwapFree;
    }
    if (other.HasLeverageInCents) {
      LeverageInCents = other.LeverageInCents;
    }
    if (other.HasTotalMarginCalculationType) {
      TotalMarginCalculationType = other.TotalMarginCalculationType;
    }
    if (other.HasMaxLeverage) {
      MaxLeverage = other.MaxLeverage;
    }
    if (other.HasFrenchRisk) {
      FrenchRisk = other.FrenchRisk;
    }
    if (other.HasTraderLogin) {
      TraderLogin = other.TraderLogin;
    }
    if (other.HasAccountType) {
      AccountType = other.AccountType;
    }
    if (other.HasBrokerName) {
      BrokerName = other.BrokerName;
    }
    if (other.HasRegistrationTimestamp) {
      RegistrationTimestamp = other.RegistrationTimestamp;
    }
    if (other.HasIsLimitedRisk) {
      IsLimitedRisk = other.IsLimitedRisk;
    }
    if (other.HasLimitedRiskMarginCalculationStrategy) {
      LimitedRiskMarginCalculationStrategy = other.LimitedRiskMarginCalculationStrategy;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 16: {
          Balance = input.ReadInt64();
          break;
        }
        case 24: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 40: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 48: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 56: {
          AccessRights = (global::ProtoOAAccessRights) input.ReadEnum();
          break;
        }
        case 64: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 72: {
          SwapFree = input.ReadBool();
          break;
        }
        case 80: {
          LeverageInCents = input.ReadUInt32();
          break;
        }
        case 88: {
          TotalMarginCalculationType = (global::ProtoOATotalMarginCalculationType) input.ReadEnum();
          break;
        }
        case 96: {
          MaxLeverage = input.ReadUInt32();
          break;
        }
        case 104: {
          FrenchRisk = input.ReadBool();
          break;
        }
        case 112: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 120: {
          AccountType = (global::ProtoOAAccountType) input.ReadEnum();
          break;
        }
        case 130: {
          BrokerName = input.ReadString();
          break;
        }
        case 136: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 144: {
          IsLimitedRisk = input.ReadBool();
          break;
        }
        case 152: {
          LimitedRiskMarginCalculationStrategy = (global::ProtoOALimitedRiskMarginCalculationStrategy) input.ReadEnum();
          break;
        }
        case 160: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CtidTraderAccountId = input.ReadInt64();
          break;
        }
        case 16: {
          Balance = input.ReadInt64();
          break;
        }
        case 24: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 40: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 48: {
          NonWithdrawableBonus = input.ReadInt64();
          break;
        }
        case 56: {
          AccessRights = (global::ProtoOAAccessRights) input.ReadEnum();
          break;
        }
        case 64: {
          DepositAssetId = input.ReadInt64();
          break;
        }
        case 72: {
          SwapFree = input.ReadBool();
          break;
        }
        case 80: {
          LeverageInCents = input.ReadUInt32();
          break;
        }
        case 88: {
          TotalMarginCalculationType = (global::ProtoOATotalMarginCalculationType) input.ReadEnum();
          break;
        }
        case 96: {
          MaxLeverage = input.ReadUInt32();
          break;
        }
        case 104: {
          FrenchRisk = input.ReadBool();
          break;
        }
        case 112: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 120: {
          AccountType = (global::ProtoOAAccountType) input.ReadEnum();
          break;
        }
        case 130: {
          BrokerName = input.ReadString();
          break;
        }
        case 136: {
          RegistrationTimestamp = input.ReadInt64();
          break;
        }
        case 144: {
          IsLimitedRisk = input.ReadBool();
          break;
        }
        case 152: {
          LimitedRiskMarginCalculationStrategy = (global::ProtoOALimitedRiskMarginCalculationStrategy) input.ReadEnum();
          break;
        }
        case 160: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trade position entity. 
/// </summary>
public sealed partial class ProtoOAPosition : pb::IMessage<ProtoOAPosition>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAPosition> _parser = new pb::MessageParser<ProtoOAPosition>(() => new ProtoOAPosition());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAPosition> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAPosition() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAPosition(ProtoOAPosition other) : this() {
    _hasBits0 = other._hasBits0;
    positionId_ = other.positionId_;
    tradeData_ = other.tradeData_ != null ? other.tradeData_.Clone() : null;
    positionStatus_ = other.positionStatus_;
    swap_ = other.swap_;
    price_ = other.price_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    commission_ = other.commission_;
    marginRate_ = other.marginRate_;
    mirroringCommission_ = other.mirroringCommission_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    usedMargin_ = other.usedMargin_;
    stopLossTriggerMethod_ = other.stopLossTriggerMethod_;
    moneyDigits_ = other.moneyDigits_;
    trailingStopLoss_ = other.trailingStopLoss_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAPosition Clone() {
    return new ProtoOAPosition(this);
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 1;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// The unique ID of the position. Note: trader might have two positions with the same id if positions are taken from accounts from different brokers.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 1) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tradeData" field.</summary>
  public const int TradeDataFieldNumber = 2;
  private global::ProtoOATradeData tradeData_;
  /// <summary>
  /// Position details. See ProtoOATradeData for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATradeData TradeData {
    get { return tradeData_; }
    set {
      tradeData_ = value;
    }
  }

  /// <summary>Field number for the "positionStatus" field.</summary>
  public const int PositionStatusFieldNumber = 3;
  private readonly static global::ProtoOAPositionStatus PositionStatusDefaultValue = global::ProtoOAPositionStatus.PositionStatusOpen;

  private global::ProtoOAPositionStatus positionStatus_;
  /// <summary>
  /// Current status of the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAPositionStatus PositionStatus {
    get { if ((_hasBits0 & 2) != 0) { return positionStatus_; } else { return PositionStatusDefaultValue; } }
    set {
      _hasBits0 |= 2;
      positionStatus_ = value;
    }
  }
  /// <summary>Gets whether the "positionStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionStatus {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "positionStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionStatus() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swap" field.</summary>
  public const int SwapFieldNumber = 4;
  private readonly static long SwapDefaultValue = 0L;

  private long swap_;
  /// <summary>
  /// Total amount of charged swap on open position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Swap {
    get { if ((_hasBits0 & 4) != 0) { return swap_; } else { return SwapDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swap_ = value;
    }
  }
  /// <summary>Gets whether the "swap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwap {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwap() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 5;
  private readonly static double PriceDefaultValue = 0D;

  private double price_;
  /// <summary>
  /// VWAP price of the position based on all executions (orders) linked to the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Price {
    get { if ((_hasBits0 & 8) != 0) { return price_; } else { return PriceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      price_ = value;
    }
  }
  /// <summary>Gets whether the "price" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPrice {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "price" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPrice() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 6;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Current stop loss price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopLoss {
    get { if ((_hasBits0 & 16) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 16;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 7;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Current take profit price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TakeProfit {
    get { if ((_hasBits0 & 32) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 32;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 8;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// Time of the last change of the position, including amend SL/TP of the position, execution of related order, cancel or related order, etc.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 9;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Current unrealized commission related to the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 128) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 128;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "marginRate" field.</summary>
  public const int MarginRateFieldNumber = 10;
  private readonly static double MarginRateDefaultValue = 0D;

  private double marginRate_;
  /// <summary>
  /// Rate for used margin computation. Represented as Base/Deposit.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginRate {
    get { if ((_hasBits0 & 256) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
    set {
      _hasBits0 |= 256;
      marginRate_ = value;
    }
  }
  /// <summary>Gets whether the "marginRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginRate {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "marginRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginRate() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "mirroringCommission" field.</summary>
  public const int MirroringCommissionFieldNumber = 11;
  private readonly static long MirroringCommissionDefaultValue = 0L;

  private long mirroringCommission_;
  /// <summary>
  /// Amount of unrealized commission related to following of strategy provider.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MirroringCommission {
    get { if ((_hasBits0 & 512) != 0) { return mirroringCommission_; } else { return MirroringCommissionDefaultValue; } }
    set {
      _hasBits0 |= 512;
      mirroringCommission_ = value;
    }
  }
  /// <summary>Gets whether the "mirroringCommission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMirroringCommission {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "mirroringCommission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMirroringCommission() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 12;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then position's stop loss is guaranteedStopLoss.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 1024) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "usedMargin" field.</summary>
  public const int UsedMarginFieldNumber = 13;
  private readonly static ulong UsedMarginDefaultValue = 0UL;

  private ulong usedMargin_;
  /// <summary>
  /// Amount of margin used for the position in deposit currency.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong UsedMargin {
    get { if ((_hasBits0 & 2048) != 0) { return usedMargin_; } else { return UsedMarginDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      usedMargin_ = value;
    }
  }
  /// <summary>Gets whether the "usedMargin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUsedMargin {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "usedMargin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUsedMargin() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "stopLossTriggerMethod" field.</summary>
  public const int StopLossTriggerMethodFieldNumber = 14;
  private readonly static global::ProtoOAOrderTriggerMethod StopLossTriggerMethodDefaultValue = global::ProtoOAOrderTriggerMethod.Trade;

  private global::ProtoOAOrderTriggerMethod stopLossTriggerMethod_;
  /// <summary>
  /// Stop trigger method for SL/TP of the position.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAOrderTriggerMethod StopLossTriggerMethod {
    get { if ((_hasBits0 & 4096) != 0) { return stopLossTriggerMethod_; } else { return StopLossTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      stopLossTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopLossTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLossTriggerMethod {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "stopLossTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLossTriggerMethod() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 15;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects swap, commission, mirroringCommission, usedMargin.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 8192) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 16;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  ///If TRUE then the Trailing Stop Loss is applied.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 16384) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~16384;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAPosition);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAPosition other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PositionId != other.PositionId) return false;
    if (!object.Equals(TradeData, other.TradeData)) return false;
    if (PositionStatus != other.PositionStatus) return false;
    if (Swap != other.Swap) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (Commission != other.Commission) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
    if (MirroringCommission != other.MirroringCommission) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (UsedMargin != other.UsedMargin) return false;
    if (StopLossTriggerMethod != other.StopLossTriggerMethod) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (tradeData_ != null) hash ^= TradeData.GetHashCode();
    if (HasPositionStatus) hash ^= PositionStatus.GetHashCode();
    if (HasSwap) hash ^= Swap.GetHashCode();
    if (HasPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
    if (HasMirroringCommission) hash ^= MirroringCommission.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasUsedMargin) hash ^= UsedMargin.GetHashCode();
    if (HasStopLossTriggerMethod) hash ^= StopLossTriggerMethod.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPositionId) {
      output.WriteRawTag(8);
      output.WriteInt64(PositionId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasPositionStatus) {
      output.WriteRawTag(24);
      output.WriteEnum((int) PositionStatus);
    }
    if (HasSwap) {
      output.WriteRawTag(32);
      output.WriteInt64(Swap);
    }
    if (HasPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(49);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(57);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasCommission) {
      output.WriteRawTag(72);
      output.WriteInt64(Commission);
    }
    if (HasMarginRate) {
      output.WriteRawTag(81);
      output.WriteDouble(MarginRate);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(88);
      output.WriteInt64(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(96);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasUsedMargin) {
      output.WriteRawTag(104);
      output.WriteUInt64(UsedMargin);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(112);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(120);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(128, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPositionId) {
      output.WriteRawTag(8);
      output.WriteInt64(PositionId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasPositionStatus) {
      output.WriteRawTag(24);
      output.WriteEnum((int) PositionStatus);
    }
    if (HasSwap) {
      output.WriteRawTag(32);
      output.WriteInt64(Swap);
    }
    if (HasPrice) {
      output.WriteRawTag(41);
      output.WriteDouble(Price);
    }
    if (HasStopLoss) {
      output.WriteRawTag(49);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(57);
      output.WriteDouble(TakeProfit);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasCommission) {
      output.WriteRawTag(72);
      output.WriteInt64(Commission);
    }
    if (HasMarginRate) {
      output.WriteRawTag(81);
      output.WriteDouble(MarginRate);
    }
    if (HasMirroringCommission) {
      output.WriteRawTag(88);
      output.WriteInt64(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(96);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasUsedMargin) {
      output.WriteRawTag(104);
      output.WriteUInt64(UsedMargin);
    }
    if (HasStopLossTriggerMethod) {
      output.WriteRawTag(112);
      output.WriteEnum((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(120);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(128, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (tradeData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeData);
    }
    if (HasPositionStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionStatus);
    }
    if (HasSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Swap);
    }
    if (HasPrice) {
      size += 1 + 8;
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 1 + 8;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasMarginRate) {
      size += 1 + 8;
    }
    if (HasMirroringCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MirroringCommission);
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasUsedMargin) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UsedMargin);
    }
    if (HasStopLossTriggerMethod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StopLossTriggerMethod);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasTrailingStopLoss) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAPosition other) {
    if (other == null) {
      return;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.tradeData_ != null) {
      if (tradeData_ == null) {
        TradeData = new global::ProtoOATradeData();
      }
      TradeData.MergeFrom(other.TradeData);
    }
    if (other.HasPositionStatus) {
      PositionStatus = other.PositionStatus;
    }
    if (other.HasSwap) {
      Swap = other.Swap;
    }
    if (other.HasPrice) {
      Price = other.Price;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasMarginRate) {
      MarginRate = other.MarginRate;
    }
    if (other.HasMirroringCommission) {
      MirroringCommission = other.MirroringCommission;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasUsedMargin) {
      UsedMargin = other.UsedMargin;
    }
    if (other.HasStopLossTriggerMethod) {
      StopLossTriggerMethod = other.StopLossTriggerMethod;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PositionId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoOATradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          PositionStatus = (global::ProtoOAPositionStatus) input.ReadEnum();
          break;
        }
        case 32: {
          Swap = input.ReadInt64();
          break;
        }
        case 41: {
          Price = input.ReadDouble();
          break;
        }
        case 49: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 57: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          Commission = input.ReadInt64();
          break;
        }
        case 81: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 88: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 96: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 104: {
          UsedMargin = input.ReadUInt64();
          break;
        }
        case 112: {
          StopLossTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 120: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 128: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          PositionId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoOATradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          PositionStatus = (global::ProtoOAPositionStatus) input.ReadEnum();
          break;
        }
        case 32: {
          Swap = input.ReadInt64();
          break;
        }
        case 41: {
          Price = input.ReadDouble();
          break;
        }
        case 49: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 57: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 64: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          Commission = input.ReadInt64();
          break;
        }
        case 81: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 88: {
          MirroringCommission = input.ReadInt64();
          break;
        }
        case 96: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 104: {
          UsedMargin = input.ReadUInt64();
          break;
        }
        case 112: {
          StopLossTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
        case 120: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 128: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Position/order trading details entity. 
/// </summary>
public sealed partial class ProtoOATradeData : pb::IMessage<ProtoOATradeData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOATradeData> _parser = new pb::MessageParser<ProtoOATradeData>(() => new ProtoOATradeData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOATradeData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATradeData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATradeData(ProtoOATradeData other) : this() {
    _hasBits0 = other._hasBits0;
    symbolId_ = other.symbolId_;
    volume_ = other.volume_;
    tradeSide_ = other.tradeSide_;
    openTimestamp_ = other.openTimestamp_;
    label_ = other.label_;
    guaranteedStopLoss_ = other.guaranteedStopLoss_;
    comment_ = other.comment_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATradeData Clone() {
    return new ProtoOATradeData(this);
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 1;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 1) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 2;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume in cents.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 2) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 3;
  private readonly static global::ProtoOATradeSide TradeSideDefaultValue = global::ProtoOATradeSide.Buy;

  private global::ProtoOATradeSide tradeSide_;
  /// <summary>
  /// Buy, Sell.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATradeSide TradeSide {
    get { if ((_hasBits0 & 4) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 4;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "openTimestamp" field.</summary>
  public const int OpenTimestampFieldNumber = 4;
  private readonly static long OpenTimestampDefaultValue = 0L;

  private long openTimestamp_;
  /// <summary>
  /// Time when position was opened or order was created.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OpenTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return openTimestamp_; } else { return OpenTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      openTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "openTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOpenTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "openTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOpenTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 5;
  private readonly static string LabelDefaultValue = "";

  private string label_;
  /// <summary>
  /// Text label specified during order request.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Label {
    get { return label_ ?? LabelDefaultValue; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "label" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLabel {
    get { return label_ != null; }
  }
  /// <summary>Clears the value of the "label" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLabel() {
    label_ = null;
  }

  /// <summary>Field number for the "guaranteedStopLoss" field.</summary>
  public const int GuaranteedStopLossFieldNumber = 6;
  private readonly static bool GuaranteedStopLossDefaultValue = false;

  private bool guaranteedStopLoss_;
  /// <summary>
  /// If TRUE then position/order stop loss is guaranteedStopLoss.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GuaranteedStopLoss {
    get { if ((_hasBits0 & 16) != 0) { return guaranteedStopLoss_; } else { return GuaranteedStopLossDefaultValue; } }
    set {
      _hasBits0 |= 16;
      guaranteedStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "guaranteedStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGuaranteedStopLoss {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "guaranteedStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGuaranteedStopLoss() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "comment" field.</summary>
  public const int CommentFieldNumber = 7;
  private readonly static string CommentDefaultValue = "";

  private string comment_;
  /// <summary>
  /// User-specified comment.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Comment {
    get { return comment_ ?? CommentDefaultValue; }
    set {
      comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "comment" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasComment {
    get { return comment_ != null; }
  }
  /// <summary>Clears the value of the "comment" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearComment() {
    comment_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATradeData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOATradeData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SymbolId != other.SymbolId) return false;
    if (Volume != other.Volume) return false;
    if (TradeSide != other.TradeSide) return false;
    if (OpenTimestamp != other.OpenTimestamp) return false;
    if (Label != other.Label) return false;
    if (GuaranteedStopLoss != other.GuaranteedStopLoss) return false;
    if (Comment != other.Comment) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasOpenTimestamp) hash ^= OpenTimestamp.GetHashCode();
    if (HasLabel) hash ^= Label.GetHashCode();
    if (HasGuaranteedStopLoss) hash ^= GuaranteedStopLoss.GetHashCode();
    if (HasComment) hash ^= Comment.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasTradeSide) {
      output.WriteRawTag(24);
      output.WriteEnum((int) TradeSide);
    }
    if (HasOpenTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(OpenTimestamp);
    }
    if (HasLabel) {
      output.WriteRawTag(42);
      output.WriteString(Label);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(48);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasSymbolId) {
      output.WriteRawTag(8);
      output.WriteInt64(SymbolId);
    }
    if (HasVolume) {
      output.WriteRawTag(16);
      output.WriteInt64(Volume);
    }
    if (HasTradeSide) {
      output.WriteRawTag(24);
      output.WriteEnum((int) TradeSide);
    }
    if (HasOpenTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(OpenTimestamp);
    }
    if (HasLabel) {
      output.WriteRawTag(42);
      output.WriteString(Label);
    }
    if (HasGuaranteedStopLoss) {
      output.WriteRawTag(48);
      output.WriteBool(GuaranteedStopLoss);
    }
    if (HasComment) {
      output.WriteRawTag(58);
      output.WriteString(Comment);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasOpenTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpenTimestamp);
    }
    if (HasLabel) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (HasGuaranteedStopLoss) {
      size += 1 + 1;
    }
    if (HasComment) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOATradeData other) {
    if (other == null) {
      return;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasOpenTimestamp) {
      OpenTimestamp = other.OpenTimestamp;
    }
    if (other.HasLabel) {
      Label = other.Label;
    }
    if (other.HasGuaranteedStopLoss) {
      GuaranteedStopLoss = other.GuaranteedStopLoss;
    }
    if (other.HasComment) {
      Comment = other.Comment;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          TradeSide = (global::ProtoOATradeSide) input.ReadEnum();
          break;
        }
        case 32: {
          OpenTimestamp = input.ReadInt64();
          break;
        }
        case 42: {
          Label = input.ReadString();
          break;
        }
        case 48: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 16: {
          Volume = input.ReadInt64();
          break;
        }
        case 24: {
          TradeSide = (global::ProtoOATradeSide) input.ReadEnum();
          break;
        }
        case 32: {
          OpenTimestamp = input.ReadInt64();
          break;
        }
        case 42: {
          Label = input.ReadString();
          break;
        }
        case 48: {
          GuaranteedStopLoss = input.ReadBool();
          break;
        }
        case 58: {
          Comment = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trade order entity. 
/// </summary>
public sealed partial class ProtoOAOrder : pb::IMessage<ProtoOAOrder>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAOrder> _parser = new pb::MessageParser<ProtoOAOrder>(() => new ProtoOAOrder());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAOrder> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAOrder() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAOrder(ProtoOAOrder other) : this() {
    _hasBits0 = other._hasBits0;
    orderId_ = other.orderId_;
    tradeData_ = other.tradeData_ != null ? other.tradeData_.Clone() : null;
    orderType_ = other.orderType_;
    orderStatus_ = other.orderStatus_;
    expirationTimestamp_ = other.expirationTimestamp_;
    executionPrice_ = other.executionPrice_;
    executedVolume_ = other.executedVolume_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    baseSlippagePrice_ = other.baseSlippagePrice_;
    slippageInPoints_ = other.slippageInPoints_;
    closingOrder_ = other.closingOrder_;
    limitPrice_ = other.limitPrice_;
    stopPrice_ = other.stopPrice_;
    stopLoss_ = other.stopLoss_;
    takeProfit_ = other.takeProfit_;
    clientOrderId_ = other.clientOrderId_;
    timeInForce_ = other.timeInForce_;
    positionId_ = other.positionId_;
    relativeStopLoss_ = other.relativeStopLoss_;
    relativeTakeProfit_ = other.relativeTakeProfit_;
    isStopOut_ = other.isStopOut_;
    trailingStopLoss_ = other.trailingStopLoss_;
    stopTriggerMethod_ = other.stopTriggerMethod_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAOrder Clone() {
    return new ProtoOAOrder(this);
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 1;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// The unique ID of the order. Note: trader might have two orders with the same id if orders are taken from accounts from different brokers.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 1) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tradeData" field.</summary>
  public const int TradeDataFieldNumber = 2;
  private global::ProtoOATradeData tradeData_;
  /// <summary>
  /// Detailed trader data.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATradeData TradeData {
    get { return tradeData_; }
    set {
      tradeData_ = value;
    }
  }

  /// <summary>Field number for the "orderType" field.</summary>
  public const int OrderTypeFieldNumber = 3;
  private readonly static global::ProtoOAOrderType OrderTypeDefaultValue = global::ProtoOAOrderType.Market;

  private global::ProtoOAOrderType orderType_;
  /// <summary>
  /// Order type.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAOrderType OrderType {
    get { if ((_hasBits0 & 2) != 0) { return orderType_; } else { return OrderTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderType_ = value;
    }
  }
  /// <summary>Gets whether the "orderType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "orderStatus" field.</summary>
  public const int OrderStatusFieldNumber = 4;
  private readonly static global::ProtoOAOrderStatus OrderStatusDefaultValue = global::ProtoOAOrderStatus.OrderStatusAccepted;

  private global::ProtoOAOrderStatus orderStatus_;
  /// <summary>
  /// Order status.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAOrderStatus OrderStatus {
    get { if ((_hasBits0 & 4) != 0) { return orderStatus_; } else { return OrderStatusDefaultValue; } }
    set {
      _hasBits0 |= 4;
      orderStatus_ = value;
    }
  }
  /// <summary>Gets whether the "orderStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderStatus {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "orderStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderStatus() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "expirationTimestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 6;
  private readonly static long ExpirationTimestampDefaultValue = 0L;

  private long expirationTimestamp_;
  /// <summary>
  /// If the order has time in force GTD then expiration is specified.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExpirationTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return expirationTimestamp_; } else { return ExpirationTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      expirationTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "expirationTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExpirationTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "expirationTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExpirationTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 7;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Price at which an order was executed. For order with FILLED status.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 16) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "executedVolume" field.</summary>
  public const int ExecutedVolumeFieldNumber = 8;
  private readonly static long ExecutedVolumeDefaultValue = 0L;

  private long executedVolume_;
  /// <summary>
  /// Part of the volume that was filled.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutedVolume {
    get { if ((_hasBits0 & 32) != 0) { return executedVolume_; } else { return ExecutedVolumeDefaultValue; } }
    set {
      _hasBits0 |= 32;
      executedVolume_ = value;
    }
  }
  /// <summary>Gets whether the "executedVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutedVolume {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "executedVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutedVolume() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 9;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// Timestamp of the last update of the order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "baseSlippagePrice" field.</summary>
  public const int BaseSlippagePriceFieldNumber = 10;
  private readonly static double BaseSlippagePriceDefaultValue = 0D;

  private double baseSlippagePrice_;
  /// <summary>
  /// Used for Market Range order with combination of slippageInPoints to specify price range were order can be executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BaseSlippagePrice {
    get { if ((_hasBits0 & 128) != 0) { return baseSlippagePrice_; } else { return BaseSlippagePriceDefaultValue; } }
    set {
      _hasBits0 |= 128;
      baseSlippagePrice_ = value;
    }
  }
  /// <summary>Gets whether the "baseSlippagePrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseSlippagePrice {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "baseSlippagePrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseSlippagePrice() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "slippageInPoints" field.</summary>
  public const int SlippageInPointsFieldNumber = 11;
  private readonly static long SlippageInPointsDefaultValue = 0L;

  private long slippageInPoints_;
  /// <summary>
  /// Used for Market Range and STOP_LIMIT orders to to specify price range were order can be executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SlippageInPoints {
    get { if ((_hasBits0 & 256) != 0) { return slippageInPoints_; } else { return SlippageInPointsDefaultValue; } }
    set {
      _hasBits0 |= 256;
      slippageInPoints_ = value;
    }
  }
  /// <summary>Gets whether the "slippageInPoints" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSlippageInPoints {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "slippageInPoints" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSlippageInPoints() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "closingOrder" field.</summary>
  public const int ClosingOrderFieldNumber = 12;
  private readonly static bool ClosingOrderDefaultValue = false;

  private bool closingOrder_;
  /// <summary>
  /// If TRUE then the order is closing part of whole position. Must have specified positionId.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ClosingOrder {
    get { if ((_hasBits0 & 512) != 0) { return closingOrder_; } else { return ClosingOrderDefaultValue; } }
    set {
      _hasBits0 |= 512;
      closingOrder_ = value;
    }
  }
  /// <summary>Gets whether the "closingOrder" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosingOrder {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "closingOrder" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosingOrder() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "limitPrice" field.</summary>
  public const int LimitPriceFieldNumber = 13;
  private readonly static double LimitPriceDefaultValue = 0D;

  private double limitPrice_;
  /// <summary>
  /// Valid only for LIMIT orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double LimitPrice {
    get { if ((_hasBits0 & 1024) != 0) { return limitPrice_; } else { return LimitPriceDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      limitPrice_ = value;
    }
  }
  /// <summary>Gets whether the "limitPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLimitPrice {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "limitPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLimitPrice() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "stopPrice" field.</summary>
  public const int StopPriceFieldNumber = 14;
  private readonly static double StopPriceDefaultValue = 0D;

  private double stopPrice_;
  /// <summary>
  /// Valid only for STOP and STOP_LIMIT orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopPrice {
    get { if ((_hasBits0 & 2048) != 0) { return stopPrice_; } else { return StopPriceDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      stopPrice_ = value;
    }
  }
  /// <summary>Gets whether the "stopPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopPrice {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "stopPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopPrice() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "stopLoss" field.</summary>
  public const int StopLossFieldNumber = 15;
  private readonly static double StopLossDefaultValue = 0D;

  private double stopLoss_;
  /// <summary>
  /// Absolute stopLoss price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double StopLoss {
    get { if ((_hasBits0 & 4096) != 0) { return stopLoss_; } else { return StopLossDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      stopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "stopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopLoss {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "stopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopLoss() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "takeProfit" field.</summary>
  public const int TakeProfitFieldNumber = 16;
  private readonly static double TakeProfitDefaultValue = 0D;

  private double takeProfit_;
  /// <summary>
  /// Absolute takeProfit price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double TakeProfit {
    get { if ((_hasBits0 & 8192) != 0) { return takeProfit_; } else { return TakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      takeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "takeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTakeProfit {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "takeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTakeProfit() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "clientOrderId" field.</summary>
  public const int ClientOrderIdFieldNumber = 17;
  private readonly static string ClientOrderIdDefaultValue = "";

  private string clientOrderId_;
  /// <summary>
  /// Optional ClientOrderId. Max Length = 50 chars.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientOrderId {
    get { return clientOrderId_ ?? ClientOrderIdDefaultValue; }
    set {
      clientOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "clientOrderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClientOrderId {
    get { return clientOrderId_ != null; }
  }
  /// <summary>Clears the value of the "clientOrderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClientOrderId() {
    clientOrderId_ = null;
  }

  /// <summary>Field number for the "timeInForce" field.</summary>
  public const int TimeInForceFieldNumber = 18;
  private readonly static global::ProtoOATimeInForce TimeInForceDefaultValue = global::ProtoOATimeInForce.ImmediateOrCancel;

  private global::ProtoOATimeInForce timeInForce_;
  /// <summary>
  /// Order's time in force. Depends on order type.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATimeInForce TimeInForce {
    get { if ((_hasBits0 & 16384) != 0) { return timeInForce_; } else { return TimeInForceDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      timeInForce_ = value;
    }
  }
  /// <summary>Gets whether the "timeInForce" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimeInForce {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "timeInForce" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimeInForce() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 19;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// ID of the position linked to the order (e.g. closing order, order that increase volume of a specific position, etc.).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 32768) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~32768;
  }

  /// <summary>Field number for the "relativeStopLoss" field.</summary>
  public const int RelativeStopLossFieldNumber = 20;
  private readonly static long RelativeStopLossDefaultValue = 0L;

  private long relativeStopLoss_;
  /// <summary>
  /// Relative stopLoss that can be specified instead of absolute as one. Specified in 1/100_000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeStopLoss {
    get { if ((_hasBits0 & 65536) != 0) { return relativeStopLoss_; } else { return RelativeStopLossDefaultValue; } }
    set {
      _hasBits0 |= 65536;
      relativeStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "relativeStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeStopLoss {
    get { return (_hasBits0 & 65536) != 0; }
  }
  /// <summary>Clears the value of the "relativeStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeStopLoss() {
    _hasBits0 &= ~65536;
  }

  /// <summary>Field number for the "relativeTakeProfit" field.</summary>
  public const int RelativeTakeProfitFieldNumber = 21;
  private readonly static long RelativeTakeProfitDefaultValue = 0L;

  private long relativeTakeProfit_;
  /// <summary>
  /// Relative takeProfit that can be specified instead of absolute one. Specified in 1/100_000 of unit of a price. ForBUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long RelativeTakeProfit {
    get { if ((_hasBits0 & 131072) != 0) { return relativeTakeProfit_; } else { return RelativeTakeProfitDefaultValue; } }
    set {
      _hasBits0 |= 131072;
      relativeTakeProfit_ = value;
    }
  }
  /// <summary>Gets whether the "relativeTakeProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRelativeTakeProfit {
    get { return (_hasBits0 & 131072) != 0; }
  }
  /// <summary>Clears the value of the "relativeTakeProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRelativeTakeProfit() {
    _hasBits0 &= ~131072;
  }

  /// <summary>Field number for the "isStopOut" field.</summary>
  public const int IsStopOutFieldNumber = 22;
  private readonly static bool IsStopOutDefaultValue = false;

  private bool isStopOut_;
  /// <summary>
  /// If TRUE then order was stopped out from server side.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsStopOut {
    get { if ((_hasBits0 & 262144) != 0) { return isStopOut_; } else { return IsStopOutDefaultValue; } }
    set {
      _hasBits0 |= 262144;
      isStopOut_ = value;
    }
  }
  /// <summary>Gets whether the "isStopOut" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsStopOut {
    get { return (_hasBits0 & 262144) != 0; }
  }
  /// <summary>Clears the value of the "isStopOut" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsStopOut() {
    _hasBits0 &= ~262144;
  }

  /// <summary>Field number for the "trailingStopLoss" field.</summary>
  public const int TrailingStopLossFieldNumber = 23;
  private readonly static bool TrailingStopLossDefaultValue = false;

  private bool trailingStopLoss_;
  /// <summary>
  /// If TRUE then order is trailingStopLoss. Valid for STOP_LOSS_TAKE_PROFIT order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool TrailingStopLoss {
    get { if ((_hasBits0 & 524288) != 0) { return trailingStopLoss_; } else { return TrailingStopLossDefaultValue; } }
    set {
      _hasBits0 |= 524288;
      trailingStopLoss_ = value;
    }
  }
  /// <summary>Gets whether the "trailingStopLoss" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTrailingStopLoss {
    get { return (_hasBits0 & 524288) != 0; }
  }
  /// <summary>Clears the value of the "trailingStopLoss" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTrailingStopLoss() {
    _hasBits0 &= ~524288;
  }

  /// <summary>Field number for the "stopTriggerMethod" field.</summary>
  public const int StopTriggerMethodFieldNumber = 24;
  private readonly static global::ProtoOAOrderTriggerMethod StopTriggerMethodDefaultValue = global::ProtoOAOrderTriggerMethod.Trade;

  private global::ProtoOAOrderTriggerMethod stopTriggerMethod_;
  /// <summary>
  /// Trigger method for the order. Valid only for STOP and STOP_LIMIT orders.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAOrderTriggerMethod StopTriggerMethod {
    get { if ((_hasBits0 & 1048576) != 0) { return stopTriggerMethod_; } else { return StopTriggerMethodDefaultValue; } }
    set {
      _hasBits0 |= 1048576;
      stopTriggerMethod_ = value;
    }
  }
  /// <summary>Gets whether the "stopTriggerMethod" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStopTriggerMethod {
    get { return (_hasBits0 & 1048576) != 0; }
  }
  /// <summary>Clears the value of the "stopTriggerMethod" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStopTriggerMethod() {
    _hasBits0 &= ~1048576;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAOrder);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAOrder other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OrderId != other.OrderId) return false;
    if (!object.Equals(TradeData, other.TradeData)) return false;
    if (OrderType != other.OrderType) return false;
    if (OrderStatus != other.OrderStatus) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (ExecutedVolume != other.ExecutedVolume) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseSlippagePrice, other.BaseSlippagePrice)) return false;
    if (SlippageInPoints != other.SlippageInPoints) return false;
    if (ClosingOrder != other.ClosingOrder) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopLoss, other.StopLoss)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeProfit, other.TakeProfit)) return false;
    if (ClientOrderId != other.ClientOrderId) return false;
    if (TimeInForce != other.TimeInForce) return false;
    if (PositionId != other.PositionId) return false;
    if (RelativeStopLoss != other.RelativeStopLoss) return false;
    if (RelativeTakeProfit != other.RelativeTakeProfit) return false;
    if (IsStopOut != other.IsStopOut) return false;
    if (TrailingStopLoss != other.TrailingStopLoss) return false;
    if (StopTriggerMethod != other.StopTriggerMethod) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (tradeData_ != null) hash ^= TradeData.GetHashCode();
    if (HasOrderType) hash ^= OrderType.GetHashCode();
    if (HasOrderStatus) hash ^= OrderStatus.GetHashCode();
    if (HasExpirationTimestamp) hash ^= ExpirationTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasExecutedVolume) hash ^= ExecutedVolume.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasBaseSlippagePrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseSlippagePrice);
    if (HasSlippageInPoints) hash ^= SlippageInPoints.GetHashCode();
    if (HasClosingOrder) hash ^= ClosingOrder.GetHashCode();
    if (HasLimitPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
    if (HasStopPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
    if (HasStopLoss) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopLoss);
    if (HasTakeProfit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeProfit);
    if (HasClientOrderId) hash ^= ClientOrderId.GetHashCode();
    if (HasTimeInForce) hash ^= TimeInForce.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasRelativeStopLoss) hash ^= RelativeStopLoss.GetHashCode();
    if (HasRelativeTakeProfit) hash ^= RelativeTakeProfit.GetHashCode();
    if (HasIsStopOut) hash ^= IsStopOut.GetHashCode();
    if (HasTrailingStopLoss) hash ^= TrailingStopLoss.GetHashCode();
    if (HasStopTriggerMethod) hash ^= StopTriggerMethod.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOrderId) {
      output.WriteRawTag(8);
      output.WriteInt64(OrderId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasOrderType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) OrderType);
    }
    if (HasOrderStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(57);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasExecutedVolume) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutedVolume);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBaseSlippagePrice) {
      output.WriteRawTag(81);
      output.WriteDouble(BaseSlippagePrice);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(88);
      output.WriteInt64(SlippageInPoints);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(96);
      output.WriteBool(ClosingOrder);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(105);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(113);
      output.WriteDouble(StopPrice);
    }
    if (HasStopLoss) {
      output.WriteRawTag(121);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(TakeProfit);
    }
    if (HasClientOrderId) {
      output.WriteRawTag(138, 1);
      output.WriteString(ClientOrderId);
    }
    if (HasTimeInForce) {
      output.WriteRawTag(144, 1);
      output.WriteEnum((int) TimeInForce);
    }
    if (HasPositionId) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(PositionId);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasIsStopOut) {
      output.WriteRawTag(176, 1);
      output.WriteBool(IsStopOut);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(184, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(192, 1);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOrderId) {
      output.WriteRawTag(8);
      output.WriteInt64(OrderId);
    }
    if (tradeData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TradeData);
    }
    if (HasOrderType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) OrderType);
    }
    if (HasOrderStatus) {
      output.WriteRawTag(32);
      output.WriteEnum((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      output.WriteRawTag(48);
      output.WriteInt64(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(57);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasExecutedVolume) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutedVolume);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasBaseSlippagePrice) {
      output.WriteRawTag(81);
      output.WriteDouble(BaseSlippagePrice);
    }
    if (HasSlippageInPoints) {
      output.WriteRawTag(88);
      output.WriteInt64(SlippageInPoints);
    }
    if (HasClosingOrder) {
      output.WriteRawTag(96);
      output.WriteBool(ClosingOrder);
    }
    if (HasLimitPrice) {
      output.WriteRawTag(105);
      output.WriteDouble(LimitPrice);
    }
    if (HasStopPrice) {
      output.WriteRawTag(113);
      output.WriteDouble(StopPrice);
    }
    if (HasStopLoss) {
      output.WriteRawTag(121);
      output.WriteDouble(StopLoss);
    }
    if (HasTakeProfit) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(TakeProfit);
    }
    if (HasClientOrderId) {
      output.WriteRawTag(138, 1);
      output.WriteString(ClientOrderId);
    }
    if (HasTimeInForce) {
      output.WriteRawTag(144, 1);
      output.WriteEnum((int) TimeInForce);
    }
    if (HasPositionId) {
      output.WriteRawTag(152, 1);
      output.WriteInt64(PositionId);
    }
    if (HasRelativeStopLoss) {
      output.WriteRawTag(160, 1);
      output.WriteInt64(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      output.WriteRawTag(168, 1);
      output.WriteInt64(RelativeTakeProfit);
    }
    if (HasIsStopOut) {
      output.WriteRawTag(176, 1);
      output.WriteBool(IsStopOut);
    }
    if (HasTrailingStopLoss) {
      output.WriteRawTag(184, 1);
      output.WriteBool(TrailingStopLoss);
    }
    if (HasStopTriggerMethod) {
      output.WriteRawTag(192, 1);
      output.WriteEnum((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (tradeData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeData);
    }
    if (HasOrderType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
    }
    if (HasOrderStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderStatus);
    }
    if (HasExpirationTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasExecutedVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutedVolume);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasBaseSlippagePrice) {
      size += 1 + 8;
    }
    if (HasSlippageInPoints) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SlippageInPoints);
    }
    if (HasClosingOrder) {
      size += 1 + 1;
    }
    if (HasLimitPrice) {
      size += 1 + 8;
    }
    if (HasStopPrice) {
      size += 1 + 8;
    }
    if (HasStopLoss) {
      size += 1 + 8;
    }
    if (HasTakeProfit) {
      size += 2 + 8;
    }
    if (HasClientOrderId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientOrderId);
    }
    if (HasTimeInForce) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
    }
    if (HasPositionId) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasRelativeStopLoss) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeStopLoss);
    }
    if (HasRelativeTakeProfit) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(RelativeTakeProfit);
    }
    if (HasIsStopOut) {
      size += 2 + 1;
    }
    if (HasTrailingStopLoss) {
      size += 2 + 1;
    }
    if (HasStopTriggerMethod) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StopTriggerMethod);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAOrder other) {
    if (other == null) {
      return;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.tradeData_ != null) {
      if (tradeData_ == null) {
        TradeData = new global::ProtoOATradeData();
      }
      TradeData.MergeFrom(other.TradeData);
    }
    if (other.HasOrderType) {
      OrderType = other.OrderType;
    }
    if (other.HasOrderStatus) {
      OrderStatus = other.OrderStatus;
    }
    if (other.HasExpirationTimestamp) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasExecutedVolume) {
      ExecutedVolume = other.ExecutedVolume;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasBaseSlippagePrice) {
      BaseSlippagePrice = other.BaseSlippagePrice;
    }
    if (other.HasSlippageInPoints) {
      SlippageInPoints = other.SlippageInPoints;
    }
    if (other.HasClosingOrder) {
      ClosingOrder = other.ClosingOrder;
    }
    if (other.HasLimitPrice) {
      LimitPrice = other.LimitPrice;
    }
    if (other.HasStopPrice) {
      StopPrice = other.StopPrice;
    }
    if (other.HasStopLoss) {
      StopLoss = other.StopLoss;
    }
    if (other.HasTakeProfit) {
      TakeProfit = other.TakeProfit;
    }
    if (other.HasClientOrderId) {
      ClientOrderId = other.ClientOrderId;
    }
    if (other.HasTimeInForce) {
      TimeInForce = other.TimeInForce;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasRelativeStopLoss) {
      RelativeStopLoss = other.RelativeStopLoss;
    }
    if (other.HasRelativeTakeProfit) {
      RelativeTakeProfit = other.RelativeTakeProfit;
    }
    if (other.HasIsStopOut) {
      IsStopOut = other.IsStopOut;
    }
    if (other.HasTrailingStopLoss) {
      TrailingStopLoss = other.TrailingStopLoss;
    }
    if (other.HasStopTriggerMethod) {
      StopTriggerMethod = other.StopTriggerMethod;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OrderId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoOATradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          OrderType = (global::ProtoOAOrderType) input.ReadEnum();
          break;
        }
        case 32: {
          OrderStatus = (global::ProtoOAOrderStatus) input.ReadEnum();
          break;
        }
        case 48: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 57: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 64: {
          ExecutedVolume = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 81: {
          BaseSlippagePrice = input.ReadDouble();
          break;
        }
        case 88: {
          SlippageInPoints = input.ReadInt64();
          break;
        }
        case 96: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 105: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 113: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 121: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 129: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 138: {
          ClientOrderId = input.ReadString();
          break;
        }
        case 144: {
          TimeInForce = (global::ProtoOATimeInForce) input.ReadEnum();
          break;
        }
        case 152: {
          PositionId = input.ReadInt64();
          break;
        }
        case 160: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 168: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 176: {
          IsStopOut = input.ReadBool();
          break;
        }
        case 184: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 192: {
          StopTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OrderId = input.ReadInt64();
          break;
        }
        case 18: {
          if (tradeData_ == null) {
            TradeData = new global::ProtoOATradeData();
          }
          input.ReadMessage(TradeData);
          break;
        }
        case 24: {
          OrderType = (global::ProtoOAOrderType) input.ReadEnum();
          break;
        }
        case 32: {
          OrderStatus = (global::ProtoOAOrderStatus) input.ReadEnum();
          break;
        }
        case 48: {
          ExpirationTimestamp = input.ReadInt64();
          break;
        }
        case 57: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 64: {
          ExecutedVolume = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 81: {
          BaseSlippagePrice = input.ReadDouble();
          break;
        }
        case 88: {
          SlippageInPoints = input.ReadInt64();
          break;
        }
        case 96: {
          ClosingOrder = input.ReadBool();
          break;
        }
        case 105: {
          LimitPrice = input.ReadDouble();
          break;
        }
        case 113: {
          StopPrice = input.ReadDouble();
          break;
        }
        case 121: {
          StopLoss = input.ReadDouble();
          break;
        }
        case 129: {
          TakeProfit = input.ReadDouble();
          break;
        }
        case 138: {
          ClientOrderId = input.ReadString();
          break;
        }
        case 144: {
          TimeInForce = (global::ProtoOATimeInForce) input.ReadEnum();
          break;
        }
        case 152: {
          PositionId = input.ReadInt64();
          break;
        }
        case 160: {
          RelativeStopLoss = input.ReadInt64();
          break;
        }
        case 168: {
          RelativeTakeProfit = input.ReadInt64();
          break;
        }
        case 176: {
          IsStopOut = input.ReadBool();
          break;
        }
        case 184: {
          TrailingStopLoss = input.ReadBool();
          break;
        }
        case 192: {
          StopTriggerMethod = (global::ProtoOAOrderTriggerMethod) input.ReadEnum();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Bonus deposit/withdrawal entity. 
/// </summary>
public sealed partial class ProtoOABonusDepositWithdraw : pb::IMessage<ProtoOABonusDepositWithdraw>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOABonusDepositWithdraw> _parser = new pb::MessageParser<ProtoOABonusDepositWithdraw>(() => new ProtoOABonusDepositWithdraw());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOABonusDepositWithdraw> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOABonusDepositWithdraw() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOABonusDepositWithdraw(ProtoOABonusDepositWithdraw other) : this() {
    _hasBits0 = other._hasBits0;
    operationType_ = other.operationType_;
    bonusHistoryId_ = other.bonusHistoryId_;
    managerBonus_ = other.managerBonus_;
    managerDelta_ = other.managerDelta_;
    ibBonus_ = other.ibBonus_;
    ibDelta_ = other.ibDelta_;
    changeBonusTimestamp_ = other.changeBonusTimestamp_;
    externalNote_ = other.externalNote_;
    introducingBrokerId_ = other.introducingBrokerId_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOABonusDepositWithdraw Clone() {
    return new ProtoOABonusDepositWithdraw(this);
  }

  /// <summary>Field number for the "operationType" field.</summary>
  public const int OperationTypeFieldNumber = 1;
  private readonly static global::ProtoOAChangeBonusType OperationTypeDefaultValue = global::ProtoOAChangeBonusType.BonusDeposit;

  private global::ProtoOAChangeBonusType operationType_;
  /// <summary>
  /// Type of the operation. Deposit/Withdrawal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAChangeBonusType OperationType {
    get { if ((_hasBits0 & 1) != 0) { return operationType_; } else { return OperationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      operationType_ = value;
    }
  }
  /// <summary>Gets whether the "operationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOperationType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "operationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOperationType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "bonusHistoryId" field.</summary>
  public const int BonusHistoryIdFieldNumber = 2;
  private readonly static long BonusHistoryIdDefaultValue = 0L;

  private long bonusHistoryId_;
  /// <summary>
  /// The unique ID of the bonus deposit/withdrawal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BonusHistoryId {
    get { if ((_hasBits0 & 2) != 0) { return bonusHistoryId_; } else { return BonusHistoryIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      bonusHistoryId_ = value;
    }
  }
  /// <summary>Gets whether the "bonusHistoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBonusHistoryId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "bonusHistoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBonusHistoryId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "managerBonus" field.</summary>
  public const int ManagerBonusFieldNumber = 3;
  private readonly static long ManagerBonusDefaultValue = 0L;

  private long managerBonus_;
  /// <summary>
  /// Total amount of broker's bonus after the operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerBonus {
    get { if ((_hasBits0 & 4) != 0) { return managerBonus_; } else { return ManagerBonusDefaultValue; } }
    set {
      _hasBits0 |= 4;
      managerBonus_ = value;
    }
  }
  /// <summary>Gets whether the "managerBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerBonus {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "managerBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerBonus() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "managerDelta" field.</summary>
  public const int ManagerDeltaFieldNumber = 4;
  private readonly static long ManagerDeltaDefaultValue = 0L;

  private long managerDelta_;
  /// <summary>
  /// Amount of bonus deposited/withdrew by manager.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ManagerDelta {
    get { if ((_hasBits0 & 8) != 0) { return managerDelta_; } else { return ManagerDeltaDefaultValue; } }
    set {
      _hasBits0 |= 8;
      managerDelta_ = value;
    }
  }
  /// <summary>Gets whether the "managerDelta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasManagerDelta {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "managerDelta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearManagerDelta() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "ibBonus" field.</summary>
  public const int IbBonusFieldNumber = 5;
  private readonly static long IbBonusDefaultValue = 0L;

  private long ibBonus_;
  /// <summary>
  /// Total amount of introducing broker's bonus after the operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbBonus {
    get { if ((_hasBits0 & 16) != 0) { return ibBonus_; } else { return IbBonusDefaultValue; } }
    set {
      _hasBits0 |= 16;
      ibBonus_ = value;
    }
  }
  /// <summary>Gets whether the "ibBonus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbBonus {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "ibBonus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbBonus() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "ibDelta" field.</summary>
  public const int IbDeltaFieldNumber = 6;
  private readonly static long IbDeltaDefaultValue = 0L;

  private long ibDelta_;
  /// <summary>
  /// Amount of bonus deposited/withdrew by introducing broker.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IbDelta {
    get { if ((_hasBits0 & 32) != 0) { return ibDelta_; } else { return IbDeltaDefaultValue; } }
    set {
      _hasBits0 |= 32;
      ibDelta_ = value;
    }
  }
  /// <summary>Gets whether the "ibDelta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIbDelta {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "ibDelta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIbDelta() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "changeBonusTimestamp" field.</summary>
  public const int ChangeBonusTimestampFieldNumber = 7;
  private readonly static long ChangeBonusTimestampDefaultValue = 0L;

  private long changeBonusTimestamp_;
  /// <summary>
  /// Time when the bonus operation was executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ChangeBonusTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return changeBonusTimestamp_; } else { return ChangeBonusTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      changeBonusTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "changeBonusTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChangeBonusTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "changeBonusTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChangeBonusTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "externalNote" field.</summary>
  public const int ExternalNoteFieldNumber = 8;
  private readonly static string ExternalNoteDefaultValue = "";

  private string externalNote_;
  /// <summary>
  /// Note added to operation. Visible to the trader.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ExternalNote {
    get { return externalNote_ ?? ExternalNoteDefaultValue; }
    set {
      externalNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "externalNote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExternalNote {
    get { return externalNote_ != null; }
  }
  /// <summary>Clears the value of the "externalNote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExternalNote() {
    externalNote_ = null;
  }

  /// <summary>Field number for the "introducingBrokerId" field.</summary>
  public const int IntroducingBrokerIdFieldNumber = 9;
  private readonly static long IntroducingBrokerIdDefaultValue = 0L;

  private long introducingBrokerId_;
  /// <summary>
  /// ID of introducing broker who deposited/withdrew bonus.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long IntroducingBrokerId {
    get { if ((_hasBits0 & 128) != 0) { return introducingBrokerId_; } else { return IntroducingBrokerIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      introducingBrokerId_ = value;
    }
  }
  /// <summary>Gets whether the "introducingBrokerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIntroducingBrokerId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "introducingBrokerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIntroducingBrokerId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 10;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects managerBonus, managerDelta, ibBonus, ibDelta.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 256) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 256;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOABonusDepositWithdraw);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOABonusDepositWithdraw other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperationType != other.OperationType) return false;
    if (BonusHistoryId != other.BonusHistoryId) return false;
    if (ManagerBonus != other.ManagerBonus) return false;
    if (ManagerDelta != other.ManagerDelta) return false;
    if (IbBonus != other.IbBonus) return false;
    if (IbDelta != other.IbDelta) return false;
    if (ChangeBonusTimestamp != other.ChangeBonusTimestamp) return false;
    if (ExternalNote != other.ExternalNote) return false;
    if (IntroducingBrokerId != other.IntroducingBrokerId) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOperationType) hash ^= OperationType.GetHashCode();
    if (HasBonusHistoryId) hash ^= BonusHistoryId.GetHashCode();
    if (HasManagerBonus) hash ^= ManagerBonus.GetHashCode();
    if (HasManagerDelta) hash ^= ManagerDelta.GetHashCode();
    if (HasIbBonus) hash ^= IbBonus.GetHashCode();
    if (HasIbDelta) hash ^= IbDelta.GetHashCode();
    if (HasChangeBonusTimestamp) hash ^= ChangeBonusTimestamp.GetHashCode();
    if (HasExternalNote) hash ^= ExternalNote.GetHashCode();
    if (HasIntroducingBrokerId) hash ^= IntroducingBrokerId.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBonusHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BonusHistoryId);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(24);
      output.WriteInt64(ManagerBonus);
    }
    if (HasManagerDelta) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerDelta);
    }
    if (HasIbBonus) {
      output.WriteRawTag(40);
      output.WriteInt64(IbBonus);
    }
    if (HasIbDelta) {
      output.WriteRawTag(48);
      output.WriteInt64(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(ChangeBonusTimestamp);
    }
    if (HasExternalNote) {
      output.WriteRawTag(66);
      output.WriteString(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      output.WriteRawTag(72);
      output.WriteInt64(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(80);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBonusHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BonusHistoryId);
    }
    if (HasManagerBonus) {
      output.WriteRawTag(24);
      output.WriteInt64(ManagerBonus);
    }
    if (HasManagerDelta) {
      output.WriteRawTag(32);
      output.WriteInt64(ManagerDelta);
    }
    if (HasIbBonus) {
      output.WriteRawTag(40);
      output.WriteInt64(IbBonus);
    }
    if (HasIbDelta) {
      output.WriteRawTag(48);
      output.WriteInt64(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(ChangeBonusTimestamp);
    }
    if (HasExternalNote) {
      output.WriteRawTag(66);
      output.WriteString(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      output.WriteRawTag(72);
      output.WriteInt64(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(80);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOperationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperationType);
    }
    if (HasBonusHistoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BonusHistoryId);
    }
    if (HasManagerBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerBonus);
    }
    if (HasManagerDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ManagerDelta);
    }
    if (HasIbBonus) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IbBonus);
    }
    if (HasIbDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IbDelta);
    }
    if (HasChangeBonusTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeBonusTimestamp);
    }
    if (HasExternalNote) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalNote);
    }
    if (HasIntroducingBrokerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntroducingBrokerId);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOABonusDepositWithdraw other) {
    if (other == null) {
      return;
    }
    if (other.HasOperationType) {
      OperationType = other.OperationType;
    }
    if (other.HasBonusHistoryId) {
      BonusHistoryId = other.BonusHistoryId;
    }
    if (other.HasManagerBonus) {
      ManagerBonus = other.ManagerBonus;
    }
    if (other.HasManagerDelta) {
      ManagerDelta = other.ManagerDelta;
    }
    if (other.HasIbBonus) {
      IbBonus = other.IbBonus;
    }
    if (other.HasIbDelta) {
      IbDelta = other.IbDelta;
    }
    if (other.HasChangeBonusTimestamp) {
      ChangeBonusTimestamp = other.ChangeBonusTimestamp;
    }
    if (other.HasExternalNote) {
      ExternalNote = other.ExternalNote;
    }
    if (other.HasIntroducingBrokerId) {
      IntroducingBrokerId = other.IntroducingBrokerId;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OperationType = (global::ProtoOAChangeBonusType) input.ReadEnum();
          break;
        }
        case 16: {
          BonusHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerDelta = input.ReadInt64();
          break;
        }
        case 40: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 48: {
          IbDelta = input.ReadInt64();
          break;
        }
        case 56: {
          ChangeBonusTimestamp = input.ReadInt64();
          break;
        }
        case 66: {
          ExternalNote = input.ReadString();
          break;
        }
        case 72: {
          IntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 80: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OperationType = (global::ProtoOAChangeBonusType) input.ReadEnum();
          break;
        }
        case 16: {
          BonusHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          ManagerBonus = input.ReadInt64();
          break;
        }
        case 32: {
          ManagerDelta = input.ReadInt64();
          break;
        }
        case 40: {
          IbBonus = input.ReadInt64();
          break;
        }
        case 48: {
          IbDelta = input.ReadInt64();
          break;
        }
        case 56: {
          ChangeBonusTimestamp = input.ReadInt64();
          break;
        }
        case 66: {
          ExternalNote = input.ReadString();
          break;
        }
        case 72: {
          IntroducingBrokerId = input.ReadInt64();
          break;
        }
        case 80: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Account deposit/withdrawal operation entity. 
/// </summary>
public sealed partial class ProtoOADepositWithdraw : pb::IMessage<ProtoOADepositWithdraw>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOADepositWithdraw> _parser = new pb::MessageParser<ProtoOADepositWithdraw>(() => new ProtoOADepositWithdraw());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOADepositWithdraw> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepositWithdraw() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepositWithdraw(ProtoOADepositWithdraw other) : this() {
    _hasBits0 = other._hasBits0;
    operationType_ = other.operationType_;
    balanceHistoryId_ = other.balanceHistoryId_;
    balance_ = other.balance_;
    delta_ = other.delta_;
    changeBalanceTimestamp_ = other.changeBalanceTimestamp_;
    externalNote_ = other.externalNote_;
    balanceVersion_ = other.balanceVersion_;
    equity_ = other.equity_;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepositWithdraw Clone() {
    return new ProtoOADepositWithdraw(this);
  }

  /// <summary>Field number for the "operationType" field.</summary>
  public const int OperationTypeFieldNumber = 1;
  private readonly static global::ProtoOAChangeBalanceType OperationTypeDefaultValue = global::ProtoOAChangeBalanceType.BalanceDeposit;

  private global::ProtoOAChangeBalanceType operationType_;
  /// <summary>
  /// Type of the operation. Deposit/Withdrawal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAChangeBalanceType OperationType {
    get { if ((_hasBits0 & 1) != 0) { return operationType_; } else { return OperationTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      operationType_ = value;
    }
  }
  /// <summary>Gets whether the "operationType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOperationType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "operationType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOperationType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "balanceHistoryId" field.</summary>
  public const int BalanceHistoryIdFieldNumber = 2;
  private readonly static long BalanceHistoryIdDefaultValue = 0L;

  private long balanceHistoryId_;
  /// <summary>
  /// The unique ID of the deposit/withdrawal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceHistoryId {
    get { if ((_hasBits0 & 2) != 0) { return balanceHistoryId_; } else { return BalanceHistoryIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      balanceHistoryId_ = value;
    }
  }
  /// <summary>Gets whether the "balanceHistoryId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceHistoryId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "balanceHistoryId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceHistoryId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 3;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Account balance after the operation was executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 4) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 4;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "delta" field.</summary>
  public const int DeltaFieldNumber = 4;
  private readonly static long DeltaDefaultValue = 0L;

  private long delta_;
  /// <summary>
  /// Amount of deposit/withdrawal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Delta {
    get { if ((_hasBits0 & 8) != 0) { return delta_; } else { return DeltaDefaultValue; } }
    set {
      _hasBits0 |= 8;
      delta_ = value;
    }
  }
  /// <summary>Gets whether the "delta" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDelta {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "delta" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDelta() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "changeBalanceTimestamp" field.</summary>
  public const int ChangeBalanceTimestampFieldNumber = 5;
  private readonly static long ChangeBalanceTimestampDefaultValue = 0L;

  private long changeBalanceTimestamp_;
  /// <summary>
  /// Time when deposit/withdrawal operation was executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ChangeBalanceTimestamp {
    get { if ((_hasBits0 & 16) != 0) { return changeBalanceTimestamp_; } else { return ChangeBalanceTimestampDefaultValue; } }
    set {
      _hasBits0 |= 16;
      changeBalanceTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "changeBalanceTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasChangeBalanceTimestamp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "changeBalanceTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearChangeBalanceTimestamp() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "externalNote" field.</summary>
  public const int ExternalNoteFieldNumber = 6;
  private readonly static string ExternalNoteDefaultValue = "";

  private string externalNote_;
  /// <summary>
  /// Note added to operation. Visible to the trader.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ExternalNote {
    get { return externalNote_ ?? ExternalNoteDefaultValue; }
    set {
      externalNote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "externalNote" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExternalNote {
    get { return externalNote_ != null; }
  }
  /// <summary>Clears the value of the "externalNote" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExternalNote() {
    externalNote_ = null;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 7;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version used to identify the final balance. Increments each time when the trader's account balance is changed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 32) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 32;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "equity" field.</summary>
  public const int EquityFieldNumber = 8;
  private readonly static long EquityDefaultValue = 0L;

  private long equity_;
  /// <summary>
  /// Total account's equity after balance operation was executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Equity {
    get { if ((_hasBits0 & 64) != 0) { return equity_; } else { return EquityDefaultValue; } }
    set {
      _hasBits0 |= 64;
      equity_ = value;
    }
  }
  /// <summary>Gets whether the "equity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEquity {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "equity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEquity() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 9;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects balance, delta, equity.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 128) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 128;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~128;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADepositWithdraw);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOADepositWithdraw other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OperationType != other.OperationType) return false;
    if (BalanceHistoryId != other.BalanceHistoryId) return false;
    if (Balance != other.Balance) return false;
    if (Delta != other.Delta) return false;
    if (ChangeBalanceTimestamp != other.ChangeBalanceTimestamp) return false;
    if (ExternalNote != other.ExternalNote) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (Equity != other.Equity) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasOperationType) hash ^= OperationType.GetHashCode();
    if (HasBalanceHistoryId) hash ^= BalanceHistoryId.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasDelta) hash ^= Delta.GetHashCode();
    if (HasChangeBalanceTimestamp) hash ^= ChangeBalanceTimestamp.GetHashCode();
    if (HasExternalNote) hash ^= ExternalNote.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasEquity) hash ^= Equity.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasBalance) {
      output.WriteRawTag(24);
      output.WriteInt64(Balance);
    }
    if (HasDelta) {
      output.WriteRawTag(32);
      output.WriteInt64(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(ChangeBalanceTimestamp);
    }
    if (HasExternalNote) {
      output.WriteRawTag(50);
      output.WriteString(ExternalNote);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(56);
      output.WriteInt64(BalanceVersion);
    }
    if (HasEquity) {
      output.WriteRawTag(64);
      output.WriteInt64(Equity);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(72);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasOperationType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      output.WriteRawTag(16);
      output.WriteInt64(BalanceHistoryId);
    }
    if (HasBalance) {
      output.WriteRawTag(24);
      output.WriteInt64(Balance);
    }
    if (HasDelta) {
      output.WriteRawTag(32);
      output.WriteInt64(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(ChangeBalanceTimestamp);
    }
    if (HasExternalNote) {
      output.WriteRawTag(50);
      output.WriteString(ExternalNote);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(56);
      output.WriteInt64(BalanceVersion);
    }
    if (HasEquity) {
      output.WriteRawTag(64);
      output.WriteInt64(Equity);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(72);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasOperationType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OperationType);
    }
    if (HasBalanceHistoryId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceHistoryId);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasDelta) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Delta);
    }
    if (HasChangeBalanceTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeBalanceTimestamp);
    }
    if (HasExternalNote) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalNote);
    }
    if (HasBalanceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasEquity) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Equity);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOADepositWithdraw other) {
    if (other == null) {
      return;
    }
    if (other.HasOperationType) {
      OperationType = other.OperationType;
    }
    if (other.HasBalanceHistoryId) {
      BalanceHistoryId = other.BalanceHistoryId;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasDelta) {
      Delta = other.Delta;
    }
    if (other.HasChangeBalanceTimestamp) {
      ChangeBalanceTimestamp = other.ChangeBalanceTimestamp;
    }
    if (other.HasExternalNote) {
      ExternalNote = other.ExternalNote;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasEquity) {
      Equity = other.Equity;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OperationType = (global::ProtoOAChangeBalanceType) input.ReadEnum();
          break;
        }
        case 16: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          Balance = input.ReadInt64();
          break;
        }
        case 32: {
          Delta = input.ReadInt64();
          break;
        }
        case 40: {
          ChangeBalanceTimestamp = input.ReadInt64();
          break;
        }
        case 50: {
          ExternalNote = input.ReadString();
          break;
        }
        case 56: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 64: {
          Equity = input.ReadInt64();
          break;
        }
        case 72: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          OperationType = (global::ProtoOAChangeBalanceType) input.ReadEnum();
          break;
        }
        case 16: {
          BalanceHistoryId = input.ReadInt64();
          break;
        }
        case 24: {
          Balance = input.ReadInt64();
          break;
        }
        case 32: {
          Delta = input.ReadInt64();
          break;
        }
        case 40: {
          ChangeBalanceTimestamp = input.ReadInt64();
          break;
        }
        case 50: {
          ExternalNote = input.ReadString();
          break;
        }
        case 56: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 64: {
          Equity = input.ReadInt64();
          break;
        }
        case 72: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Execution entity. 
/// </summary>
public sealed partial class ProtoOADeal : pb::IMessage<ProtoOADeal>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOADeal> _parser = new pb::MessageParser<ProtoOADeal>(() => new ProtoOADeal());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOADeal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADeal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADeal(ProtoOADeal other) : this() {
    _hasBits0 = other._hasBits0;
    dealId_ = other.dealId_;
    orderId_ = other.orderId_;
    positionId_ = other.positionId_;
    volume_ = other.volume_;
    filledVolume_ = other.filledVolume_;
    symbolId_ = other.symbolId_;
    createTimestamp_ = other.createTimestamp_;
    executionTimestamp_ = other.executionTimestamp_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    executionPrice_ = other.executionPrice_;
    tradeSide_ = other.tradeSide_;
    dealStatus_ = other.dealStatus_;
    marginRate_ = other.marginRate_;
    commission_ = other.commission_;
    baseToUsdConversionRate_ = other.baseToUsdConversionRate_;
    closePositionDetail_ = other.closePositionDetail_ != null ? other.closePositionDetail_.Clone() : null;
    moneyDigits_ = other.moneyDigits_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADeal Clone() {
    return new ProtoOADeal(this);
  }

  /// <summary>Field number for the "dealId" field.</summary>
  public const int DealIdFieldNumber = 1;
  private readonly static long DealIdDefaultValue = 0L;

  private long dealId_;
  /// <summary>
  /// The unique ID of the execution deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DealId {
    get { if ((_hasBits0 & 1) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      dealId_ = value;
    }
  }
  /// <summary>Gets whether the "dealId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "dealId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "orderId" field.</summary>
  public const int OrderIdFieldNumber = 2;
  private readonly static long OrderIdDefaultValue = 0L;

  private long orderId_;
  /// <summary>
  /// Source order of the deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OrderId {
    get { if ((_hasBits0 & 2) != 0) { return orderId_; } else { return OrderIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      orderId_ = value;
    }
  }
  /// <summary>Gets whether the "orderId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOrderId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "orderId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOrderId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "positionId" field.</summary>
  public const int PositionIdFieldNumber = 3;
  private readonly static long PositionIdDefaultValue = 0L;

  private long positionId_;
  /// <summary>
  /// Source position of the deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PositionId {
    get { if ((_hasBits0 & 4) != 0) { return positionId_; } else { return PositionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      positionId_ = value;
    }
  }
  /// <summary>Gets whether the "positionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPositionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "positionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPositionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 4;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume sent for execution, in cents.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 8) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 8;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "filledVolume" field.</summary>
  public const int FilledVolumeFieldNumber = 5;
  private readonly static long FilledVolumeDefaultValue = 0L;

  private long filledVolume_;
  /// <summary>
  /// Filled volume, in cents.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long FilledVolume {
    get { if ((_hasBits0 & 16) != 0) { return filledVolume_; } else { return FilledVolumeDefaultValue; } }
    set {
      _hasBits0 |= 16;
      filledVolume_ = value;
    }
  }
  /// <summary>Gets whether the "filledVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasFilledVolume {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "filledVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearFilledVolume() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 6;
  private readonly static long SymbolIdDefaultValue = 0L;

  private long symbolId_;
  /// <summary>
  /// The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SymbolId {
    get { if ((_hasBits0 & 32) != 0) { return symbolId_; } else { return SymbolIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      symbolId_ = value;
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "createTimestamp" field.</summary>
  public const int CreateTimestampFieldNumber = 7;
  private readonly static long CreateTimestampDefaultValue = 0L;

  private long createTimestamp_;
  /// <summary>
  /// Time when the deal was sent for execution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTimestamp {
    get { if ((_hasBits0 & 64) != 0) { return createTimestamp_; } else { return CreateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 64;
      createTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "createTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCreateTimestamp {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "createTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCreateTimestamp() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "executionTimestamp" field.</summary>
  public const int ExecutionTimestampFieldNumber = 8;
  private readonly static long ExecutionTimestampDefaultValue = 0L;

  private long executionTimestamp_;
  /// <summary>
  /// Time when the deal was executed.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExecutionTimestamp {
    get { if ((_hasBits0 & 128) != 0) { return executionTimestamp_; } else { return ExecutionTimestampDefaultValue; } }
    set {
      _hasBits0 |= 128;
      executionTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "executionTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionTimestamp {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "executionTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionTimestamp() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 9;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  /// <summary>
  /// Timestamp when the deal was created, executed or rejected.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 256) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 256;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "executionPrice" field.</summary>
  public const int ExecutionPriceFieldNumber = 10;
  private readonly static double ExecutionPriceDefaultValue = 0D;

  private double executionPrice_;
  /// <summary>
  /// Execution price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double ExecutionPrice {
    get { if ((_hasBits0 & 512) != 0) { return executionPrice_; } else { return ExecutionPriceDefaultValue; } }
    set {
      _hasBits0 |= 512;
      executionPrice_ = value;
    }
  }
  /// <summary>Gets whether the "executionPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasExecutionPrice {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "executionPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearExecutionPrice() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "tradeSide" field.</summary>
  public const int TradeSideFieldNumber = 11;
  private readonly static global::ProtoOATradeSide TradeSideDefaultValue = global::ProtoOATradeSide.Buy;

  private global::ProtoOATradeSide tradeSide_;
  /// <summary>
  /// Buy/Sell.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATradeSide TradeSide {
    get { if ((_hasBits0 & 1024) != 0) { return tradeSide_; } else { return TradeSideDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      tradeSide_ = value;
    }
  }
  /// <summary>Gets whether the "tradeSide" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTradeSide {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "tradeSide" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTradeSide() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "dealStatus" field.</summary>
  public const int DealStatusFieldNumber = 12;
  private readonly static global::ProtoOADealStatus DealStatusDefaultValue = global::ProtoOADealStatus.Filled;

  private global::ProtoOADealStatus dealStatus_;
  /// <summary>
  /// Status of the deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOADealStatus DealStatus {
    get { if ((_hasBits0 & 2048) != 0) { return dealStatus_; } else { return DealStatusDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      dealStatus_ = value;
    }
  }
  /// <summary>Gets whether the "dealStatus" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDealStatus {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "dealStatus" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDealStatus() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "marginRate" field.</summary>
  public const int MarginRateFieldNumber = 13;
  private readonly static double MarginRateDefaultValue = 0D;

  private double marginRate_;
  /// <summary>
  /// Rate for used margin computation. Represented as Base/Deposit.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginRate {
    get { if ((_hasBits0 & 4096) != 0) { return marginRate_; } else { return MarginRateDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      marginRate_ = value;
    }
  }
  /// <summary>Gets whether the "marginRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginRate {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "marginRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginRate() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 14;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of trading commission associated with the deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 8192) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 8192;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~8192;
  }

  /// <summary>Field number for the "baseToUsdConversionRate" field.</summary>
  public const int BaseToUsdConversionRateFieldNumber = 15;
  private readonly static double BaseToUsdConversionRateDefaultValue = 0D;

  private double baseToUsdConversionRate_;
  /// <summary>
  /// Base to USD conversion rate on the time of deal execution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double BaseToUsdConversionRate {
    get { if ((_hasBits0 & 16384) != 0) { return baseToUsdConversionRate_; } else { return BaseToUsdConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 16384;
      baseToUsdConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "baseToUsdConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBaseToUsdConversionRate {
    get { return (_hasBits0 & 16384) != 0; }
  }
  /// <summary>Clears the value of the "baseToUsdConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBaseToUsdConversionRate() {
    _hasBits0 &= ~16384;
  }

  /// <summary>Field number for the "closePositionDetail" field.</summary>
  public const int ClosePositionDetailFieldNumber = 16;
  private global::ProtoOAClosePositionDetail closePositionDetail_;
  /// <summary>
  /// Closing position detail. Valid only for closing deal.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOAClosePositionDetail ClosePositionDetail {
    get { return closePositionDetail_; }
    set {
      closePositionDetail_ = value;
    }
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 17;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects commission.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 32768) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 32768;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 32768) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~32768;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADeal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOADeal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DealId != other.DealId) return false;
    if (OrderId != other.OrderId) return false;
    if (PositionId != other.PositionId) return false;
    if (Volume != other.Volume) return false;
    if (FilledVolume != other.FilledVolume) return false;
    if (SymbolId != other.SymbolId) return false;
    if (CreateTimestamp != other.CreateTimestamp) return false;
    if (ExecutionTimestamp != other.ExecutionTimestamp) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExecutionPrice, other.ExecutionPrice)) return false;
    if (TradeSide != other.TradeSide) return false;
    if (DealStatus != other.DealStatus) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginRate, other.MarginRate)) return false;
    if (Commission != other.Commission) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseToUsdConversionRate, other.BaseToUsdConversionRate)) return false;
    if (!object.Equals(ClosePositionDetail, other.ClosePositionDetail)) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDealId) hash ^= DealId.GetHashCode();
    if (HasOrderId) hash ^= OrderId.GetHashCode();
    if (HasPositionId) hash ^= PositionId.GetHashCode();
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasFilledVolume) hash ^= FilledVolume.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasCreateTimestamp) hash ^= CreateTimestamp.GetHashCode();
    if (HasExecutionTimestamp) hash ^= ExecutionTimestamp.GetHashCode();
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (HasExecutionPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExecutionPrice);
    if (HasTradeSide) hash ^= TradeSide.GetHashCode();
    if (HasDealStatus) hash ^= DealStatus.GetHashCode();
    if (HasMarginRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginRate);
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasBaseToUsdConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseToUsdConversionRate);
    if (closePositionDetail_ != null) hash ^= ClosePositionDetail.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(81);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(88);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(96);
      output.WriteEnum((int) DealStatus);
    }
    if (HasMarginRate) {
      output.WriteRawTag(105);
      output.WriteDouble(MarginRate);
    }
    if (HasCommission) {
      output.WriteRawTag(112);
      output.WriteInt64(Commission);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(121);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasDealId) {
      output.WriteRawTag(8);
      output.WriteInt64(DealId);
    }
    if (HasOrderId) {
      output.WriteRawTag(16);
      output.WriteInt64(OrderId);
    }
    if (HasPositionId) {
      output.WriteRawTag(24);
      output.WriteInt64(PositionId);
    }
    if (HasVolume) {
      output.WriteRawTag(32);
      output.WriteInt64(Volume);
    }
    if (HasFilledVolume) {
      output.WriteRawTag(40);
      output.WriteInt64(FilledVolume);
    }
    if (HasSymbolId) {
      output.WriteRawTag(48);
      output.WriteInt64(SymbolId);
    }
    if (HasCreateTimestamp) {
      output.WriteRawTag(56);
      output.WriteInt64(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      output.WriteRawTag(64);
      output.WriteInt64(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(72);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      output.WriteRawTag(81);
      output.WriteDouble(ExecutionPrice);
    }
    if (HasTradeSide) {
      output.WriteRawTag(88);
      output.WriteEnum((int) TradeSide);
    }
    if (HasDealStatus) {
      output.WriteRawTag(96);
      output.WriteEnum((int) DealStatus);
    }
    if (HasMarginRate) {
      output.WriteRawTag(105);
      output.WriteDouble(MarginRate);
    }
    if (HasCommission) {
      output.WriteRawTag(112);
      output.WriteInt64(Commission);
    }
    if (HasBaseToUsdConversionRate) {
      output.WriteRawTag(121);
      output.WriteDouble(BaseToUsdConversionRate);
    }
    if (closePositionDetail_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(ClosePositionDetail);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(MoneyDigits);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasDealId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
    }
    if (HasOrderId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrderId);
    }
    if (HasPositionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PositionId);
    }
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasFilledVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FilledVolume);
    }
    if (HasSymbolId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SymbolId);
    }
    if (HasCreateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimestamp);
    }
    if (HasExecutionTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionTimestamp);
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (HasExecutionPrice) {
      size += 1 + 8;
    }
    if (HasTradeSide) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TradeSide);
    }
    if (HasDealStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealStatus);
    }
    if (HasMarginRate) {
      size += 1 + 8;
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasBaseToUsdConversionRate) {
      size += 1 + 8;
    }
    if (closePositionDetail_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClosePositionDetail);
    }
    if (HasMoneyDigits) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOADeal other) {
    if (other == null) {
      return;
    }
    if (other.HasDealId) {
      DealId = other.DealId;
    }
    if (other.HasOrderId) {
      OrderId = other.OrderId;
    }
    if (other.HasPositionId) {
      PositionId = other.PositionId;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasFilledVolume) {
      FilledVolume = other.FilledVolume;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasCreateTimestamp) {
      CreateTimestamp = other.CreateTimestamp;
    }
    if (other.HasExecutionTimestamp) {
      ExecutionTimestamp = other.ExecutionTimestamp;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    if (other.HasExecutionPrice) {
      ExecutionPrice = other.ExecutionPrice;
    }
    if (other.HasTradeSide) {
      TradeSide = other.TradeSide;
    }
    if (other.HasDealStatus) {
      DealStatus = other.DealStatus;
    }
    if (other.HasMarginRate) {
      MarginRate = other.MarginRate;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasBaseToUsdConversionRate) {
      BaseToUsdConversionRate = other.BaseToUsdConversionRate;
    }
    if (other.closePositionDetail_ != null) {
      if (closePositionDetail_ == null) {
        ClosePositionDetail = new global::ProtoOAClosePositionDetail();
      }
      ClosePositionDetail.MergeFrom(other.ClosePositionDetail);
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
        case 40: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 81: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 88: {
          TradeSide = (global::ProtoOATradeSide) input.ReadEnum();
          break;
        }
        case 96: {
          DealStatus = (global::ProtoOADealStatus) input.ReadEnum();
          break;
        }
        case 105: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 112: {
          Commission = input.ReadInt64();
          break;
        }
        case 121: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 130: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoOAClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 136: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          DealId = input.ReadInt64();
          break;
        }
        case 16: {
          OrderId = input.ReadInt64();
          break;
        }
        case 24: {
          PositionId = input.ReadInt64();
          break;
        }
        case 32: {
          Volume = input.ReadInt64();
          break;
        }
        case 40: {
          FilledVolume = input.ReadInt64();
          break;
        }
        case 48: {
          SymbolId = input.ReadInt64();
          break;
        }
        case 56: {
          CreateTimestamp = input.ReadInt64();
          break;
        }
        case 64: {
          ExecutionTimestamp = input.ReadInt64();
          break;
        }
        case 72: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
        case 81: {
          ExecutionPrice = input.ReadDouble();
          break;
        }
        case 88: {
          TradeSide = (global::ProtoOATradeSide) input.ReadEnum();
          break;
        }
        case 96: {
          DealStatus = (global::ProtoOADealStatus) input.ReadEnum();
          break;
        }
        case 105: {
          MarginRate = input.ReadDouble();
          break;
        }
        case 112: {
          Commission = input.ReadInt64();
          break;
        }
        case 121: {
          BaseToUsdConversionRate = input.ReadDouble();
          break;
        }
        case 130: {
          if (closePositionDetail_ == null) {
            ClosePositionDetail = new global::ProtoOAClosePositionDetail();
          }
          input.ReadMessage(ClosePositionDetail);
          break;
        }
        case 136: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trading details for closing deal. 
/// </summary>
public sealed partial class ProtoOAClosePositionDetail : pb::IMessage<ProtoOAClosePositionDetail>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAClosePositionDetail> _parser = new pb::MessageParser<ProtoOAClosePositionDetail>(() => new ProtoOAClosePositionDetail());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAClosePositionDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAClosePositionDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAClosePositionDetail(ProtoOAClosePositionDetail other) : this() {
    _hasBits0 = other._hasBits0;
    entryPrice_ = other.entryPrice_;
    grossProfit_ = other.grossProfit_;
    swap_ = other.swap_;
    commission_ = other.commission_;
    balance_ = other.balance_;
    quoteToDepositConversionRate_ = other.quoteToDepositConversionRate_;
    closedVolume_ = other.closedVolume_;
    balanceVersion_ = other.balanceVersion_;
    moneyDigits_ = other.moneyDigits_;
    pnlConversionFee_ = other.pnlConversionFee_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAClosePositionDetail Clone() {
    return new ProtoOAClosePositionDetail(this);
  }

  /// <summary>Field number for the "entryPrice" field.</summary>
  public const int EntryPriceFieldNumber = 1;
  private readonly static double EntryPriceDefaultValue = 0D;

  private double entryPrice_;
  /// <summary>
  /// Position price at the moment of filling the closing order.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double EntryPrice {
    get { if ((_hasBits0 & 1) != 0) { return entryPrice_; } else { return EntryPriceDefaultValue; } }
    set {
      _hasBits0 |= 1;
      entryPrice_ = value;
    }
  }
  /// <summary>Gets whether the "entryPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEntryPrice {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "entryPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEntryPrice() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "grossProfit" field.</summary>
  public const int GrossProfitFieldNumber = 2;
  private readonly static long GrossProfitDefaultValue = 0L;

  private long grossProfit_;
  /// <summary>
  /// Amount of realized gross profit after closing deal execution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long GrossProfit {
    get { if ((_hasBits0 & 2) != 0) { return grossProfit_; } else { return GrossProfitDefaultValue; } }
    set {
      _hasBits0 |= 2;
      grossProfit_ = value;
    }
  }
  /// <summary>Gets whether the "grossProfit" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasGrossProfit {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "grossProfit" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearGrossProfit() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "swap" field.</summary>
  public const int SwapFieldNumber = 3;
  private readonly static long SwapDefaultValue = 0L;

  private long swap_;
  /// <summary>
  /// Amount of realized swap related to closed volume.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Swap {
    get { if ((_hasBits0 & 4) != 0) { return swap_; } else { return SwapDefaultValue; } }
    set {
      _hasBits0 |= 4;
      swap_ = value;
    }
  }
  /// <summary>Gets whether the "swap" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSwap {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "swap" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSwap() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "commission" field.</summary>
  public const int CommissionFieldNumber = 4;
  private readonly static long CommissionDefaultValue = 0L;

  private long commission_;
  /// <summary>
  /// Amount of realized commission related to closed volume.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Commission {
    get { if ((_hasBits0 & 8) != 0) { return commission_; } else { return CommissionDefaultValue; } }
    set {
      _hasBits0 |= 8;
      commission_ = value;
    }
  }
  /// <summary>Gets whether the "commission" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommission {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "commission" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommission() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "balance" field.</summary>
  public const int BalanceFieldNumber = 5;
  private readonly static long BalanceDefaultValue = 0L;

  private long balance_;
  /// <summary>
  /// Account balance after closing deal execution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Balance {
    get { if ((_hasBits0 & 16) != 0) { return balance_; } else { return BalanceDefaultValue; } }
    set {
      _hasBits0 |= 16;
      balance_ = value;
    }
  }
  /// <summary>Gets whether the "balance" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalance {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "balance" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalance() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "quoteToDepositConversionRate" field.</summary>
  public const int QuoteToDepositConversionRateFieldNumber = 6;
  private readonly static double QuoteToDepositConversionRateDefaultValue = 0D;

  private double quoteToDepositConversionRate_;
  /// <summary>
  /// Quote/Deposit currency conversion rate on the time of closing deal execution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double QuoteToDepositConversionRate {
    get { if ((_hasBits0 & 32) != 0) { return quoteToDepositConversionRate_; } else { return QuoteToDepositConversionRateDefaultValue; } }
    set {
      _hasBits0 |= 32;
      quoteToDepositConversionRate_ = value;
    }
  }
  /// <summary>Gets whether the "quoteToDepositConversionRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasQuoteToDepositConversionRate {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "quoteToDepositConversionRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearQuoteToDepositConversionRate() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "closedVolume" field.</summary>
  public const int ClosedVolumeFieldNumber = 7;
  private readonly static long ClosedVolumeDefaultValue = 0L;

  private long closedVolume_;
  /// <summary>
  /// Closed volume in cents.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ClosedVolume {
    get { if ((_hasBits0 & 64) != 0) { return closedVolume_; } else { return ClosedVolumeDefaultValue; } }
    set {
      _hasBits0 |= 64;
      closedVolume_ = value;
    }
  }
  /// <summary>Gets whether the "closedVolume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasClosedVolume {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "closedVolume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearClosedVolume() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "balanceVersion" field.</summary>
  public const int BalanceVersionFieldNumber = 8;
  private readonly static long BalanceVersionDefaultValue = 0L;

  private long balanceVersion_;
  /// <summary>
  /// Balance version of the account related to closing deal operation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BalanceVersion {
    get { if ((_hasBits0 & 128) != 0) { return balanceVersion_; } else { return BalanceVersionDefaultValue; } }
    set {
      _hasBits0 |= 128;
      balanceVersion_ = value;
    }
  }
  /// <summary>Gets whether the "balanceVersion" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBalanceVersion {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "balanceVersion" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBalanceVersion() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "moneyDigits" field.</summary>
  public const int MoneyDigitsFieldNumber = 9;
  private readonly static uint MoneyDigitsDefaultValue = 0;

  private uint moneyDigits_;
  /// <summary>
  /// Specifies the exponent of the monetary values. E.g. moneyDigits = 8 must be interpret as business value multiplied by 10^8, then real balance would be 10053099944 / 10^8 = 100.53099944. Affects grossProfit, swap, commission, balance, pnlConversionFee.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint MoneyDigits {
    get { if ((_hasBits0 & 256) != 0) { return moneyDigits_; } else { return MoneyDigitsDefaultValue; } }
    set {
      _hasBits0 |= 256;
      moneyDigits_ = value;
    }
  }
  /// <summary>Gets whether the "moneyDigits" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMoneyDigits {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "moneyDigits" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMoneyDigits() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "pnlConversionFee" field.</summary>
  public const int PnlConversionFeeFieldNumber = 10;
  private readonly static long PnlConversionFeeDefaultValue = 0L;

  private long pnlConversionFee_;
  /// <summary>
  /// Fee for conversion applied to the Deal in account's ccy when trader symbol's quote asset id &lt;> ProtoOATrader.depositAssetId.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PnlConversionFee {
    get { if ((_hasBits0 & 512) != 0) { return pnlConversionFee_; } else { return PnlConversionFeeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      pnlConversionFee_ = value;
    }
  }
  /// <summary>Gets whether the "pnlConversionFee" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPnlConversionFee {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "pnlConversionFee" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPnlConversionFee() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAClosePositionDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAClosePositionDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EntryPrice, other.EntryPrice)) return false;
    if (GrossProfit != other.GrossProfit) return false;
    if (Swap != other.Swap) return false;
    if (Commission != other.Commission) return false;
    if (Balance != other.Balance) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(QuoteToDepositConversionRate, other.QuoteToDepositConversionRate)) return false;
    if (ClosedVolume != other.ClosedVolume) return false;
    if (BalanceVersion != other.BalanceVersion) return false;
    if (MoneyDigits != other.MoneyDigits) return false;
    if (PnlConversionFee != other.PnlConversionFee) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasEntryPrice) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EntryPrice);
    if (HasGrossProfit) hash ^= GrossProfit.GetHashCode();
    if (HasSwap) hash ^= Swap.GetHashCode();
    if (HasCommission) hash ^= Commission.GetHashCode();
    if (HasBalance) hash ^= Balance.GetHashCode();
    if (HasQuoteToDepositConversionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(QuoteToDepositConversionRate);
    if (HasClosedVolume) hash ^= ClosedVolume.GetHashCode();
    if (HasBalanceVersion) hash ^= BalanceVersion.GetHashCode();
    if (HasMoneyDigits) hash ^= MoneyDigits.GetHashCode();
    if (HasPnlConversionFee) hash ^= PnlConversionFee.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasEntryPrice) {
      output.WriteRawTag(9);
      output.WriteDouble(EntryPrice);
    }
    if (HasGrossProfit) {
      output.WriteRawTag(16);
      output.WriteInt64(GrossProfit);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasBalance) {
      output.WriteRawTag(40);
      output.WriteInt64(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(49);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(56);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(64);
      output.WriteInt64(BalanceVersion);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(72);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(80);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasEntryPrice) {
      output.WriteRawTag(9);
      output.WriteDouble(EntryPrice);
    }
    if (HasGrossProfit) {
      output.WriteRawTag(16);
      output.WriteInt64(GrossProfit);
    }
    if (HasSwap) {
      output.WriteRawTag(24);
      output.WriteInt64(Swap);
    }
    if (HasCommission) {
      output.WriteRawTag(32);
      output.WriteInt64(Commission);
    }
    if (HasBalance) {
      output.WriteRawTag(40);
      output.WriteInt64(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      output.WriteRawTag(49);
      output.WriteDouble(QuoteToDepositConversionRate);
    }
    if (HasClosedVolume) {
      output.WriteRawTag(56);
      output.WriteInt64(ClosedVolume);
    }
    if (HasBalanceVersion) {
      output.WriteRawTag(64);
      output.WriteInt64(BalanceVersion);
    }
    if (HasMoneyDigits) {
      output.WriteRawTag(72);
      output.WriteUInt32(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      output.WriteRawTag(80);
      output.WriteInt64(PnlConversionFee);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasEntryPrice) {
      size += 1 + 8;
    }
    if (HasGrossProfit) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GrossProfit);
    }
    if (HasSwap) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Swap);
    }
    if (HasCommission) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Commission);
    }
    if (HasBalance) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
    }
    if (HasQuoteToDepositConversionRate) {
      size += 1 + 8;
    }
    if (HasClosedVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClosedVolume);
    }
    if (HasBalanceVersion) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BalanceVersion);
    }
    if (HasMoneyDigits) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoneyDigits);
    }
    if (HasPnlConversionFee) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PnlConversionFee);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAClosePositionDetail other) {
    if (other == null) {
      return;
    }
    if (other.HasEntryPrice) {
      EntryPrice = other.EntryPrice;
    }
    if (other.HasGrossProfit) {
      GrossProfit = other.GrossProfit;
    }
    if (other.HasSwap) {
      Swap = other.Swap;
    }
    if (other.HasCommission) {
      Commission = other.Commission;
    }
    if (other.HasBalance) {
      Balance = other.Balance;
    }
    if (other.HasQuoteToDepositConversionRate) {
      QuoteToDepositConversionRate = other.QuoteToDepositConversionRate;
    }
    if (other.HasClosedVolume) {
      ClosedVolume = other.ClosedVolume;
    }
    if (other.HasBalanceVersion) {
      BalanceVersion = other.BalanceVersion;
    }
    if (other.HasMoneyDigits) {
      MoneyDigits = other.MoneyDigits;
    }
    if (other.HasPnlConversionFee) {
      PnlConversionFee = other.PnlConversionFee;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 9: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 16: {
          GrossProfit = input.ReadInt64();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 40: {
          Balance = input.ReadInt64();
          break;
        }
        case 49: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 56: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 64: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 72: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 80: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 9: {
          EntryPrice = input.ReadDouble();
          break;
        }
        case 16: {
          GrossProfit = input.ReadInt64();
          break;
        }
        case 24: {
          Swap = input.ReadInt64();
          break;
        }
        case 32: {
          Commission = input.ReadInt64();
          break;
        }
        case 40: {
          Balance = input.ReadInt64();
          break;
        }
        case 49: {
          QuoteToDepositConversionRate = input.ReadDouble();
          break;
        }
        case 56: {
          ClosedVolume = input.ReadInt64();
          break;
        }
        case 64: {
          BalanceVersion = input.ReadInt64();
          break;
        }
        case 72: {
          MoneyDigits = input.ReadUInt32();
          break;
        }
        case 80: {
          PnlConversionFee = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Historical Trendbar entity. 
/// </summary>
public sealed partial class ProtoOATrendbar : pb::IMessage<ProtoOATrendbar>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOATrendbar> _parser = new pb::MessageParser<ProtoOATrendbar>(() => new ProtoOATrendbar());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOATrendbar> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrendbar() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrendbar(ProtoOATrendbar other) : this() {
    _hasBits0 = other._hasBits0;
    volume_ = other.volume_;
    period_ = other.period_;
    low_ = other.low_;
    deltaOpen_ = other.deltaOpen_;
    deltaClose_ = other.deltaClose_;
    deltaHigh_ = other.deltaHigh_;
    utcTimestampInMinutes_ = other.utcTimestampInMinutes_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATrendbar Clone() {
    return new ProtoOATrendbar(this);
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 3;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Bar volume in ticks.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "period" field.</summary>
  public const int PeriodFieldNumber = 4;
  private readonly static global::ProtoOATrendbarPeriod PeriodDefaultValue = global::ProtoOATrendbarPeriod.M1;

  private global::ProtoOATrendbarPeriod period_;
  /// <summary>
  /// Bar period.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOATrendbarPeriod Period {
    get { if ((_hasBits0 & 2) != 0) { return period_; } else { return PeriodDefaultValue; } }
    set {
      _hasBits0 |= 2;
      period_ = value;
    }
  }
  /// <summary>Gets whether the "period" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPeriod {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "period" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPeriod() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "low" field.</summary>
  public const int LowFieldNumber = 5;
  private readonly static long LowDefaultValue = 0L;

  private long low_;
  /// <summary>
  /// Low price of the bar.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Low {
    get { if ((_hasBits0 & 4) != 0) { return low_; } else { return LowDefaultValue; } }
    set {
      _hasBits0 |= 4;
      low_ = value;
    }
  }
  /// <summary>Gets whether the "low" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLow {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "low" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLow() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "deltaOpen" field.</summary>
  public const int DeltaOpenFieldNumber = 6;
  private readonly static ulong DeltaOpenDefaultValue = 0UL;

  private ulong deltaOpen_;
  /// <summary>
  /// Delta between open and low price. open = low + deltaOpen.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaOpen {
    get { if ((_hasBits0 & 8) != 0) { return deltaOpen_; } else { return DeltaOpenDefaultValue; } }
    set {
      _hasBits0 |= 8;
      deltaOpen_ = value;
    }
  }
  /// <summary>Gets whether the "deltaOpen" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaOpen {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "deltaOpen" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaOpen() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "deltaClose" field.</summary>
  public const int DeltaCloseFieldNumber = 7;
  private readonly static ulong DeltaCloseDefaultValue = 0UL;

  private ulong deltaClose_;
  /// <summary>
  /// Delta between close and low price. close = low + deltaClose.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaClose {
    get { if ((_hasBits0 & 16) != 0) { return deltaClose_; } else { return DeltaCloseDefaultValue; } }
    set {
      _hasBits0 |= 16;
      deltaClose_ = value;
    }
  }
  /// <summary>Gets whether the "deltaClose" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaClose {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "deltaClose" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaClose() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "deltaHigh" field.</summary>
  public const int DeltaHighFieldNumber = 8;
  private readonly static ulong DeltaHighDefaultValue = 0UL;

  private ulong deltaHigh_;
  /// <summary>
  /// Delta between high and low price. high = low + deltaHigh.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong DeltaHigh {
    get { if ((_hasBits0 & 32) != 0) { return deltaHigh_; } else { return DeltaHighDefaultValue; } }
    set {
      _hasBits0 |= 32;
      deltaHigh_ = value;
    }
  }
  /// <summary>Gets whether the "deltaHigh" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDeltaHigh {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "deltaHigh" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDeltaHigh() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "utcTimestampInMinutes" field.</summary>
  public const int UtcTimestampInMinutesFieldNumber = 9;
  private readonly static uint UtcTimestampInMinutesDefaultValue = 0;

  private uint utcTimestampInMinutes_;
  /// <summary>
  /// Timestamp of the bar. Equal to the timestamp of the open tick.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint UtcTimestampInMinutes {
    get { if ((_hasBits0 & 64) != 0) { return utcTimestampInMinutes_; } else { return UtcTimestampInMinutesDefaultValue; } }
    set {
      _hasBits0 |= 64;
      utcTimestampInMinutes_ = value;
    }
  }
  /// <summary>Gets whether the "utcTimestampInMinutes" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcTimestampInMinutes {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "utcTimestampInMinutes" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcTimestampInMinutes() {
    _hasBits0 &= ~64;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATrendbar);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOATrendbar other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Volume != other.Volume) return false;
    if (Period != other.Period) return false;
    if (Low != other.Low) return false;
    if (DeltaOpen != other.DeltaOpen) return false;
    if (DeltaClose != other.DeltaClose) return false;
    if (DeltaHigh != other.DeltaHigh) return false;
    if (UtcTimestampInMinutes != other.UtcTimestampInMinutes) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasPeriod) hash ^= Period.GetHashCode();
    if (HasLow) hash ^= Low.GetHashCode();
    if (HasDeltaOpen) hash ^= DeltaOpen.GetHashCode();
    if (HasDeltaClose) hash ^= DeltaClose.GetHashCode();
    if (HasDeltaHigh) hash ^= DeltaHigh.GetHashCode();
    if (HasUtcTimestampInMinutes) hash ^= UtcTimestampInMinutes.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasPeriod) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Period);
    }
    if (HasLow) {
      output.WriteRawTag(40);
      output.WriteInt64(Low);
    }
    if (HasDeltaOpen) {
      output.WriteRawTag(48);
      output.WriteUInt64(DeltaOpen);
    }
    if (HasDeltaClose) {
      output.WriteRawTag(56);
      output.WriteUInt64(DeltaClose);
    }
    if (HasDeltaHigh) {
      output.WriteRawTag(64);
      output.WriteUInt64(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      output.WriteRawTag(72);
      output.WriteUInt32(UtcTimestampInMinutes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasVolume) {
      output.WriteRawTag(24);
      output.WriteInt64(Volume);
    }
    if (HasPeriod) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Period);
    }
    if (HasLow) {
      output.WriteRawTag(40);
      output.WriteInt64(Low);
    }
    if (HasDeltaOpen) {
      output.WriteRawTag(48);
      output.WriteUInt64(DeltaOpen);
    }
    if (HasDeltaClose) {
      output.WriteRawTag(56);
      output.WriteUInt64(DeltaClose);
    }
    if (HasDeltaHigh) {
      output.WriteRawTag(64);
      output.WriteUInt64(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      output.WriteRawTag(72);
      output.WriteUInt32(UtcTimestampInMinutes);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasPeriod) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Period);
    }
    if (HasLow) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Low);
    }
    if (HasDeltaOpen) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaOpen);
    }
    if (HasDeltaClose) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaClose);
    }
    if (HasDeltaHigh) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeltaHigh);
    }
    if (HasUtcTimestampInMinutes) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UtcTimestampInMinutes);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOATrendbar other) {
    if (other == null) {
      return;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasPeriod) {
      Period = other.Period;
    }
    if (other.HasLow) {
      Low = other.Low;
    }
    if (other.HasDeltaOpen) {
      DeltaOpen = other.DeltaOpen;
    }
    if (other.HasDeltaClose) {
      DeltaClose = other.DeltaClose;
    }
    if (other.HasDeltaHigh) {
      DeltaHigh = other.DeltaHigh;
    }
    if (other.HasUtcTimestampInMinutes) {
      UtcTimestampInMinutes = other.UtcTimestampInMinutes;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 40: {
          Low = input.ReadInt64();
          break;
        }
        case 48: {
          DeltaOpen = input.ReadUInt64();
          break;
        }
        case 56: {
          DeltaClose = input.ReadUInt64();
          break;
        }
        case 64: {
          DeltaHigh = input.ReadUInt64();
          break;
        }
        case 72: {
          UtcTimestampInMinutes = input.ReadUInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 24: {
          Volume = input.ReadInt64();
          break;
        }
        case 32: {
          Period = (global::ProtoOATrendbarPeriod) input.ReadEnum();
          break;
        }
        case 40: {
          Low = input.ReadInt64();
          break;
        }
        case 48: {
          DeltaOpen = input.ReadUInt64();
          break;
        }
        case 56: {
          DeltaClose = input.ReadUInt64();
          break;
        }
        case 64: {
          DeltaHigh = input.ReadUInt64();
          break;
        }
        case 72: {
          UtcTimestampInMinutes = input.ReadUInt32();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Expected margin computation entity. 
/// </summary>
public sealed partial class ProtoOAExpectedMargin : pb::IMessage<ProtoOAExpectedMargin>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAExpectedMargin> _parser = new pb::MessageParser<ProtoOAExpectedMargin>(() => new ProtoOAExpectedMargin());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAExpectedMargin> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAExpectedMargin() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAExpectedMargin(ProtoOAExpectedMargin other) : this() {
    _hasBits0 = other._hasBits0;
    volume_ = other.volume_;
    buyMargin_ = other.buyMargin_;
    sellMargin_ = other.sellMargin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAExpectedMargin Clone() {
    return new ProtoOAExpectedMargin(this);
  }

  /// <summary>Field number for the "volume" field.</summary>
  public const int VolumeFieldNumber = 1;
  private readonly static long VolumeDefaultValue = 0L;

  private long volume_;
  /// <summary>
  /// Volume in cents used for computation of expected margin.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Volume {
    get { if ((_hasBits0 & 1) != 0) { return volume_; } else { return VolumeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      volume_ = value;
    }
  }
  /// <summary>Gets whether the "volume" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasVolume {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "volume" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearVolume() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "buyMargin" field.</summary>
  public const int BuyMarginFieldNumber = 2;
  private readonly static long BuyMarginDefaultValue = 0L;

  private long buyMargin_;
  /// <summary>
  /// Buy margin amount.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BuyMargin {
    get { if ((_hasBits0 & 2) != 0) { return buyMargin_; } else { return BuyMarginDefaultValue; } }
    set {
      _hasBits0 |= 2;
      buyMargin_ = value;
    }
  }
  /// <summary>Gets whether the "buyMargin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBuyMargin {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "buyMargin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBuyMargin() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "sellMargin" field.</summary>
  public const int SellMarginFieldNumber = 3;
  private readonly static long SellMarginDefaultValue = 0L;

  private long sellMargin_;
  /// <summary>
  /// Sell margin amount.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long SellMargin {
    get { if ((_hasBits0 & 4) != 0) { return sellMargin_; } else { return SellMarginDefaultValue; } }
    set {
      _hasBits0 |= 4;
      sellMargin_ = value;
    }
  }
  /// <summary>Gets whether the "sellMargin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSellMargin {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "sellMargin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSellMargin() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAExpectedMargin);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAExpectedMargin other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Volume != other.Volume) return false;
    if (BuyMargin != other.BuyMargin) return false;
    if (SellMargin != other.SellMargin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVolume) hash ^= Volume.GetHashCode();
    if (HasBuyMargin) hash ^= BuyMargin.GetHashCode();
    if (HasSellMargin) hash ^= SellMargin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasVolume) {
      output.WriteRawTag(8);
      output.WriteInt64(Volume);
    }
    if (HasBuyMargin) {
      output.WriteRawTag(16);
      output.WriteInt64(BuyMargin);
    }
    if (HasSellMargin) {
      output.WriteRawTag(24);
      output.WriteInt64(SellMargin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasVolume) {
      output.WriteRawTag(8);
      output.WriteInt64(Volume);
    }
    if (HasBuyMargin) {
      output.WriteRawTag(16);
      output.WriteInt64(BuyMargin);
    }
    if (HasSellMargin) {
      output.WriteRawTag(24);
      output.WriteInt64(SellMargin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasVolume) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
    }
    if (HasBuyMargin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuyMargin);
    }
    if (HasSellMargin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SellMargin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAExpectedMargin other) {
    if (other == null) {
      return;
    }
    if (other.HasVolume) {
      Volume = other.Volume;
    }
    if (other.HasBuyMargin) {
      BuyMargin = other.BuyMargin;
    }
    if (other.HasSellMargin) {
      SellMargin = other.SellMargin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Volume = input.ReadInt64();
          break;
        }
        case 16: {
          BuyMargin = input.ReadInt64();
          break;
        }
        case 24: {
          SellMargin = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Volume = input.ReadInt64();
          break;
        }
        case 16: {
          BuyMargin = input.ReadInt64();
          break;
        }
        case 24: {
          SellMargin = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Historical tick data type. 
/// </summary>
public sealed partial class ProtoOATickData : pb::IMessage<ProtoOATickData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOATickData> _parser = new pb::MessageParser<ProtoOATickData>(() => new ProtoOATickData());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOATickData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATickData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATickData(ProtoOATickData other) : this() {
    _hasBits0 = other._hasBits0;
    timestamp_ = other.timestamp_;
    tick_ = other.tick_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOATickData Clone() {
    return new ProtoOATickData(this);
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 1;
  private readonly static long TimestampDefaultValue = 0L;

  private long timestamp_;
  /// <summary>
  /// Tick timestamp.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Timestamp {
    get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      timestamp_ = value;
    }
  }
  /// <summary>Gets whether the "timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "tick" field.</summary>
  public const int TickFieldNumber = 2;
  private readonly static long TickDefaultValue = 0L;

  private long tick_;
  /// <summary>
  /// Tick price.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Tick {
    get { if ((_hasBits0 & 2) != 0) { return tick_; } else { return TickDefaultValue; } }
    set {
      _hasBits0 |= 2;
      tick_ = value;
    }
  }
  /// <summary>Gets whether the "tick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTick {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "tick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTick() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOATickData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOATickData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Timestamp != other.Timestamp) return false;
    if (Tick != other.Tick) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasTimestamp) hash ^= Timestamp.GetHashCode();
    if (HasTick) hash ^= Tick.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasTimestamp) {
      output.WriteRawTag(8);
      output.WriteInt64(Timestamp);
    }
    if (HasTick) {
      output.WriteRawTag(16);
      output.WriteInt64(Tick);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasTimestamp) {
      output.WriteRawTag(8);
      output.WriteInt64(Timestamp);
    }
    if (HasTick) {
      output.WriteRawTag(16);
      output.WriteInt64(Tick);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
    }
    if (HasTick) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOATickData other) {
    if (other == null) {
      return;
    }
    if (other.HasTimestamp) {
      Timestamp = other.Timestamp;
    }
    if (other.HasTick) {
      Tick = other.Tick;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 16: {
          Tick = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Timestamp = input.ReadInt64();
          break;
        }
        case 16: {
          Tick = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trader profile entity. Empty due to GDPR. 
/// </summary>
public sealed partial class ProtoOACtidProfile : pb::IMessage<ProtoOACtidProfile>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOACtidProfile> _parser = new pb::MessageParser<ProtoOACtidProfile>(() => new ProtoOACtidProfile());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOACtidProfile> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidProfile() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidProfile(ProtoOACtidProfile other) : this() {
    _hasBits0 = other._hasBits0;
    userId_ = other.userId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidProfile Clone() {
    return new ProtoOACtidProfile(this);
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 1;
  private readonly static long UserIdDefaultValue = 0L;

  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UserId {
    get { if ((_hasBits0 & 1) != 0) { return userId_; } else { return UserIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      userId_ = value;
    }
  }
  /// <summary>Gets whether the "userId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUserId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "userId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUserId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOACtidProfile);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOACtidProfile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasUserId) hash ^= UserId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasUserId) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasUserId) {
      output.WriteRawTag(8);
      output.WriteInt64(UserId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasUserId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOACtidProfile other) {
    if (other == null) {
      return;
    }
    if (other.HasUserId) {
      UserId = other.UserId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          UserId = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Trader account entity. 
/// </summary>
public sealed partial class ProtoOACtidTraderAccount : pb::IMessage<ProtoOACtidTraderAccount>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOACtidTraderAccount> _parser = new pb::MessageParser<ProtoOACtidTraderAccount>(() => new ProtoOACtidTraderAccount());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOACtidTraderAccount> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidTraderAccount() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidTraderAccount(ProtoOACtidTraderAccount other) : this() {
    _hasBits0 = other._hasBits0;
    ctidTraderAccountId_ = other.ctidTraderAccountId_;
    isLive_ = other.isLive_;
    traderLogin_ = other.traderLogin_;
    lastClosingDealTimestamp_ = other.lastClosingDealTimestamp_;
    lastBalanceUpdateTimestamp_ = other.lastBalanceUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOACtidTraderAccount Clone() {
    return new ProtoOACtidTraderAccount(this);
  }

  /// <summary>Field number for the "ctidTraderAccountId" field.</summary>
  public const int CtidTraderAccountIdFieldNumber = 1;
  private readonly static ulong CtidTraderAccountIdDefaultValue = 0UL;

  private ulong ctidTraderAccountId_;
  /// <summary>
  /// Unique identifier of the trader's account. Used to match responses to trader's accounts.cTrader platform. Different brokers might have different ids
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong CtidTraderAccountId {
    get { if ((_hasBits0 & 1) != 0) { return ctidTraderAccountId_; } else { return CtidTraderAccountIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      ctidTraderAccountId_ = value;
    }
  }
  /// <summary>Gets whether the "ctidTraderAccountId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCtidTraderAccountId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ctidTraderAccountId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCtidTraderAccountId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "isLive" field.</summary>
  public const int IsLiveFieldNumber = 2;
  private readonly static bool IsLiveDefaultValue = false;

  private bool isLive_;
  /// <summary>
  /// If TRUE then the account is belong to Live environment and live host must be used to authorize it
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsLive {
    get { if ((_hasBits0 & 2) != 0) { return isLive_; } else { return IsLiveDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isLive_ = value;
    }
  }
  /// <summary>Gets whether the "isLive" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsLive {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "isLive" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsLive() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "traderLogin" field.</summary>
  public const int TraderLoginFieldNumber = 3;
  private readonly static long TraderLoginDefaultValue = 0L;

  private long traderLogin_;
  /// <summary>
  /// TraderLogin for a specific account. Value is displayed on Client App UI
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long TraderLogin {
    get { if ((_hasBits0 & 4) != 0) { return traderLogin_; } else { return TraderLoginDefaultValue; } }
    set {
      _hasBits0 |= 4;
      traderLogin_ = value;
    }
  }
  /// <summary>Gets whether the "traderLogin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTraderLogin {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "traderLogin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTraderLogin() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "lastClosingDealTimestamp" field.</summary>
  public const int LastClosingDealTimestampFieldNumber = 4;
  private readonly static long LastClosingDealTimestampDefaultValue = 0L;

  private long lastClosingDealTimestamp_;
  /// <summary>
  /// Timestamp of the last ProtoOAClosePositionDetail happened to this account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastClosingDealTimestamp {
    get { if ((_hasBits0 & 8) != 0) { return lastClosingDealTimestamp_; } else { return LastClosingDealTimestampDefaultValue; } }
    set {
      _hasBits0 |= 8;
      lastClosingDealTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "lastClosingDealTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastClosingDealTimestamp {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "lastClosingDealTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastClosingDealTimestamp() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "lastBalanceUpdateTimestamp" field.</summary>
  public const int LastBalanceUpdateTimestampFieldNumber = 5;
  private readonly static long LastBalanceUpdateTimestampDefaultValue = 0L;

  private long lastBalanceUpdateTimestamp_;
  /// <summary>
  /// Timestamp of the last ProtoOADepositWithdraw happened to this account.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastBalanceUpdateTimestamp {
    get { if ((_hasBits0 & 16) != 0) { return lastBalanceUpdateTimestamp_; } else { return LastBalanceUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 16;
      lastBalanceUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "lastBalanceUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastBalanceUpdateTimestamp {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "lastBalanceUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastBalanceUpdateTimestamp() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOACtidTraderAccount);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOACtidTraderAccount other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CtidTraderAccountId != other.CtidTraderAccountId) return false;
    if (IsLive != other.IsLive) return false;
    if (TraderLogin != other.TraderLogin) return false;
    if (LastClosingDealTimestamp != other.LastClosingDealTimestamp) return false;
    if (LastBalanceUpdateTimestamp != other.LastBalanceUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCtidTraderAccountId) hash ^= CtidTraderAccountId.GetHashCode();
    if (HasIsLive) hash ^= IsLive.GetHashCode();
    if (HasTraderLogin) hash ^= TraderLogin.GetHashCode();
    if (HasLastClosingDealTimestamp) hash ^= LastClosingDealTimestamp.GetHashCode();
    if (HasLastBalanceUpdateTimestamp) hash ^= LastBalanceUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CtidTraderAccountId);
    }
    if (HasIsLive) {
      output.WriteRawTag(16);
      output.WriteBool(IsLive);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderLogin);
    }
    if (HasLastClosingDealTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(LastClosingDealTimestamp);
    }
    if (HasLastBalanceUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(LastBalanceUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasCtidTraderAccountId) {
      output.WriteRawTag(8);
      output.WriteUInt64(CtidTraderAccountId);
    }
    if (HasIsLive) {
      output.WriteRawTag(16);
      output.WriteBool(IsLive);
    }
    if (HasTraderLogin) {
      output.WriteRawTag(24);
      output.WriteInt64(TraderLogin);
    }
    if (HasLastClosingDealTimestamp) {
      output.WriteRawTag(32);
      output.WriteInt64(LastClosingDealTimestamp);
    }
    if (HasLastBalanceUpdateTimestamp) {
      output.WriteRawTag(40);
      output.WriteInt64(LastBalanceUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasCtidTraderAccountId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CtidTraderAccountId);
    }
    if (HasIsLive) {
      size += 1 + 1;
    }
    if (HasTraderLogin) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TraderLogin);
    }
    if (HasLastClosingDealTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastClosingDealTimestamp);
    }
    if (HasLastBalanceUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBalanceUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOACtidTraderAccount other) {
    if (other == null) {
      return;
    }
    if (other.HasCtidTraderAccountId) {
      CtidTraderAccountId = other.CtidTraderAccountId;
    }
    if (other.HasIsLive) {
      IsLive = other.IsLive;
    }
    if (other.HasTraderLogin) {
      TraderLogin = other.TraderLogin;
    }
    if (other.HasLastClosingDealTimestamp) {
      LastClosingDealTimestamp = other.LastClosingDealTimestamp;
    }
    if (other.HasLastBalanceUpdateTimestamp) {
      LastBalanceUpdateTimestamp = other.LastBalanceUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CtidTraderAccountId = input.ReadUInt64();
          break;
        }
        case 16: {
          IsLive = input.ReadBool();
          break;
        }
        case 24: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 32: {
          LastClosingDealTimestamp = input.ReadInt64();
          break;
        }
        case 40: {
          LastBalanceUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          CtidTraderAccountId = input.ReadUInt64();
          break;
        }
        case 16: {
          IsLive = input.ReadBool();
          break;
        }
        case 24: {
          TraderLogin = input.ReadInt64();
          break;
        }
        case 32: {
          LastClosingDealTimestamp = input.ReadInt64();
          break;
        }
        case 40: {
          LastBalanceUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Asset class entity. 
/// </summary>
public sealed partial class ProtoOAAssetClass : pb::IMessage<ProtoOAAssetClass>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAAssetClass> _parser = new pb::MessageParser<ProtoOAAssetClass>(() => new ProtoOAAssetClass());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAAssetClass> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAssetClass() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAssetClass(ProtoOAAssetClass other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAAssetClass Clone() {
    return new ProtoOAAssetClass(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static long IdDefaultValue = 0L;

  private long id_;
  /// <summary>
  /// Unique asset ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Asset class name.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAAssetClass);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAAssetClass other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAAssetClass other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Depth of market entity. 
/// </summary>
public sealed partial class ProtoOADepthQuote : pb::IMessage<ProtoOADepthQuote>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOADepthQuote> _parser = new pb::MessageParser<ProtoOADepthQuote>(() => new ProtoOADepthQuote());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOADepthQuote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepthQuote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepthQuote(ProtoOADepthQuote other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    size_ = other.size_;
    bid_ = other.bid_;
    ask_ = other.ask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOADepthQuote Clone() {
    return new ProtoOADepthQuote(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static ulong IdDefaultValue = 0UL;

  private ulong id_;
  /// <summary>
  /// Quote ID.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "size" field.</summary>
  public const int SizeFieldNumber = 3;
  private readonly static ulong SizeDefaultValue = 0UL;

  private ulong size_;
  /// <summary>
  /// Quote size in cents.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Size {
    get { if ((_hasBits0 & 2) != 0) { return size_; } else { return SizeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      size_ = value;
    }
  }
  /// <summary>Gets whether the "size" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSize {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "size" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSize() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "bid" field.</summary>
  public const int BidFieldNumber = 4;
  private readonly static ulong BidDefaultValue = 0UL;

  private ulong bid_;
  /// <summary>
  /// Bid price for bid quotes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Bid {
    get { if ((_hasBits0 & 4) != 0) { return bid_; } else { return BidDefaultValue; } }
    set {
      _hasBits0 |= 4;
      bid_ = value;
    }
  }
  /// <summary>Gets whether the "bid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBid {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "bid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBid() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "ask" field.</summary>
  public const int AskFieldNumber = 5;
  private readonly static ulong AskDefaultValue = 0UL;

  private ulong ask_;
  /// <summary>
  /// Ask price for ask quotes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong Ask {
    get { if ((_hasBits0 & 8) != 0) { return ask_; } else { return AskDefaultValue; } }
    set {
      _hasBits0 |= 8;
      ask_ = value;
    }
  }
  /// <summary>Gets whether the "ask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasAsk {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "ask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearAsk() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOADepthQuote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOADepthQuote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Size != other.Size) return false;
    if (Bid != other.Bid) return false;
    if (Ask != other.Ask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasSize) hash ^= Size.GetHashCode();
    if (HasBid) hash ^= Bid.GetHashCode();
    if (HasAsk) hash ^= Ask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteUInt64(Id);
    }
    if (HasSize) {
      output.WriteRawTag(24);
      output.WriteUInt64(Size);
    }
    if (HasBid) {
      output.WriteRawTag(32);
      output.WriteUInt64(Bid);
    }
    if (HasAsk) {
      output.WriteRawTag(40);
      output.WriteUInt64(Ask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteUInt64(Id);
    }
    if (HasSize) {
      output.WriteRawTag(24);
      output.WriteUInt64(Size);
    }
    if (HasBid) {
      output.WriteRawTag(32);
      output.WriteUInt64(Bid);
    }
    if (HasAsk) {
      output.WriteRawTag(40);
      output.WriteUInt64(Ask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
    }
    if (HasSize) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
    }
    if (HasBid) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bid);
    }
    if (HasAsk) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOADepthQuote other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasSize) {
      Size = other.Size;
    }
    if (other.HasBid) {
      Bid = other.Bid;
    }
    if (other.HasAsk) {
      Ask = other.Ask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt64();
          break;
        }
        case 24: {
          Size = input.ReadUInt64();
          break;
        }
        case 32: {
          Bid = input.ReadUInt64();
          break;
        }
        case 40: {
          Ask = input.ReadUInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Id = input.ReadUInt64();
          break;
        }
        case 24: {
          Size = input.ReadUInt64();
          break;
        }
        case 32: {
          Bid = input.ReadUInt64();
          break;
        }
        case 40: {
          Ask = input.ReadUInt64();
          break;
        }
      }
    }
  }
  #endif

}

/// <summary>
///* Margin call entity, specifies threshold for exact margin call type. Only 3 instances of margin calls are supported, identified by marginCallType. See ProtoOANotificationType for details. 
/// </summary>
public sealed partial class ProtoOAMarginCall : pb::IMessage<ProtoOAMarginCall>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAMarginCall> _parser = new pb::MessageParser<ProtoOAMarginCall>(() => new ProtoOAMarginCall());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAMarginCall> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAMarginCall() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAMarginCall(ProtoOAMarginCall other) : this() {
    _hasBits0 = other._hasBits0;
    marginCallType_ = other.marginCallType_;
    marginLevelThreshold_ = other.marginLevelThreshold_;
    utcLastUpdateTimestamp_ = other.utcLastUpdateTimestamp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAMarginCall Clone() {
    return new ProtoOAMarginCall(this);
  }

  /// <summary>Field number for the "marginCallType" field.</summary>
  public const int MarginCallTypeFieldNumber = 1;
  private readonly static global::ProtoOANotificationType MarginCallTypeDefaultValue = global::ProtoOANotificationType.MarginLevelThreshold1;

  private global::ProtoOANotificationType marginCallType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::ProtoOANotificationType MarginCallType {
    get { if ((_hasBits0 & 1) != 0) { return marginCallType_; } else { return MarginCallTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      marginCallType_ = value;
    }
  }
  /// <summary>Gets whether the "marginCallType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginCallType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "marginCallType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginCallType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "marginLevelThreshold" field.</summary>
  public const int MarginLevelThresholdFieldNumber = 2;
  private readonly static double MarginLevelThresholdDefaultValue = 0D;

  private double marginLevelThreshold_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MarginLevelThreshold {
    get { if ((_hasBits0 & 2) != 0) { return marginLevelThreshold_; } else { return MarginLevelThresholdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      marginLevelThreshold_ = value;
    }
  }
  /// <summary>Gets whether the "marginLevelThreshold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarginLevelThreshold {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "marginLevelThreshold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarginLevelThreshold() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "utcLastUpdateTimestamp" field.</summary>
  public const int UtcLastUpdateTimestampFieldNumber = 3;
  private readonly static long UtcLastUpdateTimestampDefaultValue = 0L;

  private long utcLastUpdateTimestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UtcLastUpdateTimestamp {
    get { if ((_hasBits0 & 4) != 0) { return utcLastUpdateTimestamp_; } else { return UtcLastUpdateTimestampDefaultValue; } }
    set {
      _hasBits0 |= 4;
      utcLastUpdateTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "utcLastUpdateTimestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasUtcLastUpdateTimestamp {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "utcLastUpdateTimestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearUtcLastUpdateTimestamp() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAMarginCall);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAMarginCall other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MarginCallType != other.MarginCallType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarginLevelThreshold, other.MarginLevelThreshold)) return false;
    if (UtcLastUpdateTimestamp != other.UtcLastUpdateTimestamp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMarginCallType) hash ^= MarginCallType.GetHashCode();
    if (HasMarginLevelThreshold) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarginLevelThreshold);
    if (HasUtcLastUpdateTimestamp) hash ^= UtcLastUpdateTimestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasMarginCallType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) MarginCallType);
    }
    if (HasMarginLevelThreshold) {
      output.WriteRawTag(17);
      output.WriteDouble(MarginLevelThreshold);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasMarginCallType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) MarginCallType);
    }
    if (HasMarginLevelThreshold) {
      output.WriteRawTag(17);
      output.WriteDouble(MarginLevelThreshold);
    }
    if (HasUtcLastUpdateTimestamp) {
      output.WriteRawTag(24);
      output.WriteInt64(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasMarginCallType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarginCallType);
    }
    if (HasMarginLevelThreshold) {
      size += 1 + 8;
    }
    if (HasUtcLastUpdateTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcLastUpdateTimestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAMarginCall other) {
    if (other == null) {
      return;
    }
    if (other.HasMarginCallType) {
      MarginCallType = other.MarginCallType;
    }
    if (other.HasMarginLevelThreshold) {
      MarginLevelThreshold = other.MarginLevelThreshold;
    }
    if (other.HasUtcLastUpdateTimestamp) {
      UtcLastUpdateTimestamp = other.UtcLastUpdateTimestamp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MarginCallType = (global::ProtoOANotificationType) input.ReadEnum();
          break;
        }
        case 17: {
          MarginLevelThreshold = input.ReadDouble();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          MarginCallType = (global::ProtoOANotificationType) input.ReadEnum();
          break;
        }
        case 17: {
          MarginLevelThreshold = input.ReadDouble();
          break;
        }
        case 24: {
          UtcLastUpdateTimestamp = input.ReadInt64();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ProtoOAHoliday : pb::IMessage<ProtoOAHoliday>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProtoOAHoliday> _parser = new pb::MessageParser<ProtoOAHoliday>(() => new ProtoOAHoliday());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProtoOAHoliday> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::OpenApiModelMessagesReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAHoliday() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAHoliday(ProtoOAHoliday other) : this() {
    _hasBits0 = other._hasBits0;
    holidayId_ = other.holidayId_;
    name_ = other.name_;
    description_ = other.description_;
    scheduleTimeZone_ = other.scheduleTimeZone_;
    holidayDate_ = other.holidayDate_;
    isRecurring_ = other.isRecurring_;
    startSecond_ = other.startSecond_;
    endSecond_ = other.endSecond_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProtoOAHoliday Clone() {
    return new ProtoOAHoliday(this);
  }

  /// <summary>Field number for the "holidayId" field.</summary>
  public const int HolidayIdFieldNumber = 1;
  private readonly static long HolidayIdDefaultValue = 0L;

  private long holidayId_;
  /// <summary>
  /// Unique ID of holiday.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayId {
    get { if ((_hasBits0 & 1) != 0) { return holidayId_; } else { return HolidayIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      holidayId_ = value;
    }
  }
  /// <summary>Gets whether the "holidayId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "holidayId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private readonly static string NameDefaultValue = "";

  private string name_;
  /// <summary>
  /// Name of holiday.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Name {
    get { return name_ ?? NameDefaultValue; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasName {
    get { return name_ != null; }
  }
  /// <summary>Clears the value of the "name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearName() {
    name_ = null;
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 3;
  private readonly static string DescriptionDefaultValue = "";

  private string description_;
  /// <summary>
  /// Description of holiday.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_ ?? DescriptionDefaultValue; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "description" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasDescription {
    get { return description_ != null; }
  }
  /// <summary>Clears the value of the "description" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearDescription() {
    description_ = null;
  }

  /// <summary>Field number for the "scheduleTimeZone" field.</summary>
  public const int ScheduleTimeZoneFieldNumber = 4;
  private readonly static string ScheduleTimeZoneDefaultValue = "";

  private string scheduleTimeZone_;
  /// <summary>
  /// Timezone used for holiday.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ScheduleTimeZone {
    get { return scheduleTimeZone_ ?? ScheduleTimeZoneDefaultValue; }
    set {
      scheduleTimeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "scheduleTimeZone" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasScheduleTimeZone {
    get { return scheduleTimeZone_ != null; }
  }
  /// <summary>Clears the value of the "scheduleTimeZone" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearScheduleTimeZone() {
    scheduleTimeZone_ = null;
  }

  /// <summary>Field number for the "holidayDate" field.</summary>
  public const int HolidayDateFieldNumber = 5;
  private readonly static long HolidayDateDefaultValue = 0L;

  private long holidayDate_;
  /// <summary>
  /// Amount of days from 01-01-1970, multiply it by 86400000 to get unix timestamp.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long HolidayDate {
    get { if ((_hasBits0 & 2) != 0) { return holidayDate_; } else { return HolidayDateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      holidayDate_ = value;
    }
  }
  /// <summary>Gets whether the "holidayDate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasHolidayDate {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "holidayDate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearHolidayDate() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isRecurring" field.</summary>
  public const int IsRecurringFieldNumber = 6;
  private readonly static bool IsRecurringDefaultValue = false;

  private bool isRecurring_;
  /// <summary>
  /// If TRUE, then the holiday happens each year.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsRecurring {
    get { if ((_hasBits0 & 4) != 0) { return isRecurring_; } else { return IsRecurringDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isRecurring_ = value;
    }
  }
  /// <summary>Gets whether the "isRecurring" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasIsRecurring {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isRecurring" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearIsRecurring() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "startSecond" field.</summary>
  public const int StartSecondFieldNumber = 7;
  private readonly static int StartSecondDefaultValue = 0;

  private int startSecond_;
  /// <summary>
  /// Amount of seconds from 00:00:00 of the holiday day when holiday actually starts.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StartSecond {
    get { if ((_hasBits0 & 8) != 0) { return startSecond_; } else { return StartSecondDefaultValue; } }
    set {
      _hasBits0 |= 8;
      startSecond_ = value;
    }
  }
  /// <summary>Gets whether the "startSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStartSecond {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "startSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStartSecond() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "endSecond" field.</summary>
  public const int EndSecondFieldNumber = 8;
  private readonly static int EndSecondDefaultValue = 0;

  private int endSecond_;
  /// <summary>
  /// Amount of seconds from 00:00:00 of the holiday day when holiday actually finishes.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int EndSecond {
    get { if ((_hasBits0 & 16) != 0) { return endSecond_; } else { return EndSecondDefaultValue; } }
    set {
      _hasBits0 |= 16;
      endSecond_ = value;
    }
  }
  /// <summary>Gets whether the "endSecond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasEndSecond {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "endSecond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearEndSecond() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProtoOAHoliday);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProtoOAHoliday other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HolidayId != other.HolidayId) return false;
    if (Name != other.Name) return false;
    if (Description != other.Description) return false;
    if (ScheduleTimeZone != other.ScheduleTimeZone) return false;
    if (HolidayDate != other.HolidayDate) return false;
    if (IsRecurring != other.IsRecurring) return false;
    if (StartSecond != other.StartSecond) return false;
    if (EndSecond != other.EndSecond) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasHolidayId) hash ^= HolidayId.GetHashCode();
    if (HasName) hash ^= Name.GetHashCode();
    if (HasDescription) hash ^= Description.GetHashCode();
    if (HasScheduleTimeZone) hash ^= ScheduleTimeZone.GetHashCode();
    if (HasHolidayDate) hash ^= HolidayDate.GetHashCode();
    if (HasIsRecurring) hash ^= IsRecurring.GetHashCode();
    if (HasStartSecond) hash ^= StartSecond.GetHashCode();
    if (HasEndSecond) hash ^= EndSecond.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasHolidayId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      output.WriteRawTag(40);
      output.WriteInt64(HolidayDate);
    }
    if (HasIsRecurring) {
      output.WriteRawTag(48);
      output.WriteBool(IsRecurring);
    }
    if (HasStartSecond) {
      output.WriteRawTag(56);
      output.WriteInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(64);
      output.WriteInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasHolidayId) {
      output.WriteRawTag(8);
      output.WriteInt64(HolidayId);
    }
    if (HasName) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (HasDescription) {
      output.WriteRawTag(26);
      output.WriteString(Description);
    }
    if (HasScheduleTimeZone) {
      output.WriteRawTag(34);
      output.WriteString(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      output.WriteRawTag(40);
      output.WriteInt64(HolidayDate);
    }
    if (HasIsRecurring) {
      output.WriteRawTag(48);
      output.WriteBool(IsRecurring);
    }
    if (HasStartSecond) {
      output.WriteRawTag(56);
      output.WriteInt32(StartSecond);
    }
    if (HasEndSecond) {
      output.WriteRawTag(64);
      output.WriteInt32(EndSecond);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasHolidayId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HolidayId);
    }
    if (HasName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (HasDescription) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (HasScheduleTimeZone) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ScheduleTimeZone);
    }
    if (HasHolidayDate) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(HolidayDate);
    }
    if (HasIsRecurring) {
      size += 1 + 1;
    }
    if (HasStartSecond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartSecond);
    }
    if (HasEndSecond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndSecond);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProtoOAHoliday other) {
    if (other == null) {
      return;
    }
    if (other.HasHolidayId) {
      HolidayId = other.HolidayId;
    }
    if (other.HasName) {
      Name = other.Name;
    }
    if (other.HasDescription) {
      Description = other.Description;
    }
    if (other.HasScheduleTimeZone) {
      ScheduleTimeZone = other.ScheduleTimeZone;
    }
    if (other.HasHolidayDate) {
      HolidayDate = other.HolidayDate;
    }
    if (other.HasIsRecurring) {
      IsRecurring = other.IsRecurring;
    }
    if (other.HasStartSecond) {
      StartSecond = other.StartSecond;
    }
    if (other.HasEndSecond) {
      EndSecond = other.EndSecond;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          HolidayId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 40: {
          HolidayDate = input.ReadInt64();
          break;
        }
        case 48: {
          IsRecurring = input.ReadBool();
          break;
        }
        case 56: {
          StartSecond = input.ReadInt32();
          break;
        }
        case 64: {
          EndSecond = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          HolidayId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Description = input.ReadString();
          break;
        }
        case 34: {
          ScheduleTimeZone = input.ReadString();
          break;
        }
        case 40: {
          HolidayDate = input.ReadInt64();
          break;
        }
        case 48: {
          IsRecurring = input.ReadBool();
          break;
        }
        case 56: {
          StartSecond = input.ReadInt32();
          break;
        }
        case 64: {
          EndSecond = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
